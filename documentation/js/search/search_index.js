var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/APIFeatures.html",[0,0.135,1,2.852]],["body/classes/APIFeatures.html",[0,0.121,1,4.197,2,1.053,3,0.096,4,0.096,5,0.082,6,3.087,7,0.257,8,1.438,9,6.699,10,7.152,11,1.156,12,4.474,13,1.134,14,5.027,15,0.61,16,5.027,17,0.878,18,0.015,19,0.629,20,0.779,21,0.847,22,3.551,23,3.551,24,0.787,25,6.956,26,5.027,27,6.347,28,2.422,29,3.551,30,3.551,31,5.074,32,5.027,33,4.239,34,5.027,35,3.551,36,2.371,37,3.551,38,3.551,39,3.551,40,5.027,41,3.551,42,5.027,43,3.551,44,4.371,45,3.358,46,3.551,47,3.551,48,3.551,49,1.514,50,5.027,51,3.551,52,3.551,53,3.551,54,3.551,55,3.551,56,3.551,57,3.551,58,3.551,59,3.551,60,3.551,61,3.551,62,3.551,63,3.551,64,3.551,65,3.551,66,3.551,67,3.551,68,5.836,69,3.551,70,4.239,71,3.551,72,3.551,73,3.551,74,3.551,75,3.551,76,0.109,77,2.782,78,0.006,79,0.009,80,0.006]],["title/controllers/AppController.html",[81,1.266,82,2.852]],["body/controllers/AppController.html",[0,0.191,3,0.151,4,0.151,5,0.13,7,0.406,11,1.561,15,0.538,18,0.014,24,1.242,49,1.336,76,0.172,78,0.01,79,0.012,80,0.01,81,2.167,82,4.88,83,1.857,84,4.87,85,5.945,86,1.662,87,5.601,88,1.561,89,0.522,90,0.78,91,4.564,92,4.87,93,2.815,94,1.929,95,5.601]],["title/modules/AppModule.html",[96,1.017,97,2.852]],["body/modules/AppModule.html",[0,0.116,3,0.092,4,0.092,5,0.079,18,0.014,76,0.105,78,0.006,79,0.008,80,0.006,82,4.1,83,1.617,89,0.615,90,0.474,91,4.288,92,2.959,96,1.462,97,5.889,98,1.317,99,1.372,100,1.492,101,1.492,102,1.372,103,2.395,104,1.43,105,2.959,106,2.959,107,2.959,108,3.142,109,4.581,110,4.288,111,4.288,112,4.288,113,4.037,114,4.288,115,4.288,116,4.581,117,4.581,118,4.581,119,3.007,120,2.138,121,1.492,122,1.492,123,3.404,124,4.1,125,2.452,126,3.404,127,2.959,128,3.404,129,3.404,130,3.404,131,3.404,132,1.711,133,2.959,134,3.404,135,4.878,136,1.632,137,2.959,138,3.404,139,2.128,140,2.959,141,3.404,142,3.404,143,3.404,144,3.404,145,3.404,146,3.404,147,2.959,148,2.667,149,2.959,150,2.667,151,4.878,152,2.667,153,3.404,154,3.404,155,3.404,156,3.404,157,2.667,158,3.404,159,3.404,160,1.492]],["title/injectables/AppService.html",[91,2.479,161,0.676]],["body/injectables/AppService.html",[0,0.193,3,0.153,4,0.153,5,0.131,7,0.41,11,1.572,15,0.545,18,0.014,24,1.257,49,1.352,76,0.174,78,0.01,79,0.012,80,0.01,85,5.969,88,1.572,89,0.526,90,0.789,91,4.273,161,1.165,162,1.952,163,4.928,164,5.668,165,3.786,166,1.744,167,3.155,168,3.544,169,4.44,170,4.44]],["title/controllers/AuthController.html",[81,1.266,171,2.852]],["body/controllers/AuthController.html",[0,0.109,3,0.086,4,0.086,5,0.074,7,0.231,11,1.072,13,1.021,15,0.683,17,1.714,18,0.014,19,1.228,20,0.622,21,1.653,24,1.575,49,1.653,76,0.098,78,0.005,79,0.008,80,0.005,81,1.021,83,1.06,86,2.107,89,0.558,90,0.445,171,3.353,172,2.779,173,1.688,174,2.779,175,2.118,176,5.258,177,4.662,178,4.053,179,4.662,180,4.662,181,4.053,182,4.662,183,4.053,184,3.197,185,3.197,186,2.77,187,3.197,188,3.197,189,3.197,190,2.669,191,3.197,192,2.595,193,3.197,194,3.197,195,3.197,196,3.197,197,3.197,198,3.197,199,3.197,200,3.197,201,3.197,202,3.197,203,3.197,204,3.197,205,3.366,206,4.662,207,3.197,208,1.489,209,3.197,210,4.662,211,3.197,212,4.662,213,2.135,214,1.779,215,1.779,216,1.688,217,1.779,218,1.779,219,2.779,220,1.688,221,3.239,222,2.504,223,2.779,224,1.144,225,2.779,226,1.879,227,1.688,228,3.197,229,1.734,230,2.779,231,3.063,232,1.464,233,1.532,234,1.779,235,3.197,236,1.734,237,1.999,238,3.197,239,3.197,240,3.197,241,3.197,242,1.861,243,3.197,244,3.197,245,3.197,246,3.197,247,3.197,248,3.197,249,3.197,250,3.197,251,3.197,252,2.779,253,3.197,254,3.197,255,4.662,256,3.197,257,3.197,258,3.197,259,3.197,260,3.197,261,4.662,262,2.779,263,3.197,264,3.197,265,3.197]],["title/modules/AuthModule.html",[96,1.017,108,1.816]],["body/modules/AuthModule.html",[0,0.133,3,0.105,4,0.105,5,0.09,18,0.014,76,0.12,78,0.007,79,0.009,80,0.007,83,1.78,89,0.606,90,0.543,96,1.575,98,1.51,99,1.573,100,1.711,101,1.711,102,1.573,103,2.579,104,2.579,108,3.718,119,3.141,120,2.354,121,1.711,122,1.711,125,2.699,171,4.415,220,2.061,221,4.218,222,3.057,224,2.798,225,3.393,226,2.164,229,2.782,230,3.393,232,1.787,266,3.393,267,3.393,268,3.393,269,3.902,270,4.786,271,4.786,272,3.435,273,3.602,274,3.902,275,4.669,276,3.902,277,2.172,278,3.902,279,3.902,280,2.807,281,3.902,282,3.057,283,3.902,284,3.902,285,2.807,286,2.807,287,2.606,288,2.807,289,2.807,290,2.807]],["title/injectables/AuthService.html",[161,0.676,221,2.334]],["body/injectables/AuthService.html",[0,0.076,3,0.06,4,0.06,5,0.051,7,0.16,11,0.81,13,1.125,15,0.677,17,1.686,18,0.014,19,1.208,20,0.728,21,1.626,24,1.538,28,2.393,44,4.743,49,1.755,76,0.068,78,0.01,79,0.006,80,0.004,85,3.915,88,1.641,89,0.447,90,0.308,94,1.212,160,0.97,161,0.6,162,0.762,169,1.734,170,1.734,175,2.068,176,3.061,178,4.345,181,3.061,183,3.061,186,2.289,190,1.26,205,1.232,208,2.416,217,1.232,221,2.072,223,1.924,231,3.391,232,1.014,236,2.536,237,2.741,242,2.167,252,1.924,262,1.924,291,1.924,292,3.521,293,1.77,294,2.758,295,3.521,296,3.521,297,3.061,298,3.521,299,1.592,300,2.512,301,2.213,302,2.351,303,3.521,304,4.997,305,2.213,306,2.213,307,3.521,308,2.213,309,3.521,310,2.213,311,2.758,312,2.213,313,2.213,314,2.213,315,3.521,316,2.213,317,3.435,318,3.061,319,3.521,320,2.213,321,3.34,322,3.521,323,2.213,324,3.521,325,2.395,326,2.213,327,3.521,328,5.297,329,2.213,330,1.478,331,3.521,332,2.213,333,1.924,334,1.77,335,1.232,336,1.924,337,3.061,338,2.213,339,3.061,340,3.061,341,2.072,342,2.532,343,2.758,344,3.061,345,3.521,346,3.527,347,1.734,348,2.213,349,3.521,350,4.384,351,2.213,352,4.997,353,3.521,354,1.478,355,2.072,356,4.384,357,2.213,358,3.521,359,1.924,360,1.543,361,2.213,362,2.213,363,1.924,364,3.521,365,3.521,366,3.061,367,3.521,368,1.924,369,2.213,370,1.232,371,1.014,372,2.213,373,2.213,374,2.213,375,2.213,376,2.213,377,4.384,378,2.213,379,2.213,380,2.213,381,2.213,382,1.734,383,2.213,384,1.592,385,2.213]],["title/modules/DatabaseModule.html",[96,1.017,109,2.648]],["body/modules/DatabaseModule.html",[0,0.203,3,0.16,4,0.16,5,0.138,18,0.014,76,0.183,78,0.01,79,0.012,80,0.01,89,0.542,90,0.829,96,1.805,98,2.304,103,2.501,104,2.501,109,4.701,386,5.954,387,5.87,388,5.954]],["title/injectables/FacebookStrategy.html",[161,0.676,270,2.648]],["body/injectables/FacebookStrategy.html",[0,0.118,3,0.133,4,0.093,5,0.08,7,0.251,11,1.137,13,1.578,15,0.553,17,1.425,18,0.014,19,1.223,20,0.659,21,1.374,24,1.096,28,2.355,49,1.179,76,0.107,78,0.008,79,0.008,80,0.006,88,1.587,89,0.559,90,0.483,94,1.702,161,0.842,162,1.194,175,1.835,186,2.264,205,1.929,208,2.12,220,1.831,231,3.953,232,1.588,236,2.469,242,1.773,270,3.301,294,3.872,299,2.493,300,3.156,302,3.301,311,3.872,321,1.831,325,2.369,341,2.04,346,3.316,347,2.715,360,2.166,371,1.588,382,2.715,389,3.014,390,4.142,391,3.466,392,3.466,393,3.014,394,5.007,395,3.835,396,5.007,397,4.942,398,3.466,399,3.466,400,4.297,401,3.466,402,5.007,403,2.493,404,2.493,405,2.493,406,2.315,407,5.007,408,3.014,409,3.014,410,2.715,411,3.09,412,3.014,413,1.342,414,2.493,415,2.493,416,3.014,417,3.466,418,3.014,419,3.466,420,3.014,421,3.466,422,3.014,423,3.466,424,4.297,425,3.466,426,3.014,427,3.014,428,3.014,429,2.715,430,3.466,431,2.715,432,3.014,433,3.014,434,3.014,435,2.715,436,3.014,437,3.014,438,2.715,439,3.466,440,4.297,441,3.014,442,3.014,443,3.014]],["title/classes/FileUploadDto.html",[0,0.135,444,2.852]],["body/classes/FileUploadDto.html",[0,0.196,2,1.702,3,0.155,4,0.155,5,0.177,7,0.415,8,1.969,15,0.551,18,0.014,20,0.919,76,0.176,78,0.01,79,0.012,80,0.01,86,1.702,88,1.583,89,0.442,444,4.951,445,4.988,446,4.988,447,6.885,448,6.885,449,5.737,450,5.986,451,4.126]],["title/classes/Genre.html",[0,0.135,452,2.334]],["body/classes/Genre.html",[0,0.164,2,1.425,3,0.129,4,0.129,5,0.111,7,0.348,8,1.764,15,0.654,18,0.014,19,1.207,20,0.991,76,0.148,78,0.008,79,0.011,80,0.008,86,2.02,88,1.653,89,0.475,160,2.703,166,1.479,413,2.387,452,3.63,453,4.177,454,2.636,455,4.257,456,4.084,457,3.432,458,2.956,459,4.492,460,2.896,461,4.804,462,3.209,463,3.099,464,3.099,465,4.804,466,4.435,467,4.804,468,3.264,469,2.303,470,4.118,471,2.824,472,2.106,473,1.325,474,3.455,475,3.004,476,3.209]],["title/classes/GenreDto.html",[0,0.135,477,2.648]],["body/classes/GenreDto.html",[0,0.191,2,1.657,3,0.15,4,0.15,5,0.129,7,0.404,8,1.937,15,0.701,18,0.014,19,1.292,20,0.973,76,0.172,78,0.01,79,0.012,80,0.01,88,1.744,94,2.718,455,4.558,477,4.524,478,4.855,479,3.664,480,5.584,481,5.584,482,1.937,483,5.584]],["title/controllers/GenresController.html",[81,1.266,484,2.852]],["body/controllers/GenresController.html",[0,0.137,3,0.108,4,0.108,5,0.093,7,0.29,11,1.258,15,0.643,17,1.54,18,0.014,19,1.103,21,1.485,24,1.483,28,1.33,36,2.678,49,1.596,76,0.123,78,0.007,79,0.009,80,0.007,81,1.281,83,1.33,86,1.984,89,0.569,90,0.558,93,2.015,173,2.118,175,2.089,190,1.957,192,3.045,213,2.678,214,2.232,215,2.232,216,2.118,218,3.897,224,1.435,226,2.205,227,2.118,229,2.317,233,1.922,234,2.232,242,2.059,477,3.654,484,3.935,485,3.486,486,3.486,487,3.42,488,3.935,489,5.241,490,3.935,491,2.507,492,3.42,493,3.141,494,4.01,495,3.141,496,3.141,497,4.01,498,4.01,499,3.141,500,3.935,501,4.01,502,2.507,503,1.837,504,1.922,505,3.486,506,3.893,507,2.884,508,4.01,509,3.42,510,2.884,511,2.507,512,3.141,513,3.141,514,3.141,515,2.678,516,4.01,517,4.01,518,3.141,519,4.01,520,2.884,521,3.141,522,4.01]],["title/modules/GenresModule.html",[96,1.017,110,2.479]],["body/modules/GenresModule.html",[0,0.156,3,0.123,4,0.123,5,0.106,18,0.014,76,0.141,78,0.008,79,0.01,80,0.008,83,1.98,89,0.609,90,0.637,96,1.706,98,1.77,99,1.843,100,2.004,101,2.004,102,1.843,103,2.794,104,1.921,108,3.436,110,5.012,119,3.289,120,2.618,121,2.004,122,2.004,125,3.001,224,2.685,226,2.407,229,2.222,272,2.192,273,2.298,277,2.545,484,4.783,503,2.094,504,2.192,506,4.691,507,3.288,523,3.975,524,3.975,525,4.572,526,4.572,527,4.572,528,4.678,529,4.572,530,2.691,531,3.054,532,2.858]],["title/injectables/GenresService.html",[161,0.676,506,2.479]],["body/injectables/GenresService.html",[0,0.09,3,0.071,4,0.071,5,0.061,7,0.192,11,0.932,12,1.77,13,1.294,15,0.626,17,1.549,18,0.014,19,1.19,20,0.735,21,1.493,24,1.388,28,2.16,33,1.77,49,1.643,76,0.081,78,0.007,79,0.007,80,0.005,88,1.132,89,0.501,90,0.369,94,0.913,160,1.776,161,0.691,162,0.913,165,1.77,166,0.816,167,3.067,168,1.657,175,2.035,186,3.219,190,0.948,217,1.475,236,0.986,242,2.005,293,2.037,325,2.846,334,1.332,354,3.68,355,3.685,370,3.067,371,2.72,452,4.554,454,2.423,456,2.91,460,1.068,473,1.637,474,1.906,477,3.68,482,1.791,505,2.304,506,2.534,533,2.304,534,3.175,535,3.963,536,2.707,537,3.175,538,2.65,539,2.65,540,4.053,541,4.053,542,2.65,543,3.175,544,2.65,545,2.65,546,2.707,547,2.65,548,3.175,549,2.65,550,2.534,551,2.65,552,1.27,553,2.076,554,1.475,555,1.214,556,2.65,557,2.65,558,1.27,559,2.65,560,1.475,561,2.65,562,4.351,563,2.65,564,2.65,565,1.657,566,3.963,567,3.68,568,4.053,569,2.65,570,1.906,571,1.906,572,2.65,573,1.906,574,1.906,575,1.906,576,2.707,577,1.77,578,3.286,579,1.77,580,1.77,581,1.77,582,1.77,583,1.906,584,2.65,585,2.915,586,1.906,587,2.915,588,1.906,589,2.915,590,1.906,591,2.915,592,1.906,593,2.65,594,1.906,595,1.906,596,1.906,597,1.906,598,1.56,599,1.906]],["title/injectables/GoogleStrategy.html",[161,0.676,271,2.648]],["body/injectables/GoogleStrategy.html",[0,0.119,3,0.094,4,0.094,5,0.081,7,0.252,11,1.14,13,1.583,15,0.555,17,1.427,18,0.014,19,1.114,20,0.661,21,1.377,24,1.099,28,2.357,49,0.83,76,0.107,78,0.008,79,0.008,80,0.006,88,1.589,89,0.569,90,0.484,94,1.706,161,0.845,162,1.198,175,1.837,186,2.269,205,1.936,208,2.123,220,1.837,231,3.957,232,1.593,236,2.473,242,1.776,271,3.309,294,3.882,299,2.502,300,3.161,302,3.309,311,3.882,317,4.521,321,1.837,325,2.375,341,2.048,346,3.322,347,2.725,360,2.172,371,1.593,382,2.725,390,4.15,393,3.025,394,5.018,395,3.511,396,5.018,402,5.468,404,2.502,405,2.502,406,2.324,408,3.025,409,3.025,410,2.725,411,3.098,412,3.025,413,1.347,414,2.502,415,2.502,416,3.025,418,3.025,420,3.025,422,3.025,424,3.025,426,3.025,427,3.025,428,3.025,429,2.725,431,2.725,432,3.025,434,3.025,435,2.725,436,3.025,437,3.025,438,2.725,440,4.308,441,3.025,442,3.025,443,3.025,600,3.025,601,3.479,602,3.479,603,6.289,604,3.479,605,4.308,606,3.025,607,3.025,608,3.479,609,3.479,610,3.479,611,3.479,612,3.479,613,3.479,614,2.725,615,2.725,616,3.479,617,3.479,618,3.479,619,3.025]],["title/controllers/HealthController.html",[81,1.266,124,2.852]],["body/controllers/HealthController.html",[0,0.165,3,0.13,4,0.13,5,0.112,7,0.35,11,1.423,13,1.542,15,0.594,18,0.014,24,1.372,49,1.476,76,0.148,78,0.008,79,0.011,80,0.008,81,1.542,83,1.601,86,1.835,89,0.554,90,0.672,124,4.449,152,3.783,166,1.904,173,2.55,175,1.284,236,2.539,242,1.486,620,4.198,621,6.187,622,6.259,623,7.199,624,4.829,625,4.829,626,4.829,627,4.829,628,6.826,629,6.187,630,6.187,631,6.187,632,4.198,633,4.829,634,4.829,635,4.829,636,4.829,637,4.829,638,4.829,639,6.187,640,4.829,641,4.829,642,4.829,643,4.829,644,4.829,645,4.829]],["title/interfaces/IDatabaseConfig.html",[646,2.648,647,2.648]],["body/interfaces/IDatabaseConfig.html",[3,0.143,4,0.143,5,0.123,7,0.385,8,1.88,18,0.014,20,0.952,76,0.202,78,0.009,79,0.011,80,0.009,88,1.819,321,2.809,330,3.551,482,1.521,598,3.13,646,4.39,647,4.39,648,4.166,649,4.166,650,4.978,651,3.414,652,4.978,653,5.829,654,4.166,655,4.166,656,4.166,657,4.166,658,4.623,659,3.324]],["title/interfaces/IDatabaseConfigAttributes.html",[646,2.648,653,2.852]],["body/interfaces/IDatabaseConfigAttributes.html",[3,0.124,4,0.124,5,0.107,7,0.333,8,1.716,18,0.014,20,1.036,21,1.947,76,0.184,78,0.008,79,0.01,80,0.008,88,1.901,321,3.735,330,4.722,482,1.909,598,4.162,646,4.007,647,3.076,648,3.608,649,3.608,650,3.076,651,2.109,652,3.076,653,5.273,654,5.539,655,5.539,656,5.539,657,5.539,658,6.148,659,4.172]],["title/injectables/JwtAuthGuard.html",[161,0.676,224,1.419]],["body/injectables/JwtAuthGuard.html",[0,0.205,3,0.161,4,0.161,5,0.139,18,0.014,76,0.184,78,0.01,79,0.012,80,0.01,89,0.544,90,0.834,161,1.204,162,2.063,219,5.209,220,3.164,224,2.528,413,2.319,660,5.209,661,4.309,662,5.991]],["title/injectables/JwtStrategy.html",[161,0.676,272,1.901]],["body/injectables/JwtStrategy.html",[0,0.161,3,0.127,4,0.127,5,0.109,7,0.342,11,1.402,13,1.508,15,0.586,17,1.508,18,0.014,19,1.08,20,0.814,21,1.454,24,1.047,28,1.565,49,1.126,76,0.145,78,0.008,79,0.01,80,0.008,89,0.549,90,0.657,93,2.372,94,1.625,161,1.039,162,1.625,175,1.796,208,2.157,220,2.493,242,1.453,272,2.922,287,3.153,299,3.395,300,3.587,302,4.072,336,4.104,346,2.493,359,4.104,370,2.627,371,2.162,390,4.385,404,3.395,405,3.395,406,3.153,413,1.827,414,3.395,415,3.395,429,4.776,460,1.902,622,4.104,663,4.104,664,4.72,665,6.097,666,4.72,667,4.72,668,4.104,669,5.301,670,4.72,671,4.72,672,4.72,673,4.72,674,4.72,675,4.72,676,4.72,677,4.72,678,4.72]],["title/injectables/LocalStrategy.html",[161,0.676,273,1.993]],["body/injectables/LocalStrategy.html",[0,0.162,3,0.128,4,0.128,5,0.11,7,0.343,11,1.407,13,1.515,15,0.588,17,1.513,18,0.014,19,1.084,20,0.816,21,1.459,24,1.052,28,1.573,49,1.132,76,0.146,78,0.008,79,0.01,80,0.008,88,1.743,89,0.55,90,0.661,93,2.384,94,1.634,161,1.043,162,1.634,175,1.8,186,2.801,208,2.284,220,2.506,221,4.46,222,3.717,242,1.46,273,3.074,321,3.777,330,3.168,360,2.08,370,2.641,371,2.173,390,4.399,404,3.412,405,3.412,406,3.168,413,1.836,414,3.412,415,3.412,669,4.125,679,4.125,680,4.744,681,4.744,682,6.117,683,4.744,684,4.125,685,4.744,686,4.744,687,4.744,688,4.744]],["title/classes/Movie.html",[0,0.135,473,1.093]],["body/classes/Movie.html",[0,0.093,2,0.809,3,0.073,4,0.073,5,0.063,7,0.197,8,1.184,15,0.729,18,0.014,20,1.057,45,3.344,76,0.084,78,0.005,79,0.007,80,0.005,86,2.25,88,1.559,89,0.534,132,1.37,136,1.307,160,2.451,166,0.839,208,2.261,335,1.518,413,1.603,454,1.938,455,3.13,456,3.475,457,3.662,458,3.328,459,4.238,460,2.732,462,4.016,463,3.558,464,3.558,466,2.978,468,3.394,469,1.307,470,4.228,471,1.897,472,1.195,473,1.542,474,1.961,475,1.705,476,3.344,479,2.517,482,1.811,565,2.589,651,1.249,659,2.589,689,2.371,690,4.353,691,3.923,692,3.307,693,3.475,694,5.007,695,5.007,696,3.773,697,4.353,698,3.475,699,3.662,700,4.353,701,4.862,702,2.727,703,2.727,704,2.727,705,2.727,706,2.727,707,2.727,708,2.727,709,2.727,710,2.438,711,2.727,712,2.766,713,2.727,714,2.727,715,2.727,716,2.727,717,2.727,718,2.727,719,2.727,720,2.645,721,2.727,722,2.787,723,2.371,724,2.136,725,2.136,726,1.821,727,1.37,728,1.961,729,2.136,730,2.371,731,2.371,732,2.136,733,3.291,734,2.371]],["title/classes/MovieActor.html",[0,0.135,692,1.993]],["body/classes/MovieActor.html",[0,0.158,2,1.37,3,0.124,4,0.124,5,0.107,7,0.334,8,1.719,15,0.68,18,0.014,20,1.004,76,0.142,78,0.008,79,0.01,80,0.008,86,2.099,89,0.514,166,1.421,413,2.326,454,2.586,458,2.881,463,3.557,464,3.557,468,3.203,469,2.213,471,2.753,472,2.024,473,2.142,482,2.024,692,3.02,710,3.537,712,4.014,720,3.529,722,3.719,727,3.904,728,3.32,733,3.537,735,4.014,736,5.235,737,3.203,738,4.617,739,4.617,740,4.617,741,4.617,742,4.014]],["title/injectables/MovieActorService.html",[161,0.676,743,2.479]],["body/injectables/MovieActorService.html",[0,0.167,3,0.131,4,0.131,5,0.113,7,0.353,11,1.432,13,1.989,15,0.598,17,1.54,18,0.014,19,1.103,20,0.831,21,1.485,24,1.082,49,1.164,76,0.15,78,0.008,79,0.011,80,0.008,89,0.575,90,0.679,94,1.68,161,1.061,162,1.68,175,1.824,236,2.317,293,3.13,552,2.339,554,2.715,558,2.339,560,2.715,692,3.752,732,3.822,743,3.893,744,4.242,745,4.879,746,4.567,747,4.879,748,4.479,749,5.414,750,5.197,751,4.879,752,3.822,753,4.879,754,4.879,755,4.879,756,4.879]],["title/controllers/MovieController.html",[81,1.266,757,2.852]],["body/controllers/MovieController.html",[0,0.079,3,0.062,4,0.062,5,0.119,7,0.167,11,0.838,15,0.617,17,1.588,18,0.014,19,1.137,20,0.827,21,1.531,24,1.424,28,1.697,36,1.543,45,2.433,49,1.697,76,0.071,78,0.004,79,0.006,80,0.004,81,0.738,83,0.766,86,1.904,88,1.037,89,0.531,90,0.322,93,1.161,157,1.81,167,2.028,173,1.22,175,2.055,190,2.364,192,2.849,214,1.286,215,1.286,216,1.924,218,1.286,224,0.827,226,1.468,227,1.22,229,2.072,233,1.107,234,1.286,242,1.976,325,3.077,334,1.161,355,1.36,444,3.681,451,1.662,455,4.553,473,1.005,482,2.006,487,2.277,488,2.62,490,2.62,491,1.444,492,3.2,500,1.662,502,1.444,503,1.058,504,1.107,509,3.2,510,1.662,511,1.444,512,3.533,513,2.854,514,2.854,515,2.433,520,1.662,550,1.444,691,2.854,757,2.62,758,2.009,759,3.643,760,3.167,761,4.451,762,2.31,763,7.204,764,5.119,765,7.204,766,3.643,767,7.204,768,2.31,769,2.31,770,2.31,771,5.88,772,5.57,773,2.31,774,2.31,775,2.31,776,2.31,777,2.31,778,2.31,779,2.31,780,2.31,781,2.31,782,2.31,783,2.31,784,2.31,785,2.009,786,2.31,787,2.31,788,2.31,789,2.31,790,2.31,791,2.31,792,2.009,793,2.31,794,3.167,795,3.167,796,2.009,797,2.009,798,1.543,799,1.543,800,2.277,801,2.277,802,2.028,803,2.009,804,3.419,805,3.643,806,2.31,807,4.51,808,6.42,809,5.918,810,2.31,811,2.31,812,2.31,813,1.81,814,2.31,815,2.31,816,2.31,817,2.31,818,2.31,819,2.31,820,2.31,821,2.31,822,2.31,823,2.31,824,2.31,825,3.643,826,2.31,827,2.31,828,2.31,829,2.31,830,2.31,831,2.31,832,2.009,833,2.009,834,2.009,835,3.167,836,2.009,837,2.31,838,2.31,839,2.009,840,3.167,841,2.009,842,3.167,843,2.009,844,2.009]],["title/classes/MovieDirector.html",[0,0.135,693,2.094]],["body/classes/MovieDirector.html",[0,0.154,2,1.337,3,0.121,4,0.121,5,0.104,7,0.326,8,1.692,15,0.674,18,0.014,20,0.997,76,0.139,78,0.008,79,0.01,80,0.008,86,2.08,89,0.508,136,3.49,166,1.387,413,2.29,454,2.556,458,2.836,463,3.524,464,3.524,468,3.165,469,2.16,471,2.709,472,1.975,473,2.131,482,2.005,555,2.064,693,3.124,710,3.482,712,3.951,720,3.488,722,3.676,727,3.884,728,3.241,733,3.482,737,3.165,845,3.66,846,3.918,847,5.174,848,4.507,849,4.507,850,4.507,851,4.507]],["title/modules/MovieDirectorModule.html",[96,1.017,111,2.479]],["body/modules/MovieDirectorModule.html",[0,0.179,3,0.142,4,0.142,5,0.122,18,0.014,76,0.162,78,0.009,79,0.011,80,0.009,89,0.546,90,0.732,96,1.821,98,2.035,99,2.119,100,2.305,101,2.305,102,2.119,103,2.982,104,2.982,111,4.932,120,2.862,121,2.305,122,2.305,136,2.521,473,1.8,845,2.643,852,4.572,853,4.572,854,4.572,855,5.109,856,5.258,857,4.695,858,5.258,859,4.572]],["title/injectables/MovieDirectorService.html",[161,0.676,855,2.479]],["body/injectables/MovieDirectorService.html",[0,0.169,3,0.133,4,0.133,5,0.115,7,0.359,11,1.447,13,2.009,15,0.604,17,1.556,18,0.014,19,1.114,20,0.661,21,1.5,24,1.099,49,1.182,76,0.152,78,0.008,79,0.011,80,0.008,89,0.559,90,0.69,94,1.706,136,3.312,161,1.072,162,1.706,175,1.837,236,1.843,293,3.161,473,1.367,552,2.375,554,2.758,558,2.375,560,2.758,692,3.161,693,3.649,726,3.31,749,5.468,845,3.473,855,3.932,857,4.523,860,4.308,861,4.955,862,4.955,863,5.395,864,4.955,865,3.882,866,4.955,867,4.955]],["title/classes/MovieDto.html",[0,0.135,804,2.648]],["body/classes/MovieDto.html",[0,0.119,2,1.032,3,0.094,4,0.094,5,0.081,7,0.252,8,1.417,15,0.711,18,0.014,20,1.057,45,4.748,76,0.107,77,6.174,78,0.006,79,0.008,80,0.006,86,2.156,88,1.83,89,0.268,446,6.319,450,6.43,451,2.502,455,5.028,473,2.147,479,2.9,482,2.254,486,5.779,651,2.269,691,4.521,697,5.018,700,5.779,804,3.309,868,3.025,869,6.647,870,6.647,871,3.479,872,4.955,873,4.955,874,3.479,875,3.479,876,3.479,877,3.479,878,4.955,879,3.479,880,3.479,881,4.955,882,3.479,883,3.479]],["title/classes/MovieGenre.html",[0,0.135,456,2.094]],["body/classes/MovieGenre.html",[0,0.156,2,1.353,3,0.123,4,0.123,5,0.106,7,0.33,8,1.705,15,0.677,18,0.014,20,1.001,76,0.14,78,0.008,79,0.01,80,0.008,86,2.09,89,0.511,166,1.404,413,2.308,452,4.56,454,2.571,456,3.149,458,2.858,463,3.54,464,3.54,468,3.184,469,2.186,471,2.731,472,1.999,473,2.137,482,2.015,555,2.089,710,3.509,712,3.982,720,3.508,722,3.697,733,3.509,737,3.184,845,3.674,884,3.966,885,5.204,886,4.561,887,4.561,888,4.561,889,4.561,890,3.966]],["title/modules/MovieGenresModule.html",[96,1.017,112,2.479]],["body/modules/MovieGenresModule.html",[0,0.18,3,0.142,4,0.142,5,0.122,18,0.014,76,0.162,78,0.009,79,0.011,80,0.009,89,0.547,90,0.734,96,1.823,98,2.041,99,2.125,100,2.311,101,2.311,102,2.125,103,2.986,104,2.986,112,4.935,120,2.867,121,2.311,122,2.311,139,3.297,473,1.454,507,3.792,845,2.65,891,4.585,892,4.585,893,4.585,894,5.111,895,5.273,896,4.703,897,5.273]],["title/injectables/MovieGenresService.html",[161,0.676,894,2.479]],["body/injectables/MovieGenresService.html",[0,0.17,3,0.134,4,0.134,5,0.115,7,0.36,11,1.449,13,2.012,15,0.605,17,1.558,18,0.014,19,1.116,20,0.663,21,1.503,24,1.102,49,1.185,76,0.153,78,0.008,79,0.011,80,0.008,89,0.56,90,0.692,94,1.711,139,4.325,161,1.074,162,1.711,175,1.84,236,1.848,293,3.166,456,3.965,552,2.382,554,2.765,558,2.382,560,2.765,845,3.477,894,3.939,896,4.531,898,4.32,899,4.968,900,4.968,901,6.3,902,5.232,903,4.968,904,3.892,905,4.968,906,4.968,907,4.968,908,4.968]],["title/modules/MovieModule.html",[96,1.017,113,2.334]],["body/modules/MovieModule.html",[0,0.122,3,0.096,4,0.096,5,0.083,18,0.014,76,0.11,78,0.006,79,0.009,80,0.006,83,1.676,89,0.614,90,0.498,96,1.503,98,1.385,99,1.442,100,1.568,101,1.568,102,1.442,103,2.462,104,2.462,108,3.194,110,4.359,111,4.359,112,4.359,113,4.796,114,4.359,115,4.359,119,3.057,120,2.216,121,1.568,122,1.568,125,2.54,132,1.798,133,3.111,136,1.715,137,3.111,139,2.237,140,3.111,157,2.803,224,2.495,226,2.037,229,1.88,272,1.715,273,1.798,277,1.991,473,1.394,503,1.639,504,1.715,530,2.106,531,2.389,532,2.237,651,1.639,743,4.359,748,3.635,757,4.215,798,2.389,799,2.389,802,4.288,803,3.111,909,3.111,910,3.111,911,3.578,912,3.111,913,3.578,914,3.578,915,3.96,916,3.578,917,3.578,918,3.111,919,3.578,920,3.578,921,3.111,922,3.111,923,3.111]],["title/injectables/MovieService.html",[161,0.676,802,2.207]],["body/injectables/MovieService.html",[0,0.052,1,1.102,3,0.041,4,0.041,5,0.079,7,0.111,11,0.598,12,1.023,13,0.831,15,0.566,17,1.456,18,0.014,19,1.074,20,0.728,21,1.404,24,1.261,28,2.339,31,2.947,33,2.988,45,2.264,49,1.482,70,1.023,76,0.104,78,0.004,79,0.004,80,0.003,88,0.78,89,0.527,90,0.213,94,0.528,132,0.77,136,1.247,139,0.958,150,1.2,160,1.486,161,0.443,162,0.528,165,1.023,166,0.8,167,2.223,168,0.958,175,1.965,186,2.697,190,1.429,213,2.264,217,0.853,236,1.486,237,3.04,242,1.812,293,1.307,325,3.201,334,2.008,354,1.023,355,1.995,360,1.14,370,1.887,371,2.049,384,1.102,452,2.634,454,2.794,456,2.739,460,1.048,473,1.99,474,1.102,482,1.91,507,1.102,535,1.871,536,1.737,546,1.737,550,1.626,552,0.734,558,0.734,560,0.853,562,4.52,565,2.797,566,1.102,567,1.023,570,1.102,571,1.102,573,1.102,574,1.102,575,1.102,576,1.737,577,1.023,578,2.264,579,1.023,580,1.023,581,1.023,582,1.023,583,1.102,585,1.871,586,1.102,587,1.871,588,1.102,589,1.871,590,1.102,591,1.871,592,1.102,594,1.102,595,1.102,596,1.102,597,1.871,598,0.902,599,1.102,651,0.702,690,2.947,692,2.606,693,2.882,696,0.853,698,1.374,726,1.023,727,2.859,728,1.102,729,1.2,732,1.2,736,1.2,737,1.625,742,1.332,743,2.497,760,2.261,785,2.261,800,0.958,801,0.958,802,1.448,804,2.988,839,1.332,841,2.261,847,1.2,855,2.497,859,1.332,885,1.2,890,1.332,894,2.497,918,1.332,924,1.2,925,2.601,926,2.601,927,2.601,928,1.532,929,3.389,930,3.389,931,3.389,932,1.532,933,2.601,934,2.601,935,1.532,936,1.532,937,2.601,938,1.532,939,2.601,940,2.601,941,1.532,942,2.601,943,1.532,944,2.601,945,1.532,946,1.532,947,2.601,948,1.532,949,1.532,950,1.532,951,1.2,952,1.332,953,1.332,954,1.2,955,1.532,956,1.532,957,1.532,958,1.532,959,1.532,960,2.601,961,2.038,962,2.947,963,1.532,964,1.532,965,1.532,966,4.228,967,3.389,968,1.532,969,3.389,970,1.532,971,1.532,972,1.532,973,1.532,974,1.532,975,1.532,976,3.389,977,3.389,978,1.532,979,3.389,980,1.532,981,1.532,982,1.532,983,1.532,984,1.532,985,2.601,986,2.261,987,2.601,988,2.601,989,1.532,990,2.601,991,1.532,992,2.601,993,1.532,994,1.332,995,3.995,996,4.863,997,1.532,998,1.532,999,1.532,1000,2.601,1001,1.532,1002,1.532,1003,1.532,1004,1.532,1005,2.655,1006,1.2,1007,1.332,1008,1.2,1009,1.332,1010,2.038,1011,1.2,1012,1.332,1013,1.332,1014,1.332,1015,1.2,1016,1.2,1017,1.2]],["title/classes/Person.html",[0,0.135,727,1.993]],["body/classes/Person.html",[0,0.144,2,1.248,3,0.113,4,0.113,5,0.097,7,0.305,8,1.616,15,0.684,18,0.014,19,1.131,20,1.016,76,0.129,78,0.007,79,0.01,80,0.007,86,2.111,88,1.686,89,0.525,136,2.016,160,2.477,166,1.294,360,2.797,413,2.187,454,2.47,457,3.552,458,3.059,459,4.582,460,2.954,462,3.774,463,3.429,464,3.429,466,4.064,468,3.27,469,2.016,470,4.262,471,2.588,472,1.844,473,1.558,475,3.533,476,2.809,555,1.926,692,3.763,693,3.955,720,2.222,723,3.657,724,3.295,726,2.809,727,2.84,1018,3.657,1019,5.548,1020,4.206,1021,4.206,1022,4.206,1023,4.206,1024,4.206,1025,3.657]],["title/classes/PersonDto.html",[0,0.135,1026,2.648]],["body/classes/PersonDto.html",[0,0.184,2,1.6,3,0.145,4,0.145,5,0.125,7,0.391,8,1.896,15,0.72,18,0.014,19,1.272,20,1,76,0.166,78,0.009,79,0.011,80,0.009,88,1.801,94,2.78,360,3.148,479,3.609,482,1.896,1019,6.243,1026,4.429,1027,4.689,1028,5.393,1029,5.393,1030,5.393,1031,5.393]],["title/controllers/PersonsController.html",[81,1.266,1032,2.852]],["body/controllers/PersonsController.html",[0,0.123,3,0.097,4,0.097,5,0.083,7,0.261,11,1.167,15,0.671,17,1.665,18,0.014,19,1.193,21,1.606,24,1.549,28,1.193,36,2.403,49,1.666,76,0.111,78,0.006,79,0.009,80,0.006,81,1.149,83,1.193,86,2.072,89,0.553,90,0.501,93,1.808,173,1.9,175,2.124,190,1.816,192,2.825,213,2.403,214,2.003,215,2.003,216,1.9,218,4.149,224,1.287,226,2.045,227,1.9,229,2.187,233,1.725,234,2.003,242,2.15,487,3.173,488,3.65,489,5.002,490,3.65,491,2.249,492,3.173,493,2.819,495,2.819,496,2.819,499,2.819,500,3.65,502,2.249,503,1.648,504,1.725,509,3.173,510,2.588,511,2.249,512,2.819,513,2.819,514,2.819,515,2.403,518,2.819,520,2.588,521,2.819,746,2.987,1026,3.926,1032,3.65,1033,3.128,1034,3.598,1035,5.075,1036,4.412,1037,3.598,1038,3.598,1039,3.598,1040,3.598,1041,5.075,1042,3.598,1043,3.598,1044,3.128,1045,5.075,1046,3.598,1047,3.128,1048,3.598,1049,3.598,1050,3.598,1051,3.598,1052,3.598,1053,3.598,1054,3.598,1055,3.128,1056,3.598,1057,3.598]],["title/modules/PersonsModule.html",[96,1.017,114,2.479]],["body/modules/PersonsModule.html",[0,0.152,3,0.12,4,0.12,5,0.103,18,0.014,76,0.137,78,0.008,79,0.01,80,0.008,83,1.946,89,0.606,90,0.62,96,1.684,98,1.724,99,1.795,100,1.952,101,1.952,102,1.795,103,2.758,104,2.758,108,3.412,114,5.02,119,3.265,120,2.573,121,1.952,122,1.952,125,2.95,224,2.665,226,2.366,229,2.184,272,2.135,273,2.238,277,2.479,503,2.04,504,2.135,530,2.621,531,2.975,532,2.784,746,4.7,1032,4.722,1047,3.872,1058,3.872,1059,4.454,1060,3.872,1061,3.872,1062,4.454,1063,4.454,1064,4.599,1065,4.454]],["title/injectables/PersonsService.html",[161,0.676,746,2.334]],["body/injectables/PersonsService.html",[0,0.081,3,0.064,4,0.064,5,0.055,7,0.172,11,0.855,12,1.584,13,1.187,15,0.622,17,1.547,18,0.014,19,1.18,20,0.753,21,1.492,24,1.387,28,2.148,33,1.584,49,1.625,76,0.073,78,0.006,79,0.006,80,0.004,88,1.376,89,0.499,90,0.33,94,0.817,136,1.137,160,1.63,161,0.634,162,0.817,165,1.584,166,0.73,167,2.89,168,1.482,175,2.034,186,3.233,190,0.848,217,1.32,236,0.882,242,1.994,293,1.869,325,2.704,334,1.192,354,3.767,355,3.682,360,1.63,370,3.139,371,2.741,454,2.732,460,0.956,473,1.786,482,1.711,534,2.913,535,3.735,536,2.483,537,2.913,543,2.913,546,2.483,548,2.913,550,2.324,552,1.137,555,1.086,558,1.137,560,1.32,562,4.551,565,1.482,566,4.056,567,3.767,570,1.705,571,1.705,573,1.705,574,1.705,575,1.705,576,2.483,577,1.584,578,3.063,579,1.584,580,1.584,581,1.584,582,1.584,583,1.705,585,2.674,586,1.705,587,2.674,588,1.705,589,2.674,590,1.705,591,2.674,592,1.705,594,1.705,595,1.705,596,1.705,597,1.705,598,1.396,599,1.705,692,2.61,693,2.743,726,1.584,727,3.898,746,2.188,1025,2.062,1026,3.767,1066,2.062,1067,3.233,1068,2.371,1069,2.371,1070,3.718,1071,3.233,1072,2.371,1073,2.371,1074,2.371,1075,3.233,1076,2.371,1077,2.371,1078,2.371,1079,2.371,1080,2.371,1081,1.858,1082,2.371,1083,2.371,1084,2.371,1085,2.371,1086,2.371,1087,2.371,1088,4.586,1089,2.371,1090,2.371,1091,2.371,1092,2.371]],["title/classes/ProductionDto.html",[0,0.135,1093,2.852]],["body/classes/ProductionDto.html",[0,0.194,2,1.686,3,0.153,4,0.153,5,0.132,7,0.412,8,1.958,15,0.658,18,0.014,19,1.302,20,0.914,76,0.175,78,0.01,79,0.012,80,0.01,88,1.754,94,2.73,1093,4.924,1094,4.325,1095,4.943,1096,5.756,1097,5.685,1098,5.685]],["title/classes/ProductionHouse.html",[0,0.135,696,2.207]],["body/classes/ProductionHouse.html",[0,0.166,2,1.444,3,0.131,4,0.131,5,0.113,7,0.352,8,1.778,15,0.658,18,0.014,19,1.214,20,0.995,76,0.15,78,0.008,79,0.011,80,0.008,86,2.032,88,1.66,89,0.479,132,3.628,166,1.498,413,2.406,454,2.652,457,3.46,458,2.98,459,3.887,460,2.506,462,3.25,468,3.284,469,2.332,470,4.152,471,2.848,472,2.133,473,2.139,475,3.042,476,3.25,555,2.229,696,3.46,720,2.57,722,2.708,1094,4.249,1096,5.367,1099,4.231,1100,4.866,1101,4.866,1102,4.866]],["title/controllers/ProductionHouseController.html",[81,1.266,1103,2.852]],["body/controllers/ProductionHouseController.html",[0,0.13,3,0.102,4,0.102,5,0.088,7,0.275,11,1.213,15,0.66,17,1.617,18,0.014,19,1.159,21,1.56,24,1.523,36,2.538,49,1.638,76,0.117,78,0.006,79,0.009,80,0.006,81,1.214,83,1.26,86,2.038,89,0.547,90,0.529,93,1.91,132,3.573,173,2.007,175,2.111,190,1.887,192,2.935,214,2.115,215,2.115,216,2.007,218,4.057,224,1.36,226,2.125,227,2.007,229,2.252,233,1.822,234,2.115,242,2.114,487,3.296,488,3.792,489,5.123,490,3.792,491,2.376,492,3.296,493,2.977,495,2.977,496,2.977,499,2.977,500,3.792,502,2.376,503,1.741,504,1.822,509,3.296,510,2.733,511,2.376,518,2.977,520,2.733,521,2.977,651,1.741,696,2.115,1036,4.584,1044,3.304,1055,3.304,1094,4.184,1103,3.792,1104,3.304,1105,3.8,1106,3.8,1107,3.8,1108,3.8,1109,5.273,1110,3.8,1111,3.296,1112,3.304,1113,3.8,1114,3.8,1115,3.8,1116,3.8,1117,3.8,1118,3.8,1119,3.8]],["title/modules/ProductionHouseModule.html",[96,1.017,115,2.479]],["body/modules/ProductionHouseModule.html",[0,0.152,3,0.12,4,0.12,5,0.103,18,0.014,76,0.137,78,0.008,79,0.01,80,0.008,83,1.943,89,0.61,90,0.619,96,1.682,98,1.72,99,1.791,100,1.948,101,1.948,102,1.791,103,2.755,104,1.866,108,3.409,115,4.991,119,3.263,120,2.569,121,1.948,122,1.948,125,2.946,132,2.233,220,2.347,224,2.663,226,2.362,229,2.18,272,2.13,273,2.233,275,3.863,277,2.473,503,2.035,504,2.13,530,2.615,531,2.968,532,2.778,651,3.004,1094,2.615,1103,4.716,1111,4.654,1112,3.863,1120,3.863,1121,3.863,1122,4.443,1123,4.443,1124,4.443,1125,4.591,1126,4.443]],["title/injectables/ProductionHouseService.html",[161,0.676,1111,2.479]],["body/injectables/ProductionHouseService.html",[0,0.091,3,0.072,4,0.072,5,0.062,7,0.194,11,0.94,12,1.79,13,1.306,15,0.628,17,1.556,18,0.014,19,1.195,20,0.74,21,1.5,24,1.395,28,2.169,33,1.79,49,1.648,76,0.082,78,0.007,79,0.007,80,0.005,88,1.14,89,0.484,90,0.373,94,0.923,132,3.389,160,1.792,161,0.697,162,0.923,165,1.79,166,0.825,167,3.085,168,1.676,175,2.038,186,3.228,190,0.959,217,1.492,236,0.997,242,2.013,293,2.054,325,2.86,334,1.347,354,3.702,355,3.702,370,3.085,371,2.733,454,1.037,460,1.08,473,1.127,482,1.799,534,3.202,535,3.986,536,2.73,537,3.202,543,3.202,546,2.73,548,3.202,550,2.556,552,1.285,554,1.492,555,1.228,558,1.285,560,1.492,562,2.73,565,1.676,566,3.986,567,3.702,570,1.928,571,1.928,573,1.928,574,1.928,575,1.928,576,2.73,577,1.79,578,3.309,579,1.79,580,1.79,581,1.79,582,1.79,583,1.928,585,2.94,586,1.928,587,2.94,588,1.928,589,2.94,590,1.928,591,2.94,592,1.928,594,1.928,595,1.928,596,1.928,597,1.928,598,1.578,599,1.928,651,1.228,696,3.64,727,2.054,729,2.1,1071,3.554,1093,3.986,1094,3.969,1111,2.556,1127,2.33,1128,2.68,1129,2.68,1130,4.088,1131,2.68,1132,2.68,1133,2.68,1134,2.68,1135,2.68,1136,2.68,1137,2.1,1138,2.68,1139,2.68,1140,2.68,1141,7.166,1142,2.68,1143,2.68,1144,2.68,1145,4.088,1146,2.68,1147,2.68,1148,2.68,1149,2.68]],["title/classes/Profile.html",[0,0.135,395,2.094]],["body/classes/Profile.html",[0,0.151,2,1.309,3,0.119,4,0.119,5,0.102,7,0.319,8,1.668,15,0.695,18,0.014,20,1.039,76,0.136,78,0.008,79,0.01,80,0.008,86,2.145,88,1.709,89,0.449,166,1.358,208,2.457,335,2.456,395,3.081,413,2.258,454,2.53,457,3.638,458,3.333,459,4.645,460,2.994,463,2.932,464,2.932,468,3.466,469,2.115,471,2.672,472,1.934,475,4.086,479,3.285,482,1.668,614,5.12,615,5.12,710,2.597,712,2.947,720,3.081,722,3.247,733,2.597,1150,3.836,1151,6.536,1152,4.412,1153,4.412,1154,4.412,1155,4.412,1156,4.412]],["title/controllers/ProfileController.html",[81,1.266,1157,2.852]],["body/controllers/ProfileController.html",[0,0.128,3,0.101,4,0.101,5,0.15,7,0.271,11,1.199,15,0.624,17,1.606,18,0.014,19,1.151,21,1.549,24,1.44,28,1.99,49,1.549,76,0.115,78,0.006,79,0.009,80,0.006,81,1.195,83,1.24,86,1.926,89,0.544,90,0.521,93,1.88,173,1.976,175,2.065,190,2.531,192,2.902,208,1.665,214,2.902,215,2.082,216,1.976,218,3.341,224,1.338,226,1.507,242,2.177,335,2.082,395,1.976,503,1.713,515,2.498,761,5.646,792,5.219,794,4.534,795,4.534,796,3.252,797,3.252,798,2.498,799,2.498,800,3.26,801,3.26,832,3.252,833,3.252,834,3.252,835,4.534,836,3.252,840,4.534,842,4.534,843,3.252,844,3.252,1157,3.75,1158,3.252,1159,3.74,1160,5.215,1161,4.534,1162,4.534,1163,3.74,1164,2.93,1165,3.74,1166,3.74,1167,3.74,1168,3.74,1169,3.74,1170,3.74,1171,3.74,1172,3.74,1173,3.26,1174,3.252,1175,3.74,1176,3.74,1177,3.74,1178,3.74,1179,3.74,1180,3.252,1181,3.74,1182,3.74,1183,3.74,1184,3.74,1185,3.74,1186,3.252,1187,3.74,1188,3.74,1189,3.74,1190,3.74]],["title/modules/ProfileModule.html",[96,1.017,116,2.648]],["body/modules/ProfileModule.html",[0,0.164,3,0.129,4,0.129,5,0.111,18,0.014,76,0.147,78,0.008,79,0.011,80,0.008,83,2.041,89,0.595,90,0.667,96,1.744,98,1.855,99,1.931,100,2.101,101,2.101,102,1.931,103,2.857,104,2.013,108,3.48,116,5.324,119,3.331,120,2.699,121,2.101,122,2.101,125,3.094,277,2.667,530,2.821,798,3.201,799,3.201,921,4.166,922,4.166,923,4.166,1157,4.892,1173,4.75,1174,4.166,1180,4.166,1191,4.166,1192,4.166,1193,4.792,1194,4.792,1195,4.823,1196,4.792,1197,4.792]],["title/injectables/ProfileService.html",[161,0.676,1173,2.479]],["body/injectables/ProfileService.html",[0,0.127,3,0.101,4,0.101,5,0.139,7,0.27,11,1.198,13,1.663,15,0.623,17,1.605,18,0.014,19,1.209,21,1.548,24,1.33,28,2.405,49,1.548,76,0.184,78,0.006,79,0.009,80,0.006,89,0.499,90,0.52,150,2.924,160,1.636,161,0.888,162,1.285,175,2.024,190,2.146,208,1.915,236,1.389,242,1.846,325,3.388,395,3.733,431,4.079,460,1.504,479,2.617,515,2.493,552,1.789,554,2.078,558,1.789,614,2.924,615,2.924,619,4.527,800,2.334,801,2.334,953,3.246,961,2.924,1005,4.079,1006,2.924,1008,2.924,1010,4.079,1011,2.924,1015,2.924,1016,2.924,1017,2.924,1161,4.527,1162,4.527,1173,3.255,1186,3.246,1198,2.924,1199,5.207,1200,3.733,1201,3.733,1202,5.207,1203,5.207,1204,3.733,1205,5.207,1206,3.733,1207,5.207,1208,3.733,1209,2.924,1210,3.733,1211,3.733,1212,3.733,1213,3.733,1214,5.207,1215,3.733,1216,5.207,1217,3.733,1218,3.733,1219,3.246,1220,3.246,1221,3.246,1222,3.246]],["title/classes/Rate.html",[0,0.135,698,2.094]],["body/classes/Rate.html",[0,0.15,2,1.306,3,0.119,4,0.119,5,0.102,7,0.319,8,1.666,15,0.694,18,0.014,20,1.026,76,0.135,78,0.008,79,0.01,80,0.008,86,2.144,89,0.502,166,1.355,208,2.456,335,2.45,413,2.254,454,2.527,457,2.45,458,3.129,463,3.492,464,3.492,468,3.33,469,2.11,471,2.668,472,1.93,473,2.12,479,3.281,482,2.123,555,2.016,698,3.817,710,3.428,720,3.448,722,3.633,725,5.114,733,3.842,737,3.129,1223,3.827,1224,4.402,1225,5.064,1226,4.402,1227,4.402,1228,4.402,1229,4.402]],["title/controllers/RateingController.html",[81,1.266,1230,2.852]],["body/controllers/RateingController.html",[0,0.147,3,0.116,4,0.116,5,0.1,7,0.312,11,1.321,15,0.621,17,1.598,18,0.014,19,1.145,21,1.541,24,1.433,49,1.541,76,0.133,78,0.007,79,0.01,80,0.007,81,1.377,83,1.43,86,1.917,89,0.568,90,0.6,93,2.167,173,2.277,175,2.061,190,2.056,192,3.596,214,3.198,215,2.4,216,2.277,218,3.995,224,1.543,226,2.315,227,2.277,229,2.404,233,2.067,234,2.4,242,1.988,487,3.592,491,2.695,492,3.592,502,2.695,503,1.975,504,2.067,509,3.592,511,2.695,1164,3.378,1230,4.132,1231,3.749,1232,4.312,1233,4.995,1234,4.995,1235,4.312,1236,3.749,1237,3.749,1238,4.312,1239,3.749,1240,3.749,1241,4.312,1242,3.592,1243,3.749,1244,4.312,1245,4.312,1246,4.312,1247,3.749,1248,3.749,1249,4.312,1250,3.749,1251,3.749,1252,4.312]],["title/modules/RateingModule.html",[96,1.017,117,2.648]],["body/modules/RateingModule.html",[0,0.146,3,0.115,4,0.115,5,0.099,18,0.014,76,0.131,78,0.007,79,0.01,80,0.007,83,1.89,89,0.611,90,0.594,96,1.648,98,1.65,99,1.718,100,1.869,101,1.869,102,1.718,103,2.699,104,1.791,108,3.37,113,4.33,117,5.358,119,3.225,120,2.499,121,1.869,122,1.869,125,2.866,224,2.632,226,2.298,229,2.121,231,2.373,232,1.953,272,2.043,273,2.143,277,2.373,280,3.066,285,3.066,286,3.066,287,2.847,288,3.066,289,3.066,290,3.066,503,1.953,504,2.043,530,2.509,531,2.847,532,2.665,1230,4.62,1242,4.599,1243,3.706,1253,3.706,1254,3.706,1255,4.263,1256,4.263,1257,4.263,1258,4.467,1259,4.263,1260,3.706]],["title/injectables/RatingService.html",[161,0.676,1242,2.479]],["body/injectables/RatingService.html",[0,0.139,3,0.109,4,0.109,5,0.094,7,0.294,11,1.269,13,1.763,15,0.646,17,1.663,18,0.014,19,1.192,20,0.897,21,1.604,24,1.39,28,2.078,70,2.713,76,0.125,78,0.007,79,0.009,80,0.007,89,0.581,90,0.566,94,1.399,161,0.941,162,1.399,166,1.25,175,1.973,190,1.453,208,1.297,231,4.037,232,1.86,236,2.332,334,2.041,335,2.261,346,2.145,473,1.12,479,2.774,482,1.923,552,1.947,554,2.261,555,1.86,558,1.947,698,3.552,737,2.645,802,3.743,813,4.911,954,3.182,1242,3.45,1261,3.531,1262,5.519,1263,5.519,1264,5.519,1265,3.531,1266,6.268,1267,4.062,1268,5.519,1269,4.062,1270,4.062,1271,4.062,1272,4.062,1273,4.062,1274,3.182,1275,3.531,1276,4.062,1277,4.062,1278,4.062,1279,3.531,1280,3.531,1281,3.531,1282,3.531,1283,3.531,1284,3.531,1285,3.531,1286,3.531,1287,3.531,1288,6.268,1289,3.531]],["title/classes/Review.html",[0,0.135,699,2.207]],["body/classes/Review.html",[0,0.15,2,1.306,3,0.119,4,0.119,5,0.102,7,0.319,8,1.666,15,0.694,18,0.014,20,1.026,76,0.135,78,0.008,79,0.01,80,0.008,86,2.144,88,1.34,89,0.502,166,1.355,208,2.456,335,2.45,413,2.254,454,2.527,457,2.45,458,3.129,463,3.492,464,3.492,468,3.33,469,2.11,471,2.668,472,1.93,473,2.12,476,2.94,479,3.281,482,1.987,555,2.016,699,4.022,710,3.428,720,3.448,722,3.633,725,5.114,733,3.428,737,3.129,1225,5.064,1290,3.827,1291,4.402,1292,4.402,1293,4.402,1294,4.402,1295,4.402]],["title/controllers/ReviewController.html",[81,1.266,1296,2.852]],["body/controllers/ReviewController.html",[0,0.147,3,0.116,4,0.116,5,0.1,7,0.312,11,1.321,15,0.621,17,1.598,18,0.014,19,1.145,21,1.541,24,1.433,49,1.541,76,0.133,78,0.007,79,0.01,80,0.007,81,1.377,83,1.43,86,1.917,89,0.568,90,0.6,93,2.167,173,2.277,175,2.061,190,2.056,192,3.596,214,3.198,215,2.4,216,2.277,218,3.995,224,1.543,226,2.315,227,2.277,229,2.404,233,2.067,234,2.4,242,1.988,487,3.592,491,2.695,492,3.592,502,2.695,503,1.975,504,2.067,509,3.592,511,2.695,699,2.4,1164,3.378,1233,4.995,1234,4.995,1236,3.749,1237,3.749,1239,3.749,1240,3.749,1247,3.749,1248,3.749,1250,3.749,1251,3.749,1296,4.132,1297,3.749,1298,4.312,1299,4.312,1300,4.312,1301,3.592,1302,3.749,1303,4.312,1304,4.312,1305,4.312,1306,4.312,1307,4.312]],["title/modules/ReviewModule.html",[96,1.017,118,2.648]],["body/modules/ReviewModule.html",[0,0.162,3,0.128,4,0.128,5,0.11,18,0.014,76,0.146,78,0.008,79,0.01,80,0.008,83,2.028,89,0.593,90,0.661,96,1.736,98,1.836,99,1.912,100,2.08,101,2.08,102,1.912,103,2.844,104,1.993,108,3.471,118,5.315,119,3.322,120,2.681,121,2.08,122,2.08,125,3.074,232,2.173,277,2.641,280,3.412,285,3.412,286,3.412,287,3.168,288,3.412,289,3.412,290,3.412,530,2.792,1296,4.868,1301,4.738,1302,4.125,1308,4.125,1309,4.744,1310,4.125,1311,4.744,1312,4.744,1313,4.792,1314,4.744]],["title/injectables/ReviewService.html",[161,0.676,1301,2.479]],["body/injectables/ReviewService.html",[0,0.131,3,0.103,4,0.103,5,0.089,7,0.278,11,1.221,13,1.696,15,0.631,17,1.624,18,0.014,19,1.164,20,0.876,21,1.566,24,1.35,28,2.018,49,1.266,70,2.564,76,0.118,78,0.007,79,0.009,80,0.007,89,0.549,90,0.535,94,1.322,161,0.905,162,1.322,175,2.011,190,1.374,208,1.944,231,3.969,232,1.758,236,1.975,242,1.634,335,2.137,346,2.028,454,2.542,473,1.679,479,3.059,482,2.039,552,1.84,554,2.137,555,1.758,558,1.84,560,2.137,562,3.546,698,2.028,699,3.655,737,2.918,1265,3.338,1279,3.338,1280,3.338,1281,3.338,1282,3.338,1283,3.338,1284,3.338,1285,3.338,1286,3.338,1287,3.338,1301,3.319,1315,3.338,1316,5.31,1317,5.31,1318,5.31,1319,6.087,1320,3.839,1321,5.31,1322,3.839,1323,5.31,1324,3.839,1325,5.31,1326,3.839,1327,3.008,1328,3.839,1329,3.839,1330,3.839,1331,3.839,1332,5.31]],["title/guards/RolesGuard.html",[229,1.475,1333,3.106]],["body/guards/RolesGuard.html",[0,0.145,3,0.114,4,0.114,5,0.098,7,0.307,11,1.305,13,1.813,15,0.545,17,1.404,18,0.014,19,1.006,20,0.757,21,1.354,24,0.939,28,2.123,49,1.527,76,0.13,78,0.007,79,0.01,80,0.007,88,1.305,89,0.527,90,0.59,160,2.488,161,0.968,186,2.933,208,1.813,216,2.236,217,2.357,226,1.707,229,2.112,236,2.112,282,3.317,300,3.438,302,4.276,334,2.128,403,3.045,410,3.317,460,1.707,659,4.003,661,3.045,966,3.681,1334,5.016,1335,7.133,1336,4.234,1337,7.343,1338,4.234,1339,4.234,1340,6.841,1341,4.234,1342,5.676,1343,5.947,1344,3.681,1345,3.681,1346,4.234,1347,5.567,1348,4.234,1349,4.234,1350,4.234,1351,4.234,1352,3.681,1353,3.681,1354,3.317,1355,4.935,1356,6.403,1357,4.234]],["title/classes/SocialUserDto.html",[0,0.135,411,2.479]],["body/classes/SocialUserDto.html",[0,0.189,2,1.642,3,0.149,4,0.149,5,0.128,7,0.401,8,1.927,15,0.726,18,0.014,19,1.287,20,1.009,76,0.17,78,0.009,79,0.012,80,0.009,88,1.851,341,4.275,342,5.224,360,3.184,411,4.212,1358,4.813,1359,5.535,1360,5.535,1361,5.535,1362,5.535]],["title/classes/User.html",[0,0.135,208,1.266]],["body/classes/User.html",[0,0.095,2,0.828,3,0.075,4,0.075,5,0.065,7,0.202,8,1.206,11,0.969,15,0.726,17,0.69,18,0.014,19,1.003,20,1.06,21,0.666,24,0.619,76,0.086,78,0.005,79,0.007,80,0.005,86,2.242,88,1.751,89,0.51,148,3.979,160,2.481,166,0.859,208,2.118,233,2.712,234,1.554,321,2.683,340,4.416,341,2.989,342,3.653,343,3.979,344,4.416,360,2.226,395,3.606,400,2.427,413,1.631,454,1.966,457,3.964,458,3.515,459,3.538,460,2.281,462,2.815,463,3.432,464,3.432,466,3.031,468,3.468,469,1.338,470,3.392,471,1.931,472,1.223,473,1.829,475,3.994,482,1.206,555,1.278,659,2.635,698,3.503,699,3.692,701,5.554,724,3.979,730,2.427,731,2.427,734,2.427,1363,2.427,1364,4.416,1365,4.215,1366,2.791,1367,2.791,1368,2.791,1369,2.791,1370,5.659,1371,5.079,1372,2.791,1373,4.215,1374,2.791,1375,2.791,1376,2.791,1377,2.791,1378,2.791,1379,2.791,1380,2.791,1381,2.791,1382,2.791,1383,4.215,1384,2.791,1385,2.791,1386,2.791,1387,2.791,1388,4.215,1389,4.215,1390,2.791,1391,2.791,1392,2.791,1393,4.215,1394,2.791,1395,2.791,1396,2.791,1397,2.791,1398,2.791,1399,2.791]],["title/classes/UserDto.html",[0,0.135,205,2.207]],["body/classes/UserDto.html",[0,0.152,2,1.321,3,0.12,4,0.12,5,0.103,7,0.322,8,1.679,13,1.422,15,0.73,18,0.014,19,1.285,20,1.013,76,0.137,78,0.008,79,0.01,80,0.008,88,1.895,205,3.267,233,3.477,321,3.831,341,4.269,342,5.217,360,3.18,1364,6.307,1400,3.872,1401,4.454,1402,4.454,1403,4.454,1404,4.454,1405,4.454,1406,4.454,1407,4.454,1408,4.454,1409,4.454,1410,4.454,1411,4.454,1412,4.454,1413,4.454,1414,4.454]],["title/modules/UsersModule.html",[96,1.017,119,1.738]],["body/modules/UsersModule.html",[0,0.165,3,0.13,4,0.13,5,0.112,18,0.014,76,0.149,78,0.008,79,0.011,80,0.008,89,0.586,90,0.674,96,1.753,98,1.874,99,1.951,100,2.122,101,2.122,102,1.951,103,2.871,104,2.871,113,2.85,119,3.472,120,2.716,121,2.122,122,2.122,125,2.433,232,2.217,272,3.652,280,3.482,285,3.482,286,3.482,287,3.233,288,3.482,289,3.482,290,3.482,300,4.062,532,3.027,1260,4.209,1415,4.209,1416,4.209,1417,4.209,1418,4.841,1419,4.841,1420,4.855,1421,4.841]],["title/injectables/UsersService.html",[161,0.676,300,1.993]],["body/injectables/UsersService.html",[0,0.071,3,0.056,4,0.056,5,0.048,7,0.151,11,0.771,13,1.071,15,0.63,17,1.579,18,0.014,19,1.131,20,0.825,21,1.523,24,1.416,28,2.173,49,1.563,76,0.064,78,0.004,79,0.006,80,0.004,88,1.468,89,0.534,90,0.29,94,1.154,161,0.571,162,0.717,166,0.641,167,1.866,175,2.058,186,2.723,190,0.745,205,3.309,208,2.139,217,1.159,231,3.309,232,0.953,236,1.566,242,2.236,293,1.685,297,2.915,300,1.685,325,2.017,333,2.915,334,1.046,339,3.659,341,1.973,343,1.631,346,1.771,355,1.973,360,1.845,363,2.915,368,1.81,370,1.866,371,2.21,384,3.027,411,3.017,433,3.659,435,3.297,438,2.626,460,1.351,482,1.617,536,2.239,546,2.239,550,2.096,552,0.998,558,0.998,567,1.39,576,1.39,577,1.39,578,2.811,579,1.39,580,1.39,581,1.39,582,1.39,802,1.866,813,1.631,952,1.81,954,1.631,994,1.81,1067,2.915,1075,1.81,1275,1.81,1289,1.81,1344,1.81,1353,1.81,1422,1.81,1423,3.352,1424,4.825,1425,3.352,1426,3.352,1427,2.082,1428,2.082,1429,3.352,1430,3.352,1431,2.082,1432,3.352,1433,3.352,1434,2.082,1435,2.082,1436,3.352,1437,2.082,1438,3.352,1439,2.082,1440,2.082,1441,2.082,1442,2.082,1443,3.352,1444,5.29,1445,2.082,1446,2.082,1447,2.082,1448,1.631,1449,2.082,1450,1.631,1451,2.082,1452,3.352,1453,2.082,1454,2.082,1455,2.082,1456,2.082,1457,2.082,1458,2.082,1459,2.082,1460,2.082,1461,2.082,1462,2.082,1463,2.082,1464,2.082,1465,2.082,1466,3.352,1467,2.082,1468,2.082,1469,2.082,1470,2.082,1471,3.352,1472,3.352,1473,2.082,1474,2.082,1475,4.209,1476,3.352,1477,4.209,1478,3.352,1479,3.352,1480,2.082,1481,4.825,1482,4.209,1483,2.082,1484,6.383,1485,4.209,1486,2.082,1487,2.082,1488,4.825,1489,4.209,1490,4.209,1491,2.082,1492,2.082,1493,4.209,1494,4.825,1495,2.082,1496,2.082,1497,4.209,1498,2.082,1499,4.209,1500,2.082,1501,3.352,1502,3.352,1503,3.352,1504,3.352,1505,3.352,1506,2.082,1507,2.082,1508,3.352]],["title/classes/actorMovieDTO.html",[0,0.135,750,2.852]],["body/classes/actorMovieDTO.html",[0,0.196,2,1.702,3,0.155,4,0.155,5,0.133,7,0.415,8,1.969,15,0.662,18,0.014,20,0.919,76,0.176,78,0.01,79,0.012,80,0.01,237,4.966,482,2.188,736,5.779,737,3.536,750,4.951,1509,4.988,1510,5.737,1511,5.737]],["title/coverage.html",[1512,4.253]],["body/coverage.html",[0,0.259,1,1.573,5,0.051,6,1.902,18,0.014,20,0.292,78,0.004,79,0.006,80,0.004,81,2.125,82,1.573,84,1.902,91,1.368,102,0.882,124,1.573,132,2.495,136,2.085,139,1.368,161,1.261,163,1.902,166,1.074,171,1.573,172,1.902,205,1.218,208,0.699,221,1.288,224,0.783,227,1.155,229,0.814,270,1.461,271,1.461,272,1.049,273,1.099,291,1.902,300,1.099,371,1.002,387,1.714,389,1.902,395,1.155,403,2.509,411,1.368,444,1.573,445,1.902,452,1.288,453,1.902,456,1.155,471,1.002,473,0.603,477,1.461,478,1.902,484,1.573,485,1.902,506,1.368,528,1.714,533,1.902,553,1.714,565,5.211,600,1.902,620,1.902,646,2.33,647,1.461,649,2.733,650,1.461,651,1.002,652,1.461,653,1.573,660,1.902,661,3.129,663,1.902,679,1.902,689,1.902,692,1.099,693,1.155,696,1.218,698,1.155,699,1.218,727,1.099,735,1.902,743,1.368,744,1.902,746,1.288,748,1.573,750,1.573,752,1.714,757,1.573,758,1.902,800,2.181,801,2.181,802,1.218,804,1.461,845,3.165,846,1.902,855,1.368,857,1.573,860,1.902,863,1.573,865,1.714,868,1.902,884,1.902,894,1.368,896,1.573,898,1.902,902,1.573,904,1.714,915,1.714,924,3.409,951,1.714,1018,1.902,1026,1.461,1027,1.902,1032,1.573,1033,1.902,1064,1.714,1066,1.902,1081,1.714,1093,1.573,1094,3.192,1095,1.902,1099,1.902,1103,1.573,1104,1.902,1111,1.368,1125,1.714,1127,1.902,1137,1.714,1150,1.902,1157,1.573,1158,1.902,1173,1.368,1195,1.714,1198,3.409,1209,1.714,1223,1.902,1230,1.573,1231,1.902,1242,1.368,1258,1.714,1261,1.902,1274,1.714,1290,1.902,1296,1.573,1297,1.902,1301,1.368,1313,1.714,1315,1.902,1327,1.714,1333,1.714,1334,2.733,1354,1.714,1358,1.902,1363,1.902,1400,1.902,1420,1.714,1422,1.902,1448,1.714,1450,1.714,1509,1.902,1512,1.714,1513,2.188,1514,2.188,1515,2.188,1516,4.351,1517,6.258,1518,7.941,1519,7.99,1520,1.902,1521,1.902,1522,3.033,1523,6.297,1524,4.965,1525,6.794,1526,1.902,1527,2.188,1528,1.902,1529,1.902,1530,6.794,1531,4.351,1532,1.902,1533,1.902,1534,1.902,1535,1.902,1536,1.902,1537,2.188,1538,3.488,1539,2.188,1540,1.902,1541,2.188,1542,5.424,1543,1.902,1544,1.902,1545,1.902,1546,1.902,1547,1.902,1548,2.188,1549,1.902,1550,1.902,1551,2.188]],["title/dependencies.html",[99,1.924,1552,3.303]],["body/dependencies.html",[18,0.014,78,0.008,79,0.01,80,0.008,90,0.641,99,1.856,127,4.004,147,4.004,148,3.608,152,3.608,166,2.176,167,2.563,168,2.879,220,2.432,232,2.109,282,3.608,317,3.608,337,4.004,346,2.432,406,5.021,407,5.802,451,3.312,472,2.019,606,4.004,607,4.004,668,4.004,684,4.004,798,3.076,799,4.007,1345,4.004,1553,4.606,1554,4.606,1555,4.606,1556,6.674,1557,4.606,1558,4.606,1559,4.606,1560,4.606,1561,4.606,1562,4.606,1563,4.606,1564,4.606,1565,4.606,1566,6,1567,4.606,1568,4.606,1569,4.606,1570,4.606,1571,4.606,1572,4.606,1573,4.606,1574,4.606,1575,4.606,1576,6,1577,4.606,1578,4.606,1579,6,1580,4.606,1581,4.606,1582,4.606,1583,4.606,1584,4.606,1585,4.606,1586,4.606,1587,4.606,1588,4.606,1589,4.606,1590,4.606,1591,4.606,1592,4.606,1593,4.606,1594,4.606,1595,4.606,1596,4.606]],["title/classes/directorMovieDTO.html",[0,0.135,863,2.852]],["body/classes/directorMovieDTO.html",[0,0.194,2,1.686,3,0.153,4,0.153,5,0.132,7,0.412,8,1.958,15,0.658,18,0.014,20,0.914,76,0.175,78,0.01,79,0.012,80,0.01,237,4.956,482,2.181,737,3.522,845,3.693,847,5.756,863,4.924,1532,4.943,1597,5.685,1598,5.685]],["title/miscellaneous/enumerations.html",[1599,2.065,1600,4.15]],["body/miscellaneous/enumerations.html",[7,0.447,18,0.013,78,0.011,79,0.012,80,0.011,208,2.295,233,3.444,1599,3.855,1600,5.362,1601,6.167,1602,6.167,1603,6.247,1604,7.185]],["title/miscellaneous/functions.html",[1599,2.065,1605,4.15]],["body/miscellaneous/functions.html",[7,0.427,17,1.459,18,0.014,19,1.045,21,1.407,24,1.308,78,0.01,79,0.012,80,0.01,102,3.008,186,2.701,659,3.687,661,5.034,1334,4.62,1343,5.128,1347,5.128,1352,5.128,1354,5.483,1355,6.085,1526,5.128,1599,3.687,1605,5.128,1606,5.898,1607,5.898]],["title/classes/genreMovieDTO.html",[0,0.135,902,2.852]],["body/classes/genreMovieDTO.html",[0,0.194,2,1.686,3,0.153,4,0.153,5,0.132,7,0.412,8,1.958,15,0.658,18,0.014,20,0.914,76,0.175,78,0.01,79,0.012,80,0.01,237,4.956,482,2.181,737,3.522,845,3.693,885,5.756,902,4.924,1534,4.943,1608,5.685,1609,5.685]],["title/index.html",[7,0.239,1610,3.303,1611,3.303]],["body/index.html",[4,0.133,18,0.014,78,0.008,79,0.011,80,0.008,149,4.286,455,3.082,472,2.161,650,3.292,651,2.258,652,4.187,1512,3.862,1612,4.93,1613,4.93,1614,6.269,1615,4.93,1616,4.93,1617,4.93,1618,4.93,1619,4.93,1620,4.93,1621,6.893,1622,4.93,1623,4.93,1624,4.93,1625,7.778,1626,4.93,1627,4.93,1628,7.655,1629,4.93,1630,4.93,1631,6.269,1632,4.93,1633,4.93,1634,4.93,1635,6.269,1636,4.93,1637,4.93,1638,4.93,1639,6.269,1640,6.269,1641,4.93,1642,4.93,1643,4.93,1644,4.93,1645,4.93,1646,4.286,1647,4.93,1648,4.93,1649,4.93,1650,4.93,1651,4.93,1652,4.93,1653,4.93,1654,4.93,1655,4.93,1656,4.93,1657,4.93,1658,4.93,1659,4.93,1660,4.93,1661,4.93,1662,4.93,1663,4.93]],["title/modules.html",[98,2.101]],["body/modules.html",[18,0.011,78,0.009,79,0.011,80,0.009,97,3.814,98,2.052,108,2.429,109,3.542,110,3.315,111,3.315,112,3.315,113,3.121,114,3.315,115,3.315,116,3.542,117,3.542,118,3.542,119,2.324,1646,7.113,1664,8.182,1665,8.182,1666,8.213,1667,5.303,1668,4.61]],["title/overview.html",[1669,4.72]],["body/overview.html",[2,0.827,18,0.014,70,1.861,78,0.005,79,0.007,80,0.005,83,0.924,91,3.172,96,0.715,97,5.76,98,1.079,99,1.123,100,1.222,101,1.222,102,1.123,103,1.171,104,1.171,105,2.423,106,2.423,107,2.423,108,3.649,109,3.389,110,4.583,111,4.144,112,4.144,113,4.675,114,4.636,115,4.583,116,4.666,117,4.953,118,4.666,119,3.337,120,1.846,121,1.222,122,1.222,162,0.96,221,2.987,224,2.623,229,2.104,266,2.423,267,2.423,268,2.423,270,3.389,271,3.389,272,2.71,273,2.55,300,3.332,384,2.004,506,3.172,523,2.423,524,2.423,648,2.183,743,3.172,746,3.902,802,3.69,852,2.423,853,2.423,854,2.423,855,4.144,891,2.423,892,2.423,893,2.423,894,4.144,909,2.423,910,2.423,912,2.423,1058,2.423,1060,2.423,1061,2.423,1111,3.172,1120,2.423,1121,2.423,1173,3.172,1191,2.423,1192,2.423,1242,3.172,1253,2.423,1254,2.423,1301,3.172,1308,2.423,1310,2.423,1333,2.183,1415,2.423,1416,2.423,1417,2.423,1669,2.423,1670,2.787,1671,2.787,1672,2.787,1673,2.787]],["title/miscellaneous/variables.html",[1599,2.065,1674,4.15]],["body/miscellaneous/variables.html",[3,0.049,5,0.103,7,0.132,15,0.175,18,0.014,19,0.534,20,1.014,28,1.865,49,0.917,77,6.112,78,0.003,79,0.005,80,0.003,88,1.625,132,0.918,136,0.875,160,1.686,166,1.809,169,3.013,170,2.361,174,1.588,175,1.187,190,1.597,208,1.698,213,2.012,227,2.358,233,0.875,242,1.184,293,0.918,318,1.588,321,2.358,325,1.444,328,1.588,330,2.569,334,0.918,346,2.032,360,1.321,366,1.588,371,1.38,387,2.361,395,1.592,403,1.313,452,1.774,456,1.592,460,1.991,473,1.061,528,2.361,553,3.497,598,1.075,605,4.294,632,1.588,647,1.22,650,3.299,651,2.262,652,3.299,654,3.013,655,3.497,656,3.013,657,3.013,692,1.514,693,1.592,696,1.677,698,1.592,699,1.677,727,1.514,748,2.167,752,3.497,771,1.588,800,2.791,801,2.791,845,1.514,857,2.167,865,3.497,896,2.167,904,3.497,915,2.361,924,1.431,951,3.497,961,1.431,962,1.588,986,1.588,1005,3.869,1006,2.361,1007,1.588,1008,2.361,1009,1.588,1010,3.497,1011,2.361,1012,1.588,1013,1.588,1014,1.588,1015,2.361,1016,2.361,1017,2.361,1064,2.361,1081,3.497,1094,1.075,1096,1.431,1125,2.361,1137,3.497,1195,2.361,1198,1.431,1209,3.497,1219,1.588,1220,1.588,1221,1.588,1222,1.588,1258,2.361,1274,3.497,1313,2.361,1327,3.497,1420,2.361,1448,3.497,1450,2.361,1517,1.588,1520,1.588,1521,2.62,1522,1.588,1528,1.588,1529,1.588,1533,2.62,1535,1.588,1536,1.588,1540,1.588,1543,1.588,1544,2.62,1545,1.588,1546,1.588,1547,1.588,1549,1.588,1550,1.588,1599,1.142,1603,6.746,1668,1.588,1674,1.588,1675,1.826,1676,3.013,1677,6.899,1678,3.013,1679,3.013,1680,1.826,1681,1.826,1682,1.826,1683,1.826,1684,1.826,1685,1.826,1686,1.826,1687,1.826,1688,1.826,1689,1.826,1690,1.826,1691,1.826,1692,1.826,1693,3.847,1694,3.847,1695,1.826,1696,3.847,1697,3.013,1698,3.847,1699,1.826,1700,1.826,1701,6.573,1702,1.826,1703,3.013,1704,1.826,1705,1.826,1706,3.847,1707,3.013,1708,3.847,1709,1.826,1710,1.826,1711,1.826,1712,1.826,1713,1.826,1714,6.435,1715,1.826,1716,1.826,1717,3.013,1718,3.013,1719,1.826,1720,1.826,1721,3.013,1722,1.826,1723,1.826,1724,1.826,1725,1.826,1726,1.826,1727,1.826,1728,1.826,1729,3.013,1730,3.847,1731,1.826,1732,1.826,1733,1.826,1734,1.826,1735,1.826,1736,1.826,1737,1.826,1738,1.826,1739,3.013,1740,3.013,1741,1.826,1742,3.013,1743,1.826,1744,3.013,1745,3.013,1746,1.826,1747,3.013,1748,1.826,1749,1.826,1750,1.826,1751,1.826,1752,3.013,1753,1.826,1754,1.826]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/APIFeatures.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/FacebookStrategy.html":{},"classes/FileUploadDto.html":{},"classes/Genre.html":{},"classes/GenreDto.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"injectables/MovieActorService.html":{},"controllers/MovieController.html":{},"classes/MovieDirector.html":{},"modules/MovieDirectorModule.html":{},"injectables/MovieDirectorService.html":{},"classes/MovieDto.html":{},"classes/MovieGenre.html":{},"modules/MovieGenresModule.html":{},"injectables/MovieGenresService.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"classes/PersonDto.html":{},"controllers/PersonsController.html":{},"modules/PersonsModule.html":{},"injectables/PersonsService.html":{},"classes/ProductionDto.html":{},"classes/ProductionHouse.html":{},"controllers/ProductionHouseController.html":{},"modules/ProductionHouseModule.html":{},"injectables/ProductionHouseService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/Rate.html":{},"controllers/RateingController.html":{},"modules/RateingModule.html":{},"injectables/RatingService.html":{},"classes/Review.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"classes/SocialUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/actorMovieDTO.html":{},"coverage.html":{},"dependencies.html":{},"classes/directorMovieDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/genreMovieDTO.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":565,"title":{},"body":{"injectables/GenresService.html":{},"classes/Movie.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":1585,"title":{},"body":{"dependencies.html":{}}}],["0.11.0",{"_index":1592,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1561,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1574,"title":{},"body":{"dependencies.html":{}}}],["0.6.3",{"_index":1557,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1519,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1539,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1538,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1527,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1548,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":1537,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1516,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1525,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1523,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1530,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1542,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1541,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1531,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1524,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":70,"title":{},"body":{"classes/APIFeatures.html":{},"injectables/MovieService.html":{},"injectables/RatingService.html":{},"injectables/ReviewService.html":{},"overview.html":{}}}],["1.0.0",{"_index":1578,"title":{},"body":{"dependencies.html":{}}}],["1.6.0",{"_index":1555,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["100",{"_index":73,"title":{},"body":{"classes/APIFeatures.html":{}}}],["1000",{"_index":1490,"title":{},"body":{"injectables/UsersService.html":{}}}],["13",{"_index":1670,"title":{},"body":{"overview.html":{}}}],["18",{"_index":1671,"title":{},"body":{"overview.html":{}}}],["2",{"_index":1673,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":1577,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":1593,"title":{},"body":{"dependencies.html":{}}}],["2.1.10",{"_index":1568,"title":{},"body":{"dependencies.html":{}}}],["2.1.4",{"_index":1562,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":1582,"title":{},"body":{"dependencies.html":{}}}],["22",{"_index":1672,"title":{},"body":{"overview.html":{}}}],["2525",{"_index":1724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2c6995c49c5d2c",{"_index":1728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.0.0",{"_index":1575,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1587,"title":{},"body":{"dependencies.html":{}}}],["33u2fo7v993c778rqkbddns83uqu5n2l.apps.googleusercontent.com",{"_index":609,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["4.0.0",{"_index":1576,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":1596,"title":{},"body":{"dependencies.html":{}}}],["4.8.0",{"_index":1563,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":1471,"title":{},"body":{"injectables/UsersService.html":{}}}],["465",{"_index":1726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["486603679224",{"_index":608,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["5",{"_index":1289,"title":{},"body":{"injectables/RatingService.html":{},"injectables/UsersService.html":{}}}],["5.0.1",{"_index":1569,"title":{},"body":{"dependencies.html":{}}}],["6.2.0",{"_index":1591,"title":{},"body":{"dependencies.html":{}}}],["6.5.0",{"_index":1573,"title":{},"body":{"dependencies.html":{}}}],["6.6.2",{"_index":1589,"title":{},"body":{"dependencies.html":{}}}],["6.6.6",{"_index":1588,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1489,"title":{},"body":{"injectables/UsersService.html":{}}}],["7.1.2",{"_index":1564,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":1559,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1558,"title":{},"body":{"dependencies.html":{}}}],["7.6.15",{"_index":1556,"title":{},"body":{"dependencies.html":{}}}],["8.2.0",{"_index":1570,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":1566,"title":{},"body":{"dependencies.html":{}}}],["8.6.0",{"_index":1580,"title":{},"body":{"dependencies.html":{}}}],["8f9e6b1e27b35e",{"_index":1731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["__v",{"_index":67,"title":{},"body":{"classes/APIFeatures.html":{}}}],["accesstoken",{"_index":402,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["account",{"_index":1750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accountid",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/SocialUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{}}}],["accountwith",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{},"classes/SocialUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{}}}],["active",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{}}}],["actorid",{"_index":736,"title":{},"body":{"classes/MovieActor.html":{},"injectables/MovieService.html":{},"classes/actorMovieDTO.html":{}}}],["actormovie.dto",{"_index":754,"title":{},"body":{"injectables/MovieActorService.html":{}}}],["actormoviedto",{"_index":750,"title":{"classes/actorMovieDTO.html":{}},"body":{"injectables/MovieActorService.html":{},"classes/actorMovieDTO.html":{},"coverage.html":{}}}],["actors",{"_index":869,"title":{},"body":{"classes/MovieDto.html":{}}}],["actually",{"_index":674,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["add",{"_index":487,"title":{},"body":{"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{},"controllers/RateingController.html":{},"controllers/ReviewController.html":{}}}],["add(@request",{"_index":511,"title":{},"body":{"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{},"controllers/RateingController.html":{},"controllers/ReviewController.html":{}}}],["add(req",{"_index":491,"title":{},"body":{"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{},"controllers/RateingController.html":{},"controllers/ReviewController.html":{}}}],["address",{"_index":1096,"title":{},"body":{"classes/ProductionDto.html":{},"classes/ProductionHouse.html":{},"miscellaneous/variables.html":{}}}],["admin",{"_index":1604,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["advance",{"_index":38,"title":{},"body":{"classes/APIFeatures.html":{}}}],["allow",{"_index":1009,"title":{},"body":{"injectables/MovieService.html":{},"miscellaneous/variables.html":{}}}],["allowed",{"_index":961,"title":{},"body":{"injectables/MovieService.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["allownull",{"_index":459,"title":{},"body":{"classes/Genre.html":{},"classes/Movie.html":{},"classes/Person.html":{},"classes/ProductionHouse.html":{},"classes/Profile.html":{},"classes/User.html":{}}}],["already",{"_index":1469,"title":{},"body":{"injectables/UsersService.html":{}}}],["alreadyinuse",{"_index":1466,"title":{},"body":{"injectables/UsersService.html":{}}}],["amazing",{"_index":1647,"title":{},"body":{"index.html":{}}}],["any,info",{"_index":399,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["any,user",{"_index":398,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["apibody",{"_index":805,"title":{},"body":{"controllers/MovieController.html":{}}}],["apiconsumes",{"_index":806,"title":{},"body":{"controllers/MovieController.html":{}}}],["apiconsumes('multipart/form",{"_index":837,"title":{},"body":{"controllers/MovieController.html":{}}}],["apicreatedresponse",{"_index":807,"title":{},"body":{"controllers/MovieController.html":{}}}],["apifeatures",{"_index":1,"title":{"classes/APIFeatures.html":{}},"body":{"classes/APIFeatures.html":{},"injectables/MovieService.html":{},"coverage.html":{}}}],["apiforbiddenresponse",{"_index":808,"title":{},"body":{"controllers/MovieController.html":{}}}],["apiforbiddenresponse({description",{"_index":766,"title":{},"body":{"controllers/MovieController.html":{}}}],["apiokresponse",{"_index":809,"title":{},"body":{"controllers/MovieController.html":{}}}],["apiproperty",{"_index":450,"title":{},"body":{"classes/FileUploadDto.html":{},"classes/MovieDto.html":{}}}],["apiproperty({type",{"_index":446,"title":{},"body":{"classes/FileUploadDto.html":{},"classes/MovieDto.html":{}}}],["apitags",{"_index":810,"title":{},"body":{"controllers/MovieController.html":{}}}],["apitags('movie",{"_index":811,"title":{},"body":{"controllers/MovieController.html":{}}}],["app",{"_index":1627,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":92,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":281,"title":{},"body":{"modules/AuthModule.html":{}}}],["appcontroller",{"_index":82,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":1620,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":97,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":91,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array=['admin','user",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{}}}],["array=['user','admin",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{}}}],["async",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieActorService.html":{},"controllers/MovieController.html":{},"injectables/MovieDirectorService.html":{},"injectables/MovieGenresService.html":{},"injectables/MovieService.html":{},"controllers/PersonsController.html":{},"injectables/PersonsService.html":{},"controllers/ProductionHouseController.html":{},"injectables/ProductionHouseService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RateingController.html":{},"injectables/RatingService.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":276,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":530,"title":{},"body":{"modules/GenresModule.html":{},"modules/MovieModule.html":{},"modules/PersonsModule.html":{},"modules/ProductionHouseModule.html":{},"modules/ProfileModule.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{}}}],["auth/decorators/roles.decorators",{"_index":502,"title":{},"body":{"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{},"controllers/RateingController.html":{},"controllers/ReviewController.html":{}}}],["auth/guards/jwt",{"_index":503,"title":{},"body":{"controllers/GenresController.html":{},"modules/GenresModule.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"controllers/PersonsController.html":{},"modules/PersonsModule.html":{},"controllers/ProductionHouseController.html":{},"modules/ProductionHouseModule.html":{},"controllers/ProfileController.html":{},"controllers/RateingController.html":{},"modules/RateingModule.html":{},"controllers/ReviewController.html":{}}}],["auth/guards/roles",{"_index":504,"title":{},"body":{"controllers/GenresController.html":{},"modules/GenresModule.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"controllers/PersonsController.html":{},"modules/PersonsModule.html":{},"controllers/ProductionHouseController.html":{},"modules/ProductionHouseModule.html":{},"controllers/RateingController.html":{},"modules/RateingModule.html":{},"controllers/ReviewController.html":{}}}],["auth/strategy/jwt.strategy",{"_index":532,"title":{},"body":{"modules/GenresModule.html":{},"modules/MovieModule.html":{},"modules/PersonsModule.html":{},"modules/ProductionHouseModule.html":{},"modules/RateingModule.html":{},"modules/UsersModule.html":{}}}],["auth/strategy/local.strategy",{"_index":531,"title":{},"body":{"modules/GenresModule.html":{},"modules/MovieModule.html":{},"modules/PersonsModule.html":{},"modules/ProductionHouseModule.html":{},"modules/RateingModule.html":{}}}],["auth/user/profile",{"_index":1159,"title":{},"body":{"controllers/ProfileController.html":{}}}],["authcontroller",{"_index":171,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":662,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":108,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MovieModule.html":{},"modules/PersonsModule.html":{},"modules/ProductionHouseModule.html":{},"modules/ProfileModule.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1656,"title":{},"body":{"index.html":{}}}],["authorized",{"_index":676,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authservice",{"_index":221,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":1668,"title":{},"body":{"modules.html":{},"miscellaneous/variables.html":{}}}],["averagerating",{"_index":690,"title":{},"body":{"classes/Movie.html":{},"injectables/MovieService.html":{}}}],["averagerating(movies",{"_index":934,"title":{},"body":{"injectables/MovieService.html":{}}}],["avgrate",{"_index":996,"title":{},"body":{"injectables/MovieService.html":{}}}],["await",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/PersonsController.html":{},"injectables/PersonsService.html":{},"controllers/ProductionHouseController.html":{},"injectables/ProductionHouseService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RateingController.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["backers",{"_index":1648,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare(enteredpassword",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["beforecreate",{"_index":1389,"title":{},"body":{"classes/User.html":{}}}],["beforecreate()@beforeupdate",{"_index":1384,"title":{},"body":{"classes/User.html":{}}}],["beforeupdate",{"_index":1388,"title":{},"body":{"classes/User.html":{}}}],["belongsto",{"_index":722,"title":{},"body":{"classes/Movie.html":{},"classes/MovieActor.html":{},"classes/MovieDirector.html":{},"classes/MovieGenre.html":{},"classes/ProductionHouse.html":{},"classes/Profile.html":{},"classes/Rate.html":{},"classes/Review.html":{}}}],["belongsto(undefined",{"_index":710,"title":{},"body":{"classes/Movie.html":{},"classes/MovieActor.html":{},"classes/MovieDirector.html":{},"classes/MovieGenre.html":{},"classes/Profile.html":{},"classes/Rate.html":{},"classes/Review.html":{}}}],["belongstomany",{"_index":723,"title":{},"body":{"classes/Movie.html":{},"classes/Person.html":{}}}],["binary",{"_index":448,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["body",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GenresController.html":{},"injectables/MovieService.html":{},"controllers/PersonsController.html":{},"miscellaneous/variables.html":{}}}],["body.coverphoto",{"_index":987,"title":{},"body":{"injectables/MovieService.html":{}}}],["body.description",{"_index":990,"title":{},"body":{"injectables/MovieService.html":{}}}],["body.productionhouseid",{"_index":992,"title":{},"body":{"injectables/MovieService.html":{}}}],["body.title",{"_index":985,"title":{},"body":{"injectables/MovieService.html":{}}}],["body.trailer",{"_index":988,"title":{},"body":{"injectables/MovieService.html":{}}}],["boolean",{"_index":659,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"classes/Movie.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MovieDirectorModule.html":{},"modules/MovieGenresModule.html":{},"modules/MovieModule.html":{},"modules/PersonsModule.html":{},"modules/ProductionHouseModule.html":{},"modules/ProfileModule.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["break",{"_index":1708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["browse",{"_index":1666,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1664,"title":{},"body":{"modules.html":{}}}],["builder",{"_index":168,"title":{},"body":{"injectables/AppService.html":{},"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"dependencies.html":{}}}],["building",{"_index":1615,"title":{},"body":{"index.html":{}}}],["callback",{"_index":1005,"title":{},"body":{"injectables/MovieService.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["callback(new",{"_index":1219,"title":{},"body":{"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["callback(null",{"_index":1010,"title":{},"body":{"injectables/MovieService.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["callbackurl",{"_index":420,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["canactivate",{"_index":1335,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":1339,"title":{},"body":{"guards/RolesGuard.html":{}}}],["cascade",{"_index":464,"title":{},"body":{"classes/Genre.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"classes/MovieDirector.html":{},"classes/MovieGenre.html":{},"classes/Person.html":{},"classes/Profile.html":{},"classes/Rate.html":{},"classes/Review.html":{},"classes/User.html":{}}}],["case",{"_index":1706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["check",{"_index":622,"title":{},"body":{"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{}}}],["checkdb",{"_index":623,"title":{},"body":{"controllers/HealthController.html":{}}}],["class",{"_index":0,"title":{"classes/APIFeatures.html":{},"classes/FileUploadDto.html":{},"classes/Genre.html":{},"classes/GenreDto.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"classes/MovieDirector.html":{},"classes/MovieDto.html":{},"classes/MovieGenre.html":{},"classes/Person.html":{},"classes/PersonDto.html":{},"classes/ProductionDto.html":{},"classes/ProductionHouse.html":{},"classes/Profile.html":{},"classes/Rate.html":{},"classes/Review.html":{},"classes/SocialUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/actorMovieDTO.html":{},"classes/directorMovieDTO.html":{},"classes/genreMovieDTO.html":{}},"body":{"classes/APIFeatures.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/FacebookStrategy.html":{},"classes/FileUploadDto.html":{},"classes/Genre.html":{},"classes/GenreDto.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"injectables/MovieActorService.html":{},"controllers/MovieController.html":{},"classes/MovieDirector.html":{},"modules/MovieDirectorModule.html":{},"injectables/MovieDirectorService.html":{},"classes/MovieDto.html":{},"classes/MovieGenre.html":{},"modules/MovieGenresModule.html":{},"injectables/MovieGenresService.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"classes/PersonDto.html":{},"controllers/PersonsController.html":{},"modules/PersonsModule.html":{},"injectables/PersonsService.html":{},"classes/ProductionDto.html":{},"classes/ProductionHouse.html":{},"controllers/ProductionHouseController.html":{},"modules/ProductionHouseModule.html":{},"injectables/ProductionHouseService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/Rate.html":{},"controllers/RateingController.html":{},"modules/RateingModule.html":{},"injectables/RatingService.html":{},"classes/Review.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"classes/SocialUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/actorMovieDTO.html":{},"coverage.html":{},"classes/directorMovieDTO.html":{},"classes/genreMovieDTO.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/APIFeatures.html":{},"classes/FileUploadDto.html":{},"classes/Genre.html":{},"classes/GenreDto.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"classes/MovieDirector.html":{},"classes/MovieDto.html":{},"classes/MovieGenre.html":{},"classes/Person.html":{},"classes/PersonDto.html":{},"classes/ProductionDto.html":{},"classes/ProductionHouse.html":{},"classes/Profile.html":{},"classes/Rate.html":{},"classes/Review.html":{},"classes/SocialUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/actorMovieDTO.html":{},"classes/directorMovieDTO.html":{},"classes/genreMovieDTO.html":{},"overview.html":{}}}],["cli",{"_index":1590,"title":{},"body":{"dependencies.html":{}}}],["clientid",{"_index":416,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["clientsecret",{"_index":418,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["cluster_appmodule",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":266,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":268,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":269,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":267,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_genresmodule",{"_index":523,"title":{},"body":{"modules/GenresModule.html":{},"overview.html":{}}}],["cluster_genresmodule_imports",{"_index":525,"title":{},"body":{"modules/GenresModule.html":{}}}],["cluster_genresmodule_providers",{"_index":524,"title":{},"body":{"modules/GenresModule.html":{},"overview.html":{}}}],["cluster_moviedirectormodule",{"_index":852,"title":{},"body":{"modules/MovieDirectorModule.html":{},"overview.html":{}}}],["cluster_moviedirectormodule_exports",{"_index":853,"title":{},"body":{"modules/MovieDirectorModule.html":{},"overview.html":{}}}],["cluster_moviedirectormodule_providers",{"_index":854,"title":{},"body":{"modules/MovieDirectorModule.html":{},"overview.html":{}}}],["cluster_moviegenresmodule",{"_index":891,"title":{},"body":{"modules/MovieGenresModule.html":{},"overview.html":{}}}],["cluster_moviegenresmodule_exports",{"_index":893,"title":{},"body":{"modules/MovieGenresModule.html":{},"overview.html":{}}}],["cluster_moviegenresmodule_providers",{"_index":892,"title":{},"body":{"modules/MovieGenresModule.html":{},"overview.html":{}}}],["cluster_moviemodule",{"_index":909,"title":{},"body":{"modules/MovieModule.html":{},"overview.html":{}}}],["cluster_moviemodule_exports",{"_index":912,"title":{},"body":{"modules/MovieModule.html":{},"overview.html":{}}}],["cluster_moviemodule_imports",{"_index":911,"title":{},"body":{"modules/MovieModule.html":{}}}],["cluster_moviemodule_providers",{"_index":910,"title":{},"body":{"modules/MovieModule.html":{},"overview.html":{}}}],["cluster_personsmodule",{"_index":1058,"title":{},"body":{"modules/PersonsModule.html":{},"overview.html":{}}}],["cluster_personsmodule_exports",{"_index":1060,"title":{},"body":{"modules/PersonsModule.html":{},"overview.html":{}}}],["cluster_personsmodule_imports",{"_index":1059,"title":{},"body":{"modules/PersonsModule.html":{}}}],["cluster_personsmodule_providers",{"_index":1061,"title":{},"body":{"modules/PersonsModule.html":{},"overview.html":{}}}],["cluster_productionhousemodule",{"_index":1120,"title":{},"body":{"modules/ProductionHouseModule.html":{},"overview.html":{}}}],["cluster_productionhousemodule_imports",{"_index":1122,"title":{},"body":{"modules/ProductionHouseModule.html":{}}}],["cluster_productionhousemodule_providers",{"_index":1121,"title":{},"body":{"modules/ProductionHouseModule.html":{},"overview.html":{}}}],["cluster_profilemodule",{"_index":1191,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_imports",{"_index":1193,"title":{},"body":{"modules/ProfileModule.html":{}}}],["cluster_profilemodule_providers",{"_index":1192,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_rateingmodule",{"_index":1253,"title":{},"body":{"modules/RateingModule.html":{},"overview.html":{}}}],["cluster_rateingmodule_imports",{"_index":1255,"title":{},"body":{"modules/RateingModule.html":{}}}],["cluster_rateingmodule_providers",{"_index":1254,"title":{},"body":{"modules/RateingModule.html":{},"overview.html":{}}}],["cluster_reviewmodule",{"_index":1308,"title":{},"body":{"modules/ReviewModule.html":{},"overview.html":{}}}],["cluster_reviewmodule_imports",{"_index":1309,"title":{},"body":{"modules/ReviewModule.html":{}}}],["cluster_reviewmodule_providers",{"_index":1310,"title":{},"body":{"modules/ReviewModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1415,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1416,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1417,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code.util",{"_index":1458,"title":{},"body":{"injectables/UsersService.html":{}}}],["column",{"_index":468,"title":{},"body":{"classes/Genre.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"classes/MovieDirector.html":{},"classes/MovieGenre.html":{},"classes/Person.html":{},"classes/ProductionHouse.html":{},"classes/Profile.html":{},"classes/Rate.html":{},"classes/Review.html":{},"classes/User.html":{}}}],["column({type",{"_index":457,"title":{},"body":{"classes/Genre.html":{},"classes/Movie.html":{},"classes/Person.html":{},"classes/ProductionHouse.html":{},"classes/Profile.html":{},"classes/Rate.html":{},"classes/Review.html":{},"classes/User.html":{}}}],["comparepassword",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["comparepassword(enteredpassword",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["config",{"_index":605,"title":{},"body":{"injectables/GoogleStrategy.html":{},"miscellaneous/variables.html":{}}}],["configmodule",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmemail",{"_index":1459,"title":{},"body":{"injectables/UsersService.html":{}}}],["connection",{"_index":632,"title":{},"body":{"controllers/HealthController.html":{},"miscellaneous/variables.html":{}}}],["console.log",{"_index":599,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["console.log(\"in",{"_index":27,"title":{},"body":{"classes/APIFeatures.html":{}}}],["console.log('hi",{"_index":61,"title":{},"body":{"classes/APIFeatures.html":{}}}],["console.log('message",{"_index":1743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log('preview",{"_index":1751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(avgrate",{"_index":999,"title":{},"body":{"injectables/MovieService.html":{}}}],["console.log(data",{"_index":582,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/UsersService.html":{}}}],["console.log(fields",{"_index":64,"title":{},"body":{"classes/APIFeatures.html":{}}}],["console.log(genre",{"_index":563,"title":{},"body":{"injectables/GenresService.html":{}}}],["console.log(json.id",{"_index":1285,"title":{},"body":{"injectables/RatingService.html":{},"injectables/ReviewService.html":{}}}],["console.log(movie",{"_index":1014,"title":{},"body":{"injectables/MovieService.html":{},"miscellaneous/variables.html":{}}}],["console.log(movieactorinstance",{"_index":969,"title":{},"body":{"injectables/MovieService.html":{}}}],["console.log(page",{"_index":71,"title":{},"body":{"classes/APIFeatures.html":{}}}],["console.log(param.id",{"_index":1183,"title":{},"body":{"controllers/ProfileController.html":{}}}],["console.log(person",{"_index":1086,"title":{},"body":{"injectables/PersonsService.html":{}}}],["console.log(process.env.node_env",{"_index":1703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(profile",{"_index":425,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["console.log(prohouse",{"_index":1143,"title":{},"body":{"injectables/ProductionHouseService.html":{}}}],["console.log(qs",{"_index":47,"title":{},"body":{"classes/APIFeatures.html":{}}}],["console.log(querystr",{"_index":42,"title":{},"body":{"classes/APIFeatures.html":{}}}],["console.log(req.headers.authorization",{"_index":1278,"title":{},"body":{"injectables/RatingService.html":{}}}],["console.log(req.params.id",{"_index":1011,"title":{},"body":{"injectables/MovieService.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["console.log(req.query",{"_index":822,"title":{},"body":{"controllers/MovieController.html":{}}}],["console.log(req.query.filter",{"_index":575,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["console.log(req.user",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["console.log(result",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(sequelize",{"_index":644,"title":{},"body":{"controllers/HealthController.html":{}}}],["console.log(sortby",{"_index":54,"title":{},"body":{"classes/APIFeatures.html":{}}}],["console.log(token",{"_index":1282,"title":{},"body":{"injectables/RatingService.html":{},"injectables/ReviewService.html":{}}}],["console.log(user",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["console.log(user.firstname",{"_index":430,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["console.log(usercreat",{"_index":439,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["console.log(userdata",{"_index":1491,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":28,"title":{},"body":{"classes/APIFeatures.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/PersonsController.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/RatingService.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":13,"title":{},"body":{"classes/APIFeatures.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieActorService.html":{},"injectables/MovieDirectorService.html":{},"injectables/MovieGenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/ProfileService.html":{},"injectables/RatingService.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":680,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(genrerepository",{"_index":538,"title":{},"body":{"injectables/GenresService.html":{}}}],["constructor(jwtservice",{"_index":1265,"title":{},"body":{"injectables/RatingService.html":{},"injectables/ReviewService.html":{}}}],["constructor(movieactorproviders",{"_index":745,"title":{},"body":{"injectables/MovieActorService.html":{}}}],["constructor(moviedirectorproviders",{"_index":861,"title":{},"body":{"injectables/MovieDirectorService.html":{}}}],["constructor(moviegenreproviders",{"_index":899,"title":{},"body":{"injectables/MovieGenresService.html":{}}}],["constructor(movierepository",{"_index":928,"title":{},"body":{"injectables/MovieService.html":{}}}],["constructor(personrepository",{"_index":1068,"title":{},"body":{"injectables/PersonsService.html":{}}}],["constructor(private",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"controllers/GenresController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{},"controllers/ProfileController.html":{},"controllers/RateingController.html":{},"controllers/ReviewController.html":{}}}],["constructor(profilerepository",{"_index":1200,"title":{},"body":{"injectables/ProfileService.html":{}}}],["constructor(prohrepository",{"_index":1128,"title":{},"body":{"injectables/ProductionHouseService.html":{}}}],["constructor(query",{"_index":14,"title":{},"body":{"classes/APIFeatures.html":{}}}],["constructor(reflector",{"_index":1336,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(userrepository",{"_index":1427,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["context",{"_index":1342,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":1349,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":1350,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":81,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GenresController.html":{},"controllers/HealthController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{},"controllers/ProfileController.html":{},"controllers/RateingController.html":{},"controllers/ReviewController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GenresController.html":{},"controllers/HealthController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{},"controllers/ProfileController.html":{},"controllers/RateingController.html":{},"controllers/ReviewController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('auth/user/profile",{"_index":1175,"title":{},"body":{"controllers/ProfileController.html":{}}}],["controller('genres",{"_index":508,"title":{},"body":{"controllers/GenresController.html":{}}}],["controller('health",{"_index":636,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('movie",{"_index":812,"title":{},"body":{"controllers/MovieController.html":{}}}],["controller('persons",{"_index":1048,"title":{},"body":{"controllers/PersonsController.html":{}}}],["controller('productionhouse",{"_index":1113,"title":{},"body":{"controllers/ProductionHouseController.html":{}}}],["controller('review",{"_index":1303,"title":{},"body":{"controllers/ReviewController.html":{}}}],["controller('user/rating",{"_index":1244,"title":{},"body":{"controllers/RateingController.html":{}}}],["controllers",{"_index":83,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"controllers/HealthController.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"controllers/PersonsController.html":{},"modules/PersonsModule.html":{},"controllers/ProductionHouseController.html":{},"modules/ProductionHouseModule.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"controllers/RateingController.html":{},"modules/RateingModule.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"overview.html":{}}}],["core/constants",{"_index":952,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["core/constants/index",{"_index":1082,"title":{},"body":{"injectables/PersonsService.html":{}}}],["core/database/database.module",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["count",{"_index":995,"title":{},"body":{"injectables/MovieService.html":{}}}],["cover",{"_index":872,"title":{},"body":{"classes/MovieDto.html":{}}}],["coverage",{"_index":1512,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["coverphoto",{"_index":691,"title":{},"body":{"classes/Movie.html":{},"controllers/MovieController.html":{},"classes/MovieDto.html":{}}}],["create",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenresService.html":{},"injectables/MovieActorService.html":{},"injectables/MovieDirectorService.html":{},"injectables/MovieGenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["create(creatuserdto",{"_index":1430,"title":{},"body":{"injectables/UsersService.html":{}}}],["create(genre",{"_index":541,"title":{},"body":{"injectables/GenresService.html":{}}}],["create(movieactor",{"_index":749,"title":{},"body":{"injectables/MovieActorService.html":{},"injectables/MovieDirectorService.html":{}}}],["create(moviedata",{"_index":937,"title":{},"body":{"injectables/MovieService.html":{}}}],["create(moviegenre",{"_index":901,"title":{},"body":{"injectables/MovieGenresService.html":{}}}],["create(person",{"_index":1071,"title":{},"body":{"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["create(user",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["createbysocial",{"_index":1423,"title":{},"body":{"injectables/UsersService.html":{}}}],["createbysocial(creatuserdto",{"_index":1433,"title":{},"body":{"injectables/UsersService.html":{}}}],["created",{"_index":764,"title":{},"body":{"controllers/MovieController.html":{}}}],["createdate",{"_index":57,"title":{},"body":{"classes/APIFeatures.html":{}}}],["createprofile",{"_index":1160,"title":{},"body":{"controllers/ProfileController.html":{}}}],["createprofile(@request",{"_index":1177,"title":{},"body":{"controllers/ProfileController.html":{}}}],["createprofile(req",{"_index":1163,"title":{},"body":{"controllers/ProfileController.html":{}}}],["creatprofile",{"_index":1199,"title":{},"body":{"injectables/ProfileService.html":{}}}],["creatprofile(req",{"_index":1203,"title":{},"body":{"injectables/ProfileService.html":{}}}],["creatuserdto",{"_index":1432,"title":{},"body":{"injectables/UsersService.html":{}}}],["creatuserdto.accountid",{"_index":1475,"title":{},"body":{"injectables/UsersService.html":{}}}],["creatuserdto.accountwith",{"_index":1477,"title":{},"body":{"injectables/UsersService.html":{}}}],["creatuserdto.email",{"_index":1478,"title":{},"body":{"injectables/UsersService.html":{}}}],["creatuserdto.gender",{"_index":1480,"title":{},"body":{"injectables/UsersService.html":{}}}],["creatuserdto.name",{"_index":1472,"title":{},"body":{"injectables/UsersService.html":{}}}],["creatuserdto.password",{"_index":1473,"title":{},"body":{"injectables/UsersService.html":{}}}],["creatuserdto.role",{"_index":1474,"title":{},"body":{"injectables/UsersService.html":{}}}],["credentials",{"_index":688,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["crypto",{"_index":1452,"title":{},"body":{"injectables/UsersService.html":{}}}],["crypto.randombytes(5).tostring('hex",{"_index":1485,"title":{},"body":{"injectables/UsersService.html":{}}}],["d2g",{"_index":610,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["data",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenresService.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/UsersService.html":{}}}],["data')@apibody({description",{"_index":790,"title":{},"body":{"controllers/MovieController.html":{}}}],["data[key",{"_index":580,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":654,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"miscellaneous/variables.html":{}}}],["database.providers",{"_index":388,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["databaseconfig",{"_index":1521,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["databaseconfig.development",{"_index":1707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["databaseconfig.production",{"_index":1710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["databaseconfig.test",{"_index":1709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["databasemodule",{"_index":109,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseproviders",{"_index":387,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datatype",{"_index":469,"title":{},"body":{"classes/Genre.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"classes/MovieDirector.html":{},"classes/MovieGenre.html":{},"classes/Person.html":{},"classes/ProductionHouse.html":{},"classes/Profile.html":{},"classes/Rate.html":{},"classes/Review.html":{},"classes/User.html":{}}}],["datatype.bigint",{"_index":1397,"title":{},"body":{"classes/User.html":{}}}],["datatype.boolean",{"_index":734,"title":{},"body":{"classes/Movie.html":{},"classes/User.html":{}}}],["datatype.enum",{"_index":1393,"title":{},"body":{"classes/User.html":{}}}],["datatype.integer",{"_index":733,"title":{},"body":{"classes/Movie.html":{},"classes/MovieActor.html":{},"classes/MovieDirector.html":{},"classes/MovieGenre.html":{},"classes/Profile.html":{},"classes/Rate.html":{},"classes/Review.html":{}}}],["datatype.string",{"_index":475,"title":{},"body":{"classes/Genre.html":{},"classes/Movie.html":{},"classes/Person.html":{},"classes/ProductionHouse.html":{},"classes/Profile.html":{},"classes/User.html":{}}}],["datatype.text",{"_index":476,"title":{},"body":{"classes/Genre.html":{},"classes/Movie.html":{},"classes/Person.html":{},"classes/ProductionHouse.html":{},"classes/Review.html":{}}}],["date",{"_index":1453,"title":{},"body":{"injectables/UsersService.html":{}}}],["date.now",{"_index":1488,"title":{},"body":{"injectables/UsersService.html":{}}}],["datenow",{"_index":1496,"title":{},"body":{"injectables/UsersService.html":{}}}],["db",{"_index":638,"title":{},"body":{"controllers/HealthController.html":{}}}],["dbpassword",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["declarations",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MovieDirectorModule.html":{},"modules/MovieGenresModule.html":{},"modules/MovieModule.html":{},"modules/PersonsModule.html":{},"modules/ProductionHouseModule.html":{},"modules/ProfileModule.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":86,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/FileUploadDto.html":{},"classes/Genre.html":{},"controllers/GenresController.html":{},"controllers/HealthController.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"controllers/MovieController.html":{},"classes/MovieDirector.html":{},"classes/MovieDto.html":{},"classes/MovieGenre.html":{},"classes/Person.html":{},"controllers/PersonsController.html":{},"classes/ProductionHouse.html":{},"controllers/ProductionHouseController.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/Rate.html":{},"controllers/RateingController.html":{},"classes/Review.html":{},"controllers/ReviewController.html":{},"classes/User.html":{}}}],["decorators/roles.decorators",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["default",{"_index":77,"title":{},"body":{"classes/APIFeatures.html":{},"classes/MovieDto.html":{},"miscellaneous/variables.html":{}}}],["defaultvalue",{"_index":701,"title":{},"body":{"classes/Movie.html":{},"classes/User.html":{}}}],["defined",{"_index":15,"title":{},"body":{"classes/APIFeatures.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"classes/FileUploadDto.html":{},"classes/Genre.html":{},"classes/GenreDto.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"injectables/MovieActorService.html":{},"controllers/MovieController.html":{},"classes/MovieDirector.html":{},"injectables/MovieDirectorService.html":{},"classes/MovieDto.html":{},"classes/MovieGenre.html":{},"injectables/MovieGenresService.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"classes/PersonDto.html":{},"controllers/PersonsController.html":{},"injectables/PersonsService.html":{},"classes/ProductionDto.html":{},"classes/ProductionHouse.html":{},"controllers/ProductionHouseController.html":{},"injectables/ProductionHouseService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/Rate.html":{},"controllers/RateingController.html":{},"injectables/RatingService.html":{},"classes/Review.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"classes/SocialUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"classes/actorMovieDTO.html":{},"classes/directorMovieDTO.html":{},"classes/genreMovieDTO.html":{},"miscellaneous/variables.html":{}}}],["delete",{"_index":36,"title":{},"body":{"classes/APIFeatures.html":{},"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{}}}],["delete(':id",{"_index":520,"title":{},"body":{"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{}}}],["deletebyid",{"_index":488,"title":{},"body":{"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{}}}],["deletebyid(@param",{"_index":521,"title":{},"body":{"controllers/GenresController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{}}}],["deletebyid(@param('id",{"_index":826,"title":{},"body":{"controllers/MovieController.html":{}}}],["deletebyid(id",{"_index":769,"title":{},"body":{"controllers/MovieController.html":{}}}],["deletebyid(param",{"_index":495,"title":{},"body":{"controllers/GenresController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{}}}],["deletemovie",{"_index":925,"title":{},"body":{"injectables/MovieService.html":{}}}],["deletemovie(id",{"_index":940,"title":{},"body":{"injectables/MovieService.html":{}}}],["deleteperson",{"_index":534,"title":{},"body":{"injectables/GenresService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["deleteperson(id",{"_index":543,"title":{},"body":{"injectables/GenresService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["dependencies",{"_index":99,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MovieDirectorModule.html":{},"modules/MovieGenresModule.html":{},"modules/MovieModule.html":{},"modules/PersonsModule.html":{},"modules/ProductionHouseModule.html":{},"modules/ProfileModule.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":455,"title":{},"body":{"classes/Genre.html":{},"classes/GenreDto.html":{},"classes/Movie.html":{},"controllers/MovieController.html":{},"classes/MovieDto.html":{},"index.html":{}}}],["dest",{"_index":923,"title":{},"body":{"modules/MovieModule.html":{},"modules/ProfileModule.html":{}}}],["destination",{"_index":834,"title":{},"body":{"controllers/MovieController.html":{},"controllers/ProfileController.html":{}}}],["development",{"_index":650,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["dialect",{"_index":657,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"miscellaneous/variables.html":{}}}],["director.entity",{"_index":726,"title":{},"body":{"classes/Movie.html":{},"injectables/MovieDirectorService.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"injectables/PersonsService.html":{}}}],["director.entity.ts",{"_index":846,"title":{},"body":{"classes/MovieDirector.html":{},"coverage.html":{}}}],["director.entity.ts:19",{"_index":848,"title":{},"body":{"classes/MovieDirector.html":{}}}],["director.entity.ts:22",{"_index":851,"title":{},"body":{"classes/MovieDirector.html":{}}}],["director.entity.ts:29",{"_index":850,"title":{},"body":{"classes/MovieDirector.html":{}}}],["director.entity.ts:31",{"_index":849,"title":{},"body":{"classes/MovieDirector.html":{}}}],["director.module",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{}}}],["director.module.ts",{"_index":856,"title":{},"body":{"modules/MovieDirectorModule.html":{}}}],["director.provider",{"_index":858,"title":{},"body":{"modules/MovieDirectorModule.html":{}}}],["director.provider.ts",{"_index":1533,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["director.service",{"_index":859,"title":{},"body":{"modules/MovieDirectorModule.html":{},"injectables/MovieService.html":{}}}],["director.service.ts",{"_index":860,"title":{},"body":{"injectables/MovieDirectorService.html":{},"coverage.html":{}}}],["director.service.ts:13",{"_index":864,"title":{},"body":{"injectables/MovieDirectorService.html":{}}}],["director.service.ts:7",{"_index":862,"title":{},"body":{"injectables/MovieDirectorService.html":{}}}],["director/directormoviedto.ts",{"_index":1532,"title":{},"body":{"coverage.html":{},"classes/directorMovieDTO.html":{}}}],["director/directormoviedto.ts:2",{"_index":1597,"title":{},"body":{"classes/directorMovieDTO.html":{}}}],["director/directormoviedto.ts:3",{"_index":1598,"title":{},"body":{"classes/directorMovieDTO.html":{}}}],["director/movie",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"classes/Movie.html":{},"classes/MovieDirector.html":{},"modules/MovieDirectorModule.html":{},"injectables/MovieDirectorService.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"injectables/PersonsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["directorid",{"_index":847,"title":{},"body":{"classes/MovieDirector.html":{},"injectables/MovieService.html":{},"classes/directorMovieDTO.html":{}}}],["directormoviedto",{"_index":863,"title":{"classes/directorMovieDTO.html":{}},"body":{"injectables/MovieDirectorService.html":{},"coverage.html":{},"classes/directorMovieDTO.html":{}}}],["directors",{"_index":870,"title":{},"body":{"classes/MovieDto.html":{}}}],["diskstorage",{"_index":795,"title":{},"body":{"controllers/MovieController.html":{},"controllers/ProfileController.html":{}}}],["docs",{"_index":641,"title":{},"body":{"controllers/HealthController.html":{}}}],["documentation",{"_index":1513,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":396,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["done(null",{"_index":443,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["dotenv",{"_index":606,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["dto/socialuserdto",{"_index":1449,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto/user.dto",{"_index":1447,"title":{},"body":{"injectables/UsersService.html":{}}}],["duplicating",{"_index":595,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["e2e",{"_index":1636,"title":{},"body":{"index.html":{}}}],["editfilename",{"_index":800,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["efficient",{"_index":1616,"title":{},"body":{"index.html":{}}}],["el.rate",{"_index":998,"title":{},"body":{"injectables/MovieService.html":{}}}],["element",{"_index":966,"title":{},"body":{"injectables/MovieService.html":{},"guards/RolesGuard.html":{}}}],["email",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"classes/PersonDto.html":{},"injectables/PersonsService.html":{},"classes/SocialUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["emails",{"_index":424,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["emails[0].value",{"_index":426,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["emailtolowercase",{"_index":1365,"title":{},"body":{"classes/User.html":{}}}],["emailtolowercase(instance",{"_index":1383,"title":{},"body":{"classes/User.html":{}}}],["enteredpassword",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["enumerations",{"_index":1600,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":397,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["error",{"_index":1457,"title":{},"body":{"injectables/UsersService.html":{}}}],["error('only",{"_index":1220,"title":{},"body":{"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["ethereal",{"_index":1730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["excludesfields",{"_index":30,"title":{},"body":{"classes/APIFeatures.html":{}}}],["excludesfields.foreach((el",{"_index":35,"title":{},"body":{"classes/APIFeatures.html":{}}}],["executioncontext",{"_index":1340,"title":{},"body":{"guards/RolesGuard.html":{}}}],["exist",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["expiresin",{"_index":289,"title":{},"body":{"modules/AuthModule.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{}}}],["export",{"_index":76,"title":{},"body":{"classes/APIFeatures.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/FacebookStrategy.html":{},"classes/FileUploadDto.html":{},"classes/Genre.html":{},"classes/GenreDto.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"injectables/MovieActorService.html":{},"controllers/MovieController.html":{},"classes/MovieDirector.html":{},"modules/MovieDirectorModule.html":{},"injectables/MovieDirectorService.html":{},"classes/MovieDto.html":{},"classes/MovieGenre.html":{},"modules/MovieGenresModule.html":{},"injectables/MovieGenresService.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"classes/PersonDto.html":{},"controllers/PersonsController.html":{},"modules/PersonsModule.html":{},"injectables/PersonsService.html":{},"classes/ProductionDto.html":{},"classes/ProductionHouse.html":{},"controllers/ProductionHouseController.html":{},"modules/ProductionHouseModule.html":{},"injectables/ProductionHouseService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/Rate.html":{},"controllers/RateingController.html":{},"modules/RateingModule.html":{},"injectables/RatingService.html":{},"classes/Review.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"classes/SocialUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/actorMovieDTO.html":{},"classes/directorMovieDTO.html":{},"classes/genreMovieDTO.html":{}}}],["exports",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/GenresModule.html":{},"modules/MovieDirectorModule.html":{},"modules/MovieGenresModule.html":{},"modules/MovieModule.html":{},"modules/PersonsModule.html":{},"modules/ProductionHouseModule.html":{},"modules/ProfileModule.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":799,"title":{},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"dependencies.html":{}}}],["extends",{"_index":413,"title":{},"body":{"injectables/FacebookStrategy.html":{},"classes/Genre.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"classes/MovieDirector.html":{},"classes/MovieGenre.html":{},"classes/Person.html":{},"classes/ProductionHouse.html":{},"classes/Profile.html":{},"classes/Rate.html":{},"classes/Review.html":{},"classes/User.html":{}}}],["extname",{"_index":953,"title":{},"body":{"injectables/MovieService.html":{},"injectables/ProfileService.html":{}}}],["extname(file.originalname",{"_index":1016,"title":{},"body":{"injectables/MovieService.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":667,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":671,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["facebook",{"_index":407,"title":{},"body":{"injectables/FacebookStrategy.html":{},"dependencies.html":{}}}],["facebooklogin",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["facebooklogin(req",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["facebookloginredirect",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["facebookloginredirect(@req",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{}}}],["facebookloginredirect(req",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["facebookstrategy",{"_index":270,"title":{"injectables/FacebookStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/FacebookStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["false",{"_index":460,"title":{},"body":{"classes/Genre.html":{},"injectables/GenresService.html":{},"injectables/JwtStrategy.html":{},"classes/Movie.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"injectables/PersonsService.html":{},"classes/ProductionHouse.html":{},"injectables/ProductionHouseService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["female",{"_index":1394,"title":{},"body":{"classes/User.html":{}}}],["field",{"_index":34,"title":{},"body":{"classes/APIFeatures.html":{}}}],["fields",{"_index":62,"title":{},"body":{"classes/APIFeatures.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/APIFeatures.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/FacebookStrategy.html":{},"classes/FileUploadDto.html":{},"classes/Genre.html":{},"classes/GenreDto.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"injectables/MovieActorService.html":{},"controllers/MovieController.html":{},"classes/MovieDirector.html":{},"modules/MovieDirectorModule.html":{},"injectables/MovieDirectorService.html":{},"classes/MovieDto.html":{},"classes/MovieGenre.html":{},"modules/MovieGenresModule.html":{},"injectables/MovieGenresService.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"classes/PersonDto.html":{},"controllers/PersonsController.html":{},"modules/PersonsModule.html":{},"injectables/PersonsService.html":{},"classes/ProductionDto.html":{},"classes/ProductionHouse.html":{},"controllers/ProductionHouseController.html":{},"modules/ProductionHouseModule.html":{},"injectables/ProductionHouseService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/Rate.html":{},"controllers/RateingController.html":{},"modules/RateingModule.html":{},"injectables/RatingService.html":{},"classes/Review.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"classes/SocialUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/actorMovieDTO.html":{},"coverage.html":{},"classes/directorMovieDTO.html":{},"classes/genreMovieDTO.html":{},"miscellaneous/variables.html":{}}}],["file.filename",{"_index":840,"title":{},"body":{"controllers/MovieController.html":{},"controllers/ProfileController.html":{}}}],["file.originalname",{"_index":844,"title":{},"body":{"controllers/MovieController.html":{},"controllers/ProfileController.html":{}}}],["file.originalname.match(/\\.(jpg|jpeg|png|gif|png",{"_index":1006,"title":{},"body":{"injectables/MovieService.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["fileextname",{"_index":1015,"title":{},"body":{"injectables/MovieService.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["filefilter",{"_index":836,"title":{},"body":{"controllers/MovieController.html":{},"controllers/ProfileController.html":{}}}],["fileinterceptor",{"_index":797,"title":{},"body":{"controllers/MovieController.html":{},"controllers/ProfileController.html":{}}}],["fileinterceptor('image",{"_index":832,"title":{},"body":{"controllers/MovieController.html":{},"controllers/ProfileController.html":{}}}],["filename",{"_index":835,"title":{},"body":{"controllers/MovieController.html":{},"controllers/ProfileController.html":{}}}],["files",{"_index":1008,"title":{},"body":{"injectables/MovieService.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["fileuploaddto",{"_index":444,"title":{"classes/FileUploadDto.html":{}},"body":{"classes/FileUploadDto.html":{},"controllers/MovieController.html":{},"coverage.html":{}}}],["filter",{"_index":12,"title":{},"body":{"classes/APIFeatures.html":{},"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["filtering",{"_index":39,"title":{},"body":{"classes/APIFeatures.html":{}}}],["find",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["findall",{"_index":535,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["findall(req",{"_index":942,"title":{},"body":{"injectables/MovieService.html":{}}}],["findalluser",{"_index":1424,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyverifytoken",{"_index":1425,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyverifytoken(tokensend",{"_index":1436,"title":{},"body":{"injectables/UsersService.html":{}}}],["findmovieofavgrating",{"_index":926,"title":{},"body":{"injectables/MovieService.html":{}}}],["findmovieofavgrating(rate",{"_index":944,"title":{},"body":{"injectables/MovieService.html":{}}}],["findone",{"_index":570,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["findonebyaccountid",{"_index":1426,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyaccountid(accountid",{"_index":1438,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyemail",{"_index":1067,"title":{},"body":{"injectables/PersonsService.html":{},"injectables/UsersService.html":{}}}],["findonebyemail(email",{"_index":1075,"title":{},"body":{"injectables/PersonsService.html":{},"injectables/UsersService.html":{}}}],["findonebyid",{"_index":536,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":546,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/UsersService.html":{}}}],["findonebyname",{"_index":537,"title":{},"body":{"injectables/GenresService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["findonebyname(name",{"_index":548,"title":{},"body":{"injectables/GenresService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["findonebytitle",{"_index":927,"title":{},"body":{"injectables/MovieService.html":{}}}],["findonebytitle(title",{"_index":947,"title":{},"body":{"injectables/MovieService.html":{}}}],["firstname",{"_index":614,"title":{},"body":{"injectables/GoogleStrategy.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{}}}],["foo",{"_index":1736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forbidden",{"_index":767,"title":{},"body":{"controllers/MovieController.html":{}}}],["foreignkey",{"_index":720,"title":{},"body":{"classes/Movie.html":{},"classes/MovieActor.html":{},"classes/MovieDirector.html":{},"classes/MovieGenre.html":{},"classes/Person.html":{},"classes/ProductionHouse.html":{},"classes/Profile.html":{},"classes/Rate.html":{},"classes/Review.html":{}}}],["foreignkey(undefined)@column({type",{"_index":712,"title":{},"body":{"classes/Movie.html":{},"classes/MovieActor.html":{},"classes/MovieDirector.html":{},"classes/MovieGenre.html":{},"classes/Profile.html":{}}}],["foreignkey(undefined)@primarykey()@column({type",{"_index":1225,"title":{},"body":{"classes/Rate.html":{},"classes/Review.html":{}}}],["format",{"_index":447,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["found",{"_index":567,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":1614,"title":{},"body":{"index.html":{}}}],["fred",{"_index":1735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":403,"title":{},"body":{"injectables/FacebookStrategy.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":1605,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gender",{"_index":1364,"title":{},"body":{"classes/User.html":{},"classes/UserDto.html":{}}}],["generate",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["generated",{"_index":1729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generatetoken",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["generatetoken(user",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["genre",{"_index":452,"title":{"classes/Genre.html":{}},"body":{"classes/Genre.html":{},"injectables/GenresService.html":{},"classes/MovieGenre.html":{},"injectables/MovieService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["genre.dto",{"_index":505,"title":{},"body":{"controllers/GenresController.html":{},"injectables/GenresService.html":{}}}],["genre.entity",{"_index":556,"title":{},"body":{"injectables/GenresService.html":{}}}],["genre.findall",{"_index":593,"title":{},"body":{"injectables/GenresService.html":{}}}],["genre.length",{"_index":564,"title":{},"body":{"injectables/GenresService.html":{}}}],["genre.provider",{"_index":529,"title":{},"body":{"modules/GenresModule.html":{}}}],["genre_repository",{"_index":553,"title":{},"body":{"injectables/GenresService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["genredto",{"_index":477,"title":{"classes/GenreDto.html":{}},"body":{"classes/GenreDto.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"coverage.html":{}}}],["genreid",{"_index":885,"title":{},"body":{"classes/MovieGenre.html":{},"injectables/MovieService.html":{},"classes/genreMovieDTO.html":{}}}],["genremoviedto",{"_index":902,"title":{"classes/genreMovieDTO.html":{}},"body":{"injectables/MovieGenresService.html":{},"coverage.html":{},"classes/genreMovieDTO.html":{}}}],["genrerepository",{"_index":540,"title":{},"body":{"injectables/GenresService.html":{}}}],["genres",{"_index":486,"title":{},"body":{"controllers/GenresController.html":{},"classes/MovieDto.html":{}}}],["genres.controller",{"_index":527,"title":{},"body":{"modules/GenresModule.html":{}}}],["genres.module",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{}}}],["genres.module.ts",{"_index":895,"title":{},"body":{"modules/MovieGenresModule.html":{}}}],["genres.service",{"_index":507,"title":{},"body":{"controllers/GenresController.html":{},"modules/GenresModule.html":{},"modules/MovieGenresModule.html":{},"injectables/MovieService.html":{}}}],["genres.service.ts",{"_index":898,"title":{},"body":{"injectables/MovieGenresService.html":{},"coverage.html":{}}}],["genres.service.ts:13",{"_index":903,"title":{},"body":{"injectables/MovieGenresService.html":{}}}],["genres.service.ts:7",{"_index":900,"title":{},"body":{"injectables/MovieGenresService.html":{}}}],["genres/genre.entity",{"_index":890,"title":{},"body":{"classes/MovieGenre.html":{},"injectables/MovieService.html":{}}}],["genres/genres.module",{"_index":920,"title":{},"body":{"modules/MovieModule.html":{}}}],["genres/movie",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"modules/MovieGenresModule.html":{},"injectables/MovieGenresService.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"coverage.html":{}}}],["genres/movie_genre.dto.ts",{"_index":1534,"title":{},"body":{"coverage.html":{},"classes/genreMovieDTO.html":{}}}],["genres/movie_genre.dto.ts:2",{"_index":1608,"title":{},"body":{"classes/genreMovieDTO.html":{}}}],["genres/movie_genre.dto.ts:3",{"_index":1609,"title":{},"body":{"classes/genreMovieDTO.html":{}}}],["genres/movie_genre.entity",{"_index":474,"title":{},"body":{"classes/Genre.html":{},"injectables/GenresService.html":{},"classes/Movie.html":{},"injectables/MovieService.html":{}}}],["genres/movie_genre.entity.ts",{"_index":884,"title":{},"body":{"classes/MovieGenre.html":{},"coverage.html":{}}}],["genres/movie_genre.entity.ts:19",{"_index":887,"title":{},"body":{"classes/MovieGenre.html":{}}}],["genres/movie_genre.entity.ts:22",{"_index":886,"title":{},"body":{"classes/MovieGenre.html":{}}}],["genres/movie_genre.entity.ts:29",{"_index":889,"title":{},"body":{"classes/MovieGenre.html":{}}}],["genres/movie_genre.entity.ts:31",{"_index":888,"title":{},"body":{"classes/MovieGenre.html":{}}}],["genres/movie_genre.provider.ts",{"_index":1535,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["genrescontroller",{"_index":484,"title":{"controllers/GenresController.html":{}},"body":{"controllers/GenresController.html":{},"modules/GenresModule.html":{},"coverage.html":{}}}],["genresmodule",{"_index":110,"title":{"modules/GenresModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GenresModule.html":{},"modules/MovieModule.html":{},"modules.html":{},"overview.html":{}}}],["genresproviders",{"_index":528,"title":{},"body":{"modules/GenresModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["genresservice",{"_index":506,"title":{"injectables/GenresService.html":{}},"body":{"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"coverage.html":{},"overview.html":{}}}],["get('/email/:email",{"_index":1041,"title":{},"body":{"controllers/PersonsController.html":{}}}],["get('/facebook",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/facebook')@useguards(undefined",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/facebook/redirect",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/facebook/redirect')@useguards(undefined",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/name/:name",{"_index":1045,"title":{},"body":{"controllers/PersonsController.html":{}}}],["get(':id",{"_index":500,"title":{},"body":{"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{}}}],["get(':id')@apiokresponse({description",{"_index":778,"title":{},"body":{"controllers/MovieController.html":{}}}],["get(':movieid",{"_index":1247,"title":{},"body":{"controllers/RateingController.html":{},"controllers/ReviewController.html":{}}}],["get('db",{"_index":643,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('db')@healthcheck",{"_index":626,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('google",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google')@useguards(undefined",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/redirect",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/redirect')@useguards(undefined",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('name/:name",{"_index":1109,"title":{},"body":{"controllers/ProductionHouseController.html":{}}}],["get('search",{"_index":820,"title":{},"body":{"controllers/MovieController.html":{}}}],["get('search')@apiokresponse({description",{"_index":783,"title":{},"body":{"controllers/MovieController.html":{}}}],["get('signup/verification/:token",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('title/:title",{"_index":817,"title":{},"body":{"controllers/MovieController.html":{}}}],["get('title/:title')@apiokresponse({description",{"_index":781,"title":{},"body":{"controllers/MovieController.html":{}}}],["get('user/:userid",{"_index":1250,"title":{},"body":{"controllers/RateingController.html":{},"controllers/ReviewController.html":{}}}],["get('users",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@apiokresponse({description",{"_index":775,"title":{},"body":{"controllers/MovieController.html":{}}}],["get()@healthcheck",{"_index":624,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(@request",{"_index":815,"title":{},"body":{"controllers/MovieController.html":{}}}],["get(req",{"_index":774,"title":{},"body":{"controllers/MovieController.html":{}}}],["getall",{"_index":489,"title":{},"body":{"controllers/GenresController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{}}}],["getbyemail",{"_index":1035,"title":{},"body":{"controllers/PersonsController.html":{}}}],["getbyemail(@param",{"_index":1053,"title":{},"body":{"controllers/PersonsController.html":{}}}],["getbyemail(param",{"_index":1040,"title":{},"body":{"controllers/PersonsController.html":{}}}],["getbyid",{"_index":490,"title":{},"body":{"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{}}}],["getbyid(@param",{"_index":518,"title":{},"body":{"controllers/GenresController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{}}}],["getbyid(@param('id",{"_index":824,"title":{},"body":{"controllers/MovieController.html":{}}}],["getbyid(id",{"_index":777,"title":{},"body":{"controllers/MovieController.html":{}}}],["getbyid(param",{"_index":499,"title":{},"body":{"controllers/GenresController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{}}}],["getbyname",{"_index":1036,"title":{},"body":{"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{}}}],["getbyname(@param",{"_index":1055,"title":{},"body":{"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{}}}],["getbyname(param",{"_index":1044,"title":{},"body":{"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{}}}],["getbytitle",{"_index":759,"title":{},"body":{"controllers/MovieController.html":{}}}],["getbytitle(@param('title",{"_index":818,"title":{},"body":{"controllers/MovieController.html":{}}}],["getbytitle(title",{"_index":780,"title":{},"body":{"controllers/MovieController.html":{}}}],["getbyymovieid",{"_index":1233,"title":{},"body":{"controllers/RateingController.html":{},"controllers/ReviewController.html":{}}}],["getbyymovieid(@param",{"_index":1248,"title":{},"body":{"controllers/RateingController.html":{},"controllers/ReviewController.html":{}}}],["getbyymovieid(param",{"_index":1236,"title":{},"body":{"controllers/RateingController.html":{},"controllers/ReviewController.html":{}}}],["getbyyuserid",{"_index":1234,"title":{},"body":{"controllers/RateingController.html":{},"controllers/ReviewController.html":{}}}],["getbyyuserid(@param",{"_index":1251,"title":{},"body":{"controllers/RateingController.html":{},"controllers/ReviewController.html":{}}}],["getbyyuserid(param",{"_index":1239,"title":{},"body":{"controllers/RateingController.html":{},"controllers/ReviewController.html":{}}}],["gethello",{"_index":85,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{}}}],["getprofile",{"_index":1161,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["getprofile(@request",{"_index":1187,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getprofile(id",{"_index":1205,"title":{},"body":{"injectables/ProfileService.html":{}}}],["getprofile(req",{"_index":1166,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getting",{"_index":1610,"title":{"index.html":{}},"body":{}}],["getusers",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getusers(@request",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["getusers(req",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["google",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["googleauth",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauth(@req",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauth(req",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthredirect",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthredirect(@req",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthredirect(req",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlelogin",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlelogin(req",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlestrategy",{"_index":271,"title":{"injectables/GoogleStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["graph",{"_index":1667,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":1643,"title":{},"body":{"index.html":{}}}],["guard",{"_index":1333,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"controllers/PersonsController.html":{},"modules/PersonsModule.html":{},"controllers/ProductionHouseController.html":{},"modules/ProductionHouseModule.html":{},"controllers/ProfileController.html":{},"controllers/RateingController.html":{},"modules/RateingModule.html":{},"controllers/ReviewController.html":{},"guards/RolesGuard.html":{}}}],["guards.ts",{"_index":661,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["guards.ts:14",{"_index":1338,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards.ts:20",{"_index":1341,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["guards/roles",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["hash",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(password",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasmany",{"_index":470,"title":{},"body":{"classes/Genre.html":{},"classes/Movie.html":{},"classes/Person.html":{},"classes/ProductionHouse.html":{},"classes/User.html":{}}}],["hasmany(undefined",{"_index":462,"title":{},"body":{"classes/Genre.html":{},"classes/Movie.html":{},"classes/Person.html":{},"classes/ProductionHouse.html":{},"classes/User.html":{}}}],["hasone",{"_index":724,"title":{},"body":{"classes/Movie.html":{},"classes/Person.html":{},"classes/User.html":{}}}],["hasone(undefined",{"_index":1373,"title":{},"body":{"classes/User.html":{}}}],["haspermission",{"_index":1356,"title":{},"body":{"guards/RolesGuard.html":{}}}],["hasroles",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{},"controllers/RateingController.html":{},"controllers/ReviewController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hasroles(role.admin",{"_index":509,"title":{},"body":{"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{},"controllers/RateingController.html":{},"controllers/ReviewController.html":{}}}],["hasroles(role.admin)@useguards(jwtauthguard",{"_index":492,"title":{},"body":{"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{},"controllers/RateingController.html":{},"controllers/ReviewController.html":{}}}],["hasroles(role.user",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{}}}],["health",{"_index":621,"title":{},"body":{"controllers/HealthController.html":{}}}],["health/health.controller",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":628,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":629,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":124,"title":{"controllers/HealthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"coverage.html":{}}}],["hello",{"_index":169,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["here",{"_index":1653,"title":{},"body":{"index.html":{}}}],["host",{"_index":655,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"miscellaneous/variables.html":{}}}],["house",{"_index":878,"title":{},"body":{"classes/MovieDto.html":{}}}],["house.controller",{"_index":1124,"title":{},"body":{"modules/ProductionHouseModule.html":{}}}],["house.controller.ts",{"_index":1104,"title":{},"body":{"controllers/ProductionHouseController.html":{},"coverage.html":{}}}],["house.controller.ts:22",{"_index":1105,"title":{},"body":{"controllers/ProductionHouseController.html":{}}}],["house.controller.ts:26",{"_index":1107,"title":{},"body":{"controllers/ProductionHouseController.html":{}}}],["house.controller.ts:30",{"_index":1108,"title":{},"body":{"controllers/ProductionHouseController.html":{}}}],["house.controller.ts:34",{"_index":1110,"title":{},"body":{"controllers/ProductionHouseController.html":{}}}],["house.controller.ts:40",{"_index":1106,"title":{},"body":{"controllers/ProductionHouseController.html":{}}}],["house.entity",{"_index":729,"title":{},"body":{"classes/Movie.html":{},"injectables/MovieService.html":{},"injectables/ProductionHouseService.html":{}}}],["house.entity.ts",{"_index":1099,"title":{},"body":{"classes/ProductionHouse.html":{},"coverage.html":{}}}],["house.entity.ts:18",{"_index":1102,"title":{},"body":{"classes/ProductionHouse.html":{}}}],["house.entity.ts:23",{"_index":1100,"title":{},"body":{"classes/ProductionHouse.html":{}}}],["house.entity.ts:26",{"_index":1101,"title":{},"body":{"classes/ProductionHouse.html":{}}}],["house.module",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{}}}],["house.module.ts",{"_index":1123,"title":{},"body":{"modules/ProductionHouseModule.html":{}}}],["house.providers",{"_index":1126,"title":{},"body":{"modules/ProductionHouseModule.html":{}}}],["house.providers.ts",{"_index":1544,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["house.service",{"_index":1112,"title":{},"body":{"controllers/ProductionHouseController.html":{},"modules/ProductionHouseModule.html":{}}}],["house.service.ts",{"_index":1127,"title":{},"body":{"injectables/ProductionHouseService.html":{},"coverage.html":{}}}],["house.service.ts:14",{"_index":1131,"title":{},"body":{"injectables/ProductionHouseService.html":{}}}],["house.service.ts:19",{"_index":1133,"title":{},"body":{"injectables/ProductionHouseService.html":{}}}],["house.service.ts:31",{"_index":1135,"title":{},"body":{"injectables/ProductionHouseService.html":{}}}],["house.service.ts:43",{"_index":1134,"title":{},"body":{"injectables/ProductionHouseService.html":{}}}],["house.service.ts:56",{"_index":1132,"title":{},"body":{"injectables/ProductionHouseService.html":{}}}],["house.service.ts:71",{"_index":1136,"title":{},"body":{"injectables/ProductionHouseService.html":{}}}],["house.service.ts:9",{"_index":1129,"title":{},"body":{"injectables/ProductionHouseService.html":{}}}],["house/production",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"classes/Movie.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/ProductionHouse.html":{},"controllers/ProductionHouseController.html":{},"modules/ProductionHouseModule.html":{},"injectables/ProductionHouseService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["house/productionhouse.dto.ts",{"_index":1095,"title":{},"body":{"classes/ProductionDto.html":{},"coverage.html":{}}}],["house/productionhouse.dto.ts:2",{"_index":1098,"title":{},"body":{"classes/ProductionDto.html":{}}}],["house/productionhouse.dto.ts:3",{"_index":1097,"title":{},"body":{"classes/ProductionDto.html":{}}}],["hstore",{"_index":1581,"title":{},"body":{"dependencies.html":{}}}],["html",{"_index":1742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":637,"title":{},"body":{"controllers/HealthController.html":{}}}],["http://localhost:3000/api/v1/auth/facebook/redirect",{"_index":421,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["http://localhost:3000/api/v1/auth/google/redirect",{"_index":612,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["httpcode",{"_index":1344,"title":{},"body":{"guards/RolesGuard.html":{},"injectables/UsersService.html":{}}}],["httperrorbycode",{"_index":1455,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpexception",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenresService.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/RatingService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["httpexception('no",{"_index":566,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["httpexception('sorry",{"_index":1468,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpexception('user",{"_index":1495,"title":{},"body":{"injectables/UsersService.html":{}}}],["httphealthindicator",{"_index":630,"title":{},"body":{"controllers/HealthController.html":{}}}],["https://docs.nestjs.com",{"_index":642,"title":{},"body":{"controllers/HealthController.html":{}}}],["https://ethereal.email/message/waqkmgkddxqdoou",{"_index":1754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":1660,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.forbidden",{"_index":962,"title":{},"body":{"injectables/MovieService.html":{},"miscellaneous/variables.html":{}}}],["httpstatus.not_found",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["httpstatus.ok",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["id",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["idatabaseconfig",{"_index":647,"title":{"interfaces/IDatabaseConfig.html":{}},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["idatabaseconfigattributes",{"_index":653,"title":{"interfaces/IDatabaseConfigAttributes.html":{}},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"coverage.html":{}}}],["identifier",{"_index":1514,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":672,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":1221,"title":{},"body":{"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["imagefilefilter",{"_index":801,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["implements",{"_index":1346,"title":{},"body":{"guards/RolesGuard.html":{}}}],["import",{"_index":89,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/FacebookStrategy.html":{},"classes/FileUploadDto.html":{},"classes/Genre.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"injectables/MovieActorService.html":{},"controllers/MovieController.html":{},"classes/MovieDirector.html":{},"modules/MovieDirectorModule.html":{},"injectables/MovieDirectorService.html":{},"classes/MovieDto.html":{},"classes/MovieGenre.html":{},"modules/MovieGenresModule.html":{},"injectables/MovieGenresService.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"controllers/PersonsController.html":{},"modules/PersonsModule.html":{},"injectables/PersonsService.html":{},"classes/ProductionHouse.html":{},"controllers/ProductionHouseController.html":{},"modules/ProductionHouseModule.html":{},"injectables/ProductionHouseService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/Rate.html":{},"controllers/RateingController.html":{},"modules/RateingModule.html":{},"injectables/RatingService.html":{},"classes/Review.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MovieModule.html":{},"modules/PersonsModule.html":{},"modules/ProductionHouseModule.html":{},"modules/ProfileModule.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":562,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/ReviewService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/APIFeatures.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"classes/FileUploadDto.html":{},"classes/Genre.html":{},"classes/GenreDto.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"injectables/MovieActorService.html":{},"controllers/MovieController.html":{},"classes/MovieDirector.html":{},"injectables/MovieDirectorService.html":{},"classes/MovieDto.html":{},"classes/MovieGenre.html":{},"injectables/MovieGenresService.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"classes/PersonDto.html":{},"controllers/PersonsController.html":{},"injectables/PersonsService.html":{},"classes/ProductionDto.html":{},"classes/ProductionHouse.html":{},"controllers/ProductionHouseController.html":{},"injectables/ProductionHouseService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/Rate.html":{},"controllers/RateingController.html":{},"injectables/RatingService.html":{},"classes/Review.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"classes/SocialUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"classes/actorMovieDTO.html":{},"classes/directorMovieDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/genreMovieDTO.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/APIFeatures.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/FacebookStrategy.html":{},"classes/FileUploadDto.html":{},"classes/Genre.html":{},"classes/GenreDto.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"injectables/MovieActorService.html":{},"controllers/MovieController.html":{},"classes/MovieDirector.html":{},"modules/MovieDirectorModule.html":{},"injectables/MovieDirectorService.html":{},"classes/MovieDto.html":{},"classes/MovieGenre.html":{},"modules/MovieGenresModule.html":{},"injectables/MovieGenresService.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"classes/PersonDto.html":{},"controllers/PersonsController.html":{},"modules/PersonsModule.html":{},"injectables/PersonsService.html":{},"classes/ProductionDto.html":{},"classes/ProductionHouse.html":{},"controllers/ProductionHouseController.html":{},"modules/ProductionHouseModule.html":{},"injectables/ProductionHouseService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/Rate.html":{},"controllers/RateingController.html":{},"modules/RateingModule.html":{},"injectables/RatingService.html":{},"classes/Review.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"classes/SocialUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/actorMovieDTO.html":{},"classes/directorMovieDTO.html":{},"classes/genreMovieDTO.html":{},"miscellaneous/variables.html":{}}}],["info.messageid",{"_index":1746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["information",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["inject",{"_index":552,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieActorService.html":{},"injectables/MovieDirectorService.html":{},"injectables/MovieGenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/ProfileService.html":{},"injectables/RatingService.html":{},"injectables/ReviewService.html":{},"injectables/UsersService.html":{}}}],["inject(genre_repository",{"_index":557,"title":{},"body":{"injectables/GenresService.html":{}}}],["inject(movie_repository",{"_index":957,"title":{},"body":{"injectables/MovieService.html":{}}}],["inject(movieactor_repository",{"_index":755,"title":{},"body":{"injectables/MovieActorService.html":{}}}],["inject(moviedirector_repository",{"_index":866,"title":{},"body":{"injectables/MovieDirectorService.html":{}}}],["inject(moviegenre_repository",{"_index":907,"title":{},"body":{"injectables/MovieGenresService.html":{}}}],["inject(person_repository",{"_index":1083,"title":{},"body":{"injectables/PersonsService.html":{}}}],["inject(productionhouse_repository",{"_index":1139,"title":{},"body":{"injectables/ProductionHouseService.html":{}}}],["inject(profile_repository",{"_index":1211,"title":{},"body":{"injectables/ProfileService.html":{}}}],["inject(rate_repository",{"_index":1277,"title":{},"body":{"injectables/RatingService.html":{}}}],["inject(review_repository",{"_index":1329,"title":{},"body":{"injectables/ReviewService.html":{}}}],["inject(user_repository",{"_index":1465,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectable",{"_index":161,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieActorService.html":{},"injectables/MovieDirectorService.html":{},"injectables/MovieGenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/ProfileService.html":{},"injectables/RatingService.html":{},"injectables/ReviewService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieActorService.html":{},"injectables/MovieDirectorService.html":{},"injectables/MovieGenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/ProfileService.html":{},"injectables/RatingService.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":162,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieActorService.html":{},"injectables/MovieDirectorService.html":{},"injectables/MovieGenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/ProfileService.html":{},"injectables/RatingService.html":{},"injectables/ReviewService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["installation",{"_index":1624,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1626,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1386,"title":{},"body":{"classes/User.html":{}}}],["instance.email",{"_index":1398,"title":{},"body":{"classes/User.html":{}}}],["instance.email.tolowercase",{"_index":1399,"title":{},"body":{"classes/User.html":{}}}],["interface",{"_index":646,"title":{"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{}},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"coverage.html":{}}}],["interfaces",{"_index":648,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"overview.html":{}}}],["isglobal",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["isnan(val",{"_index":579,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/UsersService.html":{}}}],["join",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["jpg|jpeg|png|gif",{"_index":1007,"title":{},"body":{"injectables/MovieService.html":{},"miscellaneous/variables.html":{}}}],["json",{"_index":1283,"title":{},"body":{"injectables/RatingService.html":{},"injectables/ReviewService.html":{}}}],["json.id",{"_index":1286,"title":{},"body":{"injectables/RatingService.html":{},"injectables/ReviewService.html":{}}}],["json.stringify(queryobj",{"_index":41,"title":{},"body":{"classes/APIFeatures.html":{}}}],["jsonwebtoken",{"_index":1571,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":668,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":224,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/JwtAuthGuard.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"controllers/PersonsController.html":{},"modules/PersonsModule.html":{},"controllers/ProductionHouseController.html":{},"modules/ProductionHouseModule.html":{},"controllers/ProfileController.html":{},"controllers/RateingController.html":{},"modules/RateingModule.html":{},"controllers/ReviewController.html":{},"coverage.html":{},"overview.html":{}}}],["jwtfromrequest",{"_index":670,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":280,"title":{},"body":{"modules/AuthModule.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{}}}],["jwtmodule.register",{"_index":285,"title":{},"body":{"modules/AuthModule.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{}}}],["jwtservice",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"modules/RateingModule.html":{},"injectables/RatingService.html":{},"injectables/ReviewService.html":{},"injectables/UsersService.html":{}}}],["jwtstrategy",{"_index":272,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"modules/GenresModule.html":{},"injectables/JwtStrategy.html":{},"modules/MovieModule.html":{},"modules/PersonsModule.html":{},"modules/ProductionHouseModule.html":{},"modules/RateingModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1657,"title":{},"body":{"index.html":{}}}],["lastname",{"_index":615,"title":{},"body":{"injectables/GoogleStrategy.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{}}}],["legend",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MovieDirectorModule.html":{},"modules/MovieGenresModule.html":{},"modules/MovieModule.html":{},"modules/PersonsModule.html":{},"modules/ProductionHouseModule.html":{},"modules/ProfileModule.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":1663,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1640,"title":{},"body":{"index.html":{}}}],["limit",{"_index":33,"title":{},"body":{"classes/APIFeatures.html":{},"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["limitasnumber",{"_index":979,"title":{},"body":{"injectables/MovieService.html":{}}}],["limiting",{"_index":58,"title":{},"body":{"classes/APIFeatures.html":{}}}],["limitquery",{"_index":589,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["limmitfield",{"_index":59,"title":{},"body":{"classes/APIFeatures.html":{}}}],["line",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["link",{"_index":881,"title":{},"body":{"classes/MovieDto.html":{}}}],["list",{"_index":771,"title":{},"body":{"controllers/MovieController.html":{},"miscellaneous/variables.html":{}}}],["literal",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["local",{"_index":684,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localstrategy",{"_index":273,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"modules/GenresModule.html":{},"injectables/LocalStrategy.html":{},"modules/MovieModule.html":{},"modules/PersonsModule.html":{},"modules/ProductionHouseModule.html":{},"modules/RateingModule.html":{},"coverage.html":{},"overview.html":{}}}],["logging",{"_index":598,"title":{},"body":{"injectables/GenresService.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@request",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["mail",{"_index":1733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["male",{"_index":1371,"title":{},"body":{"classes/User.html":{}}}],["manager",{"_index":634,"title":{},"body":{"controllers/HealthController.html":{}}}],["match",{"_index":44,"title":{},"body":{"classes/APIFeatures.html":{},"injectables/AuthService.html":{}}}],["matching",{"_index":79,"title":{},"body":{"classes/APIFeatures.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/FacebookStrategy.html":{},"classes/FileUploadDto.html":{},"classes/Genre.html":{},"classes/GenreDto.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"injectables/MovieActorService.html":{},"controllers/MovieController.html":{},"classes/MovieDirector.html":{},"modules/MovieDirectorModule.html":{},"injectables/MovieDirectorService.html":{},"classes/MovieDto.html":{},"classes/MovieGenre.html":{},"modules/MovieGenresModule.html":{},"injectables/MovieGenresService.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"classes/PersonDto.html":{},"controllers/PersonsController.html":{},"modules/PersonsModule.html":{},"injectables/PersonsService.html":{},"classes/ProductionDto.html":{},"classes/ProductionHouse.html":{},"controllers/ProductionHouseController.html":{},"modules/ProductionHouseModule.html":{},"injectables/ProductionHouseService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/Rate.html":{},"controllers/RateingController.html":{},"modules/RateingModule.html":{},"injectables/RatingService.html":{},"classes/Review.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"classes/SocialUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/actorMovieDTO.html":{},"coverage.html":{},"dependencies.html":{},"classes/directorMovieDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/genreMovieDTO.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["matchroles",{"_index":1354,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["matchroles(roles",{"_index":1352,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/functions.html":{}}}],["message",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":1584,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":11,"title":{},"body":{"classes/APIFeatures.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieActorService.html":{},"controllers/MovieController.html":{},"injectables/MovieDirectorService.html":{},"injectables/MovieGenresService.html":{},"injectables/MovieService.html":{},"controllers/PersonsController.html":{},"injectables/PersonsService.html":{},"controllers/ProductionHouseController.html":{},"injectables/ProductionHouseService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RateingController.html":{},"injectables/RatingService.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":1599,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1639,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1631,"title":{},"body":{"index.html":{}}}],["model",{"_index":454,"title":{},"body":{"classes/Genre.html":{},"injectables/GenresService.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"classes/MovieDirector.html":{},"classes/MovieGenre.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"injectables/PersonsService.html":{},"classes/ProductionHouse.html":{},"injectables/ProductionHouseService.html":{},"classes/Profile.html":{},"classes/Rate.html":{},"classes/Review.html":{},"injectables/ReviewService.html":{},"classes/User.html":{}}}],["module",{"_index":96,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/GenresModule.html":{},"modules/MovieDirectorModule.html":{},"modules/MovieGenresModule.html":{},"modules/MovieModule.html":{},"modules/PersonsModule.html":{},"modules/ProductionHouseModule.html":{},"modules/ProfileModule.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/GenresModule.html":{},"modules/MovieDirectorModule.html":{},"modules/MovieGenresModule.html":{},"modules/MovieModule.html":{},"modules/PersonsModule.html":{},"modules/ProductionHouseModule.html":{},"modules/ProfileModule.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":98,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/GenresModule.html":{},"modules/MovieDirectorModule.html":{},"modules/MovieGenresModule.html":{},"modules/MovieModule.html":{},"modules/PersonsModule.html":{},"modules/ProductionHouseModule.html":{},"modules/ProfileModule.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/genres/genres.module",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/mailer",{"_index":1554,"title":{},"body":{"dependencies.html":{}}}],["modules/movie",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/movie/movie.module",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/persons/persons.module",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/production",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/profile/profile.module",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/rateing/rateing.module",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/review/review.module",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/users/users.module",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":1652,"title":{},"body":{"index.html":{}}}],["movie",{"_index":473,"title":{"classes/Movie.html":{}},"body":{"classes/Genre.html":{},"injectables/GenresService.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"controllers/MovieController.html":{},"classes/MovieDirector.html":{},"modules/MovieDirectorModule.html":{},"injectables/MovieDirectorService.html":{},"classes/MovieDto.html":{},"classes/MovieGenre.html":{},"modules/MovieGenresModule.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"injectables/PersonsService.html":{},"classes/ProductionHouse.html":{},"injectables/ProductionHouseService.html":{},"classes/Rate.html":{},"injectables/RatingService.html":{},"classes/Review.html":{},"injectables/ReviewService.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["movie.averagerating",{"_index":1000,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.controller",{"_index":914,"title":{},"body":{"modules/MovieModule.html":{}}}],["movie.coverphoto",{"_index":839,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["movie.description",{"_index":991,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.entity",{"_index":742,"title":{},"body":{"classes/MovieActor.html":{},"injectables/MovieService.html":{}}}],["movie.findall",{"_index":1004,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.findone",{"_index":1013,"title":{},"body":{"injectables/MovieService.html":{},"miscellaneous/variables.html":{}}}],["movie.id",{"_index":963,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.productionhouseid",{"_index":993,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie.save",{"_index":841,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["movie.service",{"_index":803,"title":{},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{}}}],["movie.title",{"_index":986,"title":{},"body":{"injectables/MovieService.html":{},"miscellaneous/variables.html":{}}}],["movie.trailer",{"_index":989,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie/movie.entity",{"_index":555,"title":{},"body":{"injectables/GenresService.html":{},"classes/MovieDirector.html":{},"classes/MovieGenre.html":{},"classes/Person.html":{},"injectables/PersonsService.html":{},"classes/ProductionHouse.html":{},"injectables/ProductionHouseService.html":{},"classes/Rate.html":{},"injectables/RatingService.html":{},"classes/Review.html":{},"injectables/ReviewService.html":{},"classes/User.html":{}}}],["movie/movie.module",{"_index":1260,"title":{},"body":{"modules/RateingModule.html":{},"modules/UsersModule.html":{}}}],["movie/movie.service",{"_index":1275,"title":{},"body":{"injectables/RatingService.html":{},"injectables/UsersService.html":{}}}],["movie/movieactor.entity",{"_index":1025,"title":{},"body":{"classes/Person.html":{},"injectables/PersonsService.html":{}}}],["movie_genre.dto",{"_index":905,"title":{},"body":{"injectables/MovieGenresService.html":{}}}],["movie_genre.entity",{"_index":906,"title":{},"body":{"injectables/MovieGenresService.html":{}}}],["movie_genre.provider",{"_index":897,"title":{},"body":{"modules/MovieGenresModule.html":{}}}],["movie_repository",{"_index":951,"title":{},"body":{"injectables/MovieService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["movieactor",{"_index":692,"title":{"classes/MovieActor.html":{}},"body":{"classes/Movie.html":{},"classes/MovieActor.html":{},"injectables/MovieActorService.html":{},"injectables/MovieDirectorService.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"injectables/PersonsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["movieactor.entity",{"_index":732,"title":{},"body":{"classes/Movie.html":{},"injectables/MovieActorService.html":{},"injectables/MovieService.html":{}}}],["movieactor.providers",{"_index":917,"title":{},"body":{"modules/MovieModule.html":{}}}],["movieactor.service",{"_index":918,"title":{},"body":{"modules/MovieModule.html":{},"injectables/MovieService.html":{}}}],["movieactor_repository",{"_index":752,"title":{},"body":{"injectables/MovieActorService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["movieactorinstance",{"_index":967,"title":{},"body":{"injectables/MovieService.html":{}}}],["movieactorproviders",{"_index":748,"title":{},"body":{"injectables/MovieActorService.html":{},"modules/MovieModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["movieactorservice",{"_index":743,"title":{"injectables/MovieActorService.html":{}},"body":{"injectables/MovieActorService.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"coverage.html":{},"overview.html":{}}}],["movieactorservices",{"_index":929,"title":{},"body":{"injectables/MovieService.html":{}}}],["moviecontroller",{"_index":757,"title":{"controllers/MovieController.html":{}},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"coverage.html":{}}}],["moviedata",{"_index":939,"title":{},"body":{"injectables/MovieService.html":{}}}],["moviedata.actors",{"_index":964,"title":{},"body":{"injectables/MovieService.html":{}}}],["moviedata.actors.foreach(async",{"_index":965,"title":{},"body":{"injectables/MovieService.html":{}}}],["moviedata.directors",{"_index":970,"title":{},"body":{"injectables/MovieService.html":{}}}],["moviedata.directors.foreach(async",{"_index":971,"title":{},"body":{"injectables/MovieService.html":{}}}],["moviedata.genres",{"_index":973,"title":{},"body":{"injectables/MovieService.html":{}}}],["moviedata.genres.foreach(async",{"_index":974,"title":{},"body":{"injectables/MovieService.html":{}}}],["moviedirector",{"_index":693,"title":{"classes/MovieDirector.html":{}},"body":{"classes/Movie.html":{},"classes/MovieDirector.html":{},"injectables/MovieDirectorService.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"injectables/PersonsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["moviedirector_repository",{"_index":865,"title":{},"body":{"injectables/MovieDirectorService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["moviedirectormodule",{"_index":111,"title":{"modules/MovieDirectorModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MovieDirectorModule.html":{},"modules/MovieModule.html":{},"modules.html":{},"overview.html":{}}}],["moviedirectorproviders",{"_index":857,"title":{},"body":{"modules/MovieDirectorModule.html":{},"injectables/MovieDirectorService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["moviedirectorservice",{"_index":855,"title":{"injectables/MovieDirectorService.html":{}},"body":{"modules/MovieDirectorModule.html":{},"injectables/MovieDirectorService.html":{},"injectables/MovieService.html":{},"coverage.html":{},"overview.html":{}}}],["moviedirectorservices",{"_index":930,"title":{},"body":{"injectables/MovieService.html":{}}}],["moviedto",{"_index":804,"title":{"classes/MovieDto.html":{}},"body":{"controllers/MovieController.html":{},"classes/MovieDto.html":{},"injectables/MovieService.html":{},"coverage.html":{}}}],["moviegenre",{"_index":456,"title":{"classes/MovieGenre.html":{}},"body":{"classes/Genre.html":{},"injectables/GenresService.html":{},"classes/Movie.html":{},"classes/MovieGenre.html":{},"injectables/MovieGenresService.html":{},"injectables/MovieService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["moviegenre_repository",{"_index":904,"title":{},"body":{"injectables/MovieGenresService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["moviegenreproviders",{"_index":896,"title":{},"body":{"modules/MovieGenresModule.html":{},"injectables/MovieGenresService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["moviegenreservices",{"_index":931,"title":{},"body":{"injectables/MovieService.html":{}}}],["moviegenresmodule",{"_index":112,"title":{"modules/MovieGenresModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MovieGenresModule.html":{},"modules/MovieModule.html":{},"modules.html":{},"overview.html":{}}}],["moviegenresservice",{"_index":894,"title":{"injectables/MovieGenresService.html":{}},"body":{"modules/MovieGenresModule.html":{},"injectables/MovieGenresService.html":{},"injectables/MovieService.html":{},"coverage.html":{},"overview.html":{}}}],["movieid",{"_index":737,"title":{},"body":{"classes/MovieActor.html":{},"classes/MovieDirector.html":{},"classes/MovieGenre.html":{},"injectables/MovieService.html":{},"classes/Rate.html":{},"injectables/RatingService.html":{},"classes/Review.html":{},"injectables/ReviewService.html":{},"classes/actorMovieDTO.html":{},"classes/directorMovieDTO.html":{},"classes/genreMovieDTO.html":{}}}],["moviemodule",{"_index":113,"title":{"modules/MovieModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"modules/RateingModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["movierepository",{"_index":933,"title":{},"body":{"injectables/MovieService.html":{}}}],["movies",{"_index":936,"title":{},"body":{"injectables/MovieService.html":{}}}],["movies.foreach((el",{"_index":997,"title":{},"body":{"injectables/MovieService.html":{}}}],["movies.providers",{"_index":916,"title":{},"body":{"modules/MovieModule.html":{}}}],["movieservice",{"_index":802,"title":{"injectables/MovieService.html":{}},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"injectables/RatingService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["movieservices",{"_index":813,"title":{},"body":{"controllers/MovieController.html":{},"injectables/RatingService.html":{},"injectables/UsersService.html":{}}}],["moviesproviders",{"_index":915,"title":{},"body":{"modules/MovieModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["multer",{"_index":796,"title":{},"body":{"controllers/MovieController.html":{},"controllers/ProfileController.html":{}}}],["multermodule",{"_index":921,"title":{},"body":{"modules/MovieModule.html":{},"modules/ProfileModule.html":{}}}],["multermodule.register",{"_index":922,"title":{},"body":{"modules/MovieModule.html":{},"modules/ProfileModule.html":{}}}],["myśliwiec",{"_index":1658,"title":{},"body":{"index.html":{}}}],["name",{"_index":19,"title":{},"body":{"classes/APIFeatures.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"classes/Genre.html":{},"classes/GenreDto.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieActorService.html":{},"controllers/MovieController.html":{},"injectables/MovieDirectorService.html":{},"injectables/MovieGenresService.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"classes/PersonDto.html":{},"controllers/PersonsController.html":{},"injectables/PersonsService.html":{},"classes/ProductionDto.html":{},"classes/ProductionHouse.html":{},"controllers/ProductionHouseController.html":{},"injectables/ProductionHouseService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RateingController.html":{},"injectables/RatingService.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"classes/SocialUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name.familyname",{"_index":616,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["name.givenname",{"_index":427,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["name}${fileextname",{"_index":1017,"title":{},"body":{"injectables/MovieService.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["need",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["nest",{"_index":1621,"title":{},"body":{"index.html":{}}}],["nested",{"_index":594,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["nestframework",{"_index":1662,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1553,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":90,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/FacebookStrategy.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieActorService.html":{},"controllers/MovieController.html":{},"modules/MovieDirectorModule.html":{},"injectables/MovieDirectorService.html":{},"modules/MovieGenresModule.html":{},"injectables/MovieGenresService.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"controllers/PersonsController.html":{},"modules/PersonsModule.html":{},"injectables/PersonsService.html":{},"controllers/ProductionHouseController.html":{},"modules/ProductionHouseModule.html":{},"injectables/ProductionHouseService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/RateingController.html":{},"modules/RateingModule.html":{},"injectables/RatingService.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/common/utils/http",{"_index":1456,"title":{},"body":{"injectables/UsersService.html":{}}}],["nestjs/config",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":282,"title":{},"body":{"modules/AuthModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"modules/RateingModule.html":{},"injectables/RatingService.html":{},"modules/ReviewModule.html":{},"injectables/ReviewService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/ProductionHouseModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":798,"title":{},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"dependencies.html":{}}}],["nestjs/sequelize",{"_index":1560,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":451,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/MovieController.html":{},"classes/MovieDto.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"dependencies.html":{}}}],["new",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newprofile",{"_index":1214,"title":{},"body":{"injectables/ProfileService.html":{}}}],["newuser",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser['datavalues",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["node.js",{"_index":1613,"title":{},"body":{"index.html":{}}}],["node:console",{"_index":1387,"title":{},"body":{"classes/User.html":{}}}],["node:process",{"_index":956,"title":{},"body":{"injectables/MovieService.html":{}}}],["nodemailer",{"_index":1572,"title":{},"body":{"dependencies.html":{}}}],["nodemailer.createtransport",{"_index":1722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nodemailer.gettestmessageurl(info",{"_index":1753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notnull",{"_index":721,"title":{},"body":{"classes/Movie.html":{}}}],["npm",{"_index":1625,"title":{},"body":{"index.html":{}}}],["null",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["number",{"_index":482,"title":{},"body":{"classes/GenreDto.html":{},"injectables/GenresService.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"controllers/MovieController.html":{},"classes/MovieDirector.html":{},"classes/MovieDto.html":{},"classes/MovieGenre.html":{},"injectables/MovieService.html":{},"classes/PersonDto.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"classes/Profile.html":{},"classes/Rate.html":{},"injectables/RatingService.html":{},"classes/Review.html":{},"injectables/ReviewService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"classes/actorMovieDTO.html":{},"classes/directorMovieDTO.html":{},"classes/genreMovieDTO.html":{}}}],["number.isnan(limitasnumber",{"_index":982,"title":{},"body":{"injectables/MovieService.html":{}}}],["number.isnan(pageasnumber",{"_index":981,"title":{},"body":{"injectables/MovieService.html":{}}}],["number.parseint(req.query.limit",{"_index":980,"title":{},"body":{"injectables/MovieService.html":{}}}],["number.parseint(req.query.page",{"_index":978,"title":{},"body":{"injectables/MovieService.html":{}}}],["oauth20",{"_index":607,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["obj",{"_index":512,"title":{},"body":{"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{}}}],["obj.rate",{"_index":1508,"title":{},"body":{"injectables/UsersService.html":{}}}],["obj.userid",{"_index":514,"title":{},"body":{"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{}}}],["object",{"_index":1718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.entries(data).foreach(([key",{"_index":577,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/UsersService.html":{}}}],["observable",{"_index":1343,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/functions.html":{}}}],["offset",{"_index":597,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["offsetquery",{"_index":591,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["ondelete",{"_index":463,"title":{},"body":{"classes/Genre.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"classes/MovieDirector.html":{},"classes/MovieGenre.html":{},"classes/Person.html":{},"classes/Profile.html":{},"classes/Rate.html":{},"classes/Review.html":{},"classes/User.html":{}}}],["op",{"_index":954,"title":{},"body":{"injectables/MovieService.html":{},"injectables/RatingService.html":{},"injectables/UsersService.html":{}}}],["op.gte",{"_index":1002,"title":{},"body":{"injectables/MovieService.html":{}}}],["op.like",{"_index":581,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/UsersService.html":{}}}],["open",{"_index":1641,"title":{},"body":{"index.html":{}}}],["operation",{"_index":678,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["optional",{"_index":21,"title":{},"body":{"classes/APIFeatures.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieActorService.html":{},"controllers/MovieController.html":{},"injectables/MovieDirectorService.html":{},"injectables/MovieGenresService.html":{},"injectables/MovieService.html":{},"controllers/PersonsController.html":{},"injectables/PersonsService.html":{},"controllers/ProductionHouseController.html":{},"injectables/ProductionHouseService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RateingController.html":{},"injectables/RatingService.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":596,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["orderquery",{"_index":587,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["originalname",{"_index":843,"title":{},"body":{"controllers/MovieController.html":{},"controllers/ProfileController.html":{}}}],["out",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MovieDirectorModule.html":{},"modules/MovieGenresModule.html":{},"modules/MovieModule.html":{},"modules/PersonsModule.html":{},"modules/ProductionHouseModule.html":{},"modules/ProfileModule.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1669,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1552,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":31,"title":{},"body":{"classes/APIFeatures.html":{},"injectables/MovieService.html":{}}}],["pageasnumber",{"_index":977,"title":{},"body":{"injectables/MovieService.html":{}}}],["paginate",{"_index":68,"title":{},"body":{"classes/APIFeatures.html":{}}}],["paid",{"_index":694,"title":{},"body":{"classes/Movie.html":{}}}],["param",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{},"controllers/ProfileController.html":{},"controllers/RateingController.html":{},"controllers/ReviewController.html":{}}}],["parameters",{"_index":17,"title":{},"body":{"classes/APIFeatures.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieActorService.html":{},"controllers/MovieController.html":{},"injectables/MovieDirectorService.html":{},"injectables/MovieGenresService.html":{},"injectables/MovieService.html":{},"controllers/PersonsController.html":{},"injectables/PersonsService.html":{},"controllers/ProductionHouseController.html":{},"injectables/ProductionHouseService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RateingController.html":{},"injectables/RatingService.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["pass",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["passport",{"_index":406,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":275,"title":{},"body":{"modules/AuthModule.html":{},"modules/ProductionHouseModule.html":{}}}],["passportstrategy",{"_index":404,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":414,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":792,"title":{},"body":{"controllers/MovieController.html":{},"controllers/ProfileController.html":{}}}],["patch(':id",{"_index":828,"title":{},"body":{"controllers/MovieController.html":{}}}],["path",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"injectables/MovieService.html":{},"injectables/ProfileService.html":{}}}],["payload",{"_index":429,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["perform",{"_index":677,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["person",{"_index":727,"title":{"classes/Person.html":{}},"body":{"classes/Movie.html":{},"classes/MovieActor.html":{},"classes/MovieDirector.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["person.findall",{"_index":1092,"title":{},"body":{"injectables/PersonsService.html":{}}}],["person.length",{"_index":1087,"title":{},"body":{"injectables/PersonsService.html":{}}}],["person_repository",{"_index":1081,"title":{},"body":{"injectables/PersonsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["persondto",{"_index":1026,"title":{"classes/PersonDto.html":{}},"body":{"classes/PersonDto.html":{},"controllers/PersonsController.html":{},"injectables/PersonsService.html":{},"coverage.html":{}}}],["personrepository",{"_index":1070,"title":{},"body":{"injectables/PersonsService.html":{}}}],["persons",{"_index":1034,"title":{},"body":{"controllers/PersonsController.html":{}}}],["persons.controller",{"_index":1063,"title":{},"body":{"modules/PersonsModule.html":{}}}],["persons.entity",{"_index":1080,"title":{},"body":{"injectables/PersonsService.html":{}}}],["persons.providers",{"_index":1065,"title":{},"body":{"modules/PersonsModule.html":{}}}],["persons.service",{"_index":1047,"title":{},"body":{"controllers/PersonsController.html":{},"modules/PersonsModule.html":{}}}],["persons/persons.entity",{"_index":728,"title":{},"body":{"classes/Movie.html":{},"classes/MovieActor.html":{},"classes/MovieDirector.html":{},"injectables/MovieService.html":{}}}],["persons/persons.module",{"_index":919,"title":{},"body":{"modules/MovieModule.html":{}}}],["persons/persons.service",{"_index":753,"title":{},"body":{"injectables/MovieActorService.html":{}}}],["personscontroller",{"_index":1032,"title":{"controllers/PersonsController.html":{}},"body":{"controllers/PersonsController.html":{},"modules/PersonsModule.html":{},"coverage.html":{}}}],["personservices",{"_index":1049,"title":{},"body":{"controllers/PersonsController.html":{}}}],["personsmodule",{"_index":114,"title":{"modules/PersonsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"modules/PersonsModule.html":{},"modules.html":{},"overview.html":{}}}],["personsproviders",{"_index":1064,"title":{},"body":{"modules/PersonsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["personsservice",{"_index":746,"title":{"injectables/PersonsService.html":{}},"body":{"injectables/MovieActorService.html":{},"controllers/PersonsController.html":{},"modules/PersonsModule.html":{},"injectables/PersonsService.html":{},"coverage.html":{},"overview.html":{}}}],["pg",{"_index":1579,"title":{},"body":{"dependencies.html":{}}}],["photo",{"_index":873,"title":{},"body":{"classes/MovieDto.html":{}}}],["photos",{"_index":613,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["photos[0].value",{"_index":618,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["picture",{"_index":617,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["plain",{"_index":1741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":1650,"title":{},"body":{"index.html":{}}}],["port",{"_index":656,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"miscellaneous/variables.html":{}}}],["ports",{"_index":1727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{},"controllers/ProfileController.html":{},"controllers/RateingController.html":{},"controllers/ReviewController.html":{}}}],["post('add",{"_index":510,"title":{},"body":{"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{}}}],["post('coverphoto/:id",{"_index":831,"title":{},"body":{"controllers/MovieController.html":{}}}],["post('login",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('profilepic/:id",{"_index":1179,"title":{},"body":{"controllers/ProfileController.html":{}}}],["post('signup",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GenresController.html":{},"controllers/HealthController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{},"controllers/ProfileController.html":{},"controllers/RateingController.html":{},"controllers/ReviewController.html":{}}}],["preview",{"_index":1747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["price",{"_index":695,"title":{},"body":{"classes/Movie.html":{}}}],["primarykey",{"_index":725,"title":{},"body":{"classes/Movie.html":{},"classes/Rate.html":{},"classes/Review.html":{}}}],["private",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/MovieActorService.html":{},"injectables/MovieDirectorService.html":{},"injectables/MovieGenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/ProfileService.html":{},"injectables/RatingService.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{}}}],["process.env.app_id",{"_index":417,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["process.env.app_secret",{"_index":419,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["process.env.db_dialect",{"_index":1698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_host",{"_index":1696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name_development",{"_index":1695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name_production",{"_index":1700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name_test",{"_index":1699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_pass",{"_index":1694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_port",{"_index":1697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user",{"_index":1693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwtkey",{"_index":287,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{}}}],["process.env.node_env",{"_index":1705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.token_expiration",{"_index":290,"title":{},"body":{"modules/AuthModule.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{}}}],["production",{"_index":651,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"classes/Movie.html":{},"classes/MovieDto.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"controllers/ProductionHouseController.html":{},"modules/ProductionHouseModule.html":{},"injectables/ProductionHouseService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["productiondto",{"_index":1093,"title":{"classes/ProductionDto.html":{}},"body":{"classes/ProductionDto.html":{},"injectables/ProductionHouseService.html":{},"coverage.html":{}}}],["productionhouse",{"_index":696,"title":{"classes/ProductionHouse.html":{}},"body":{"classes/Movie.html":{},"injectables/MovieService.html":{},"classes/ProductionHouse.html":{},"controllers/ProductionHouseController.html":{},"injectables/ProductionHouseService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["productionhouse.dto",{"_index":1138,"title":{},"body":{"injectables/ProductionHouseService.html":{}}}],["productionhouse.findall",{"_index":1149,"title":{},"body":{"injectables/ProductionHouseService.html":{}}}],["productionhouse_repository",{"_index":1137,"title":{},"body":{"injectables/ProductionHouseService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["productionhousecontroller",{"_index":1103,"title":{"controllers/ProductionHouseController.html":{}},"body":{"controllers/ProductionHouseController.html":{},"modules/ProductionHouseModule.html":{},"coverage.html":{}}}],["productionhouseid",{"_index":697,"title":{},"body":{"classes/Movie.html":{},"classes/MovieDto.html":{}}}],["productionhouseid=moviedata.productionhouseid",{"_index":958,"title":{},"body":{"injectables/MovieService.html":{}}}],["productionhousemodule",{"_index":115,"title":{"modules/ProductionHouseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"modules/ProductionHouseModule.html":{},"modules.html":{},"overview.html":{}}}],["productionhouseproviders",{"_index":1125,"title":{},"body":{"modules/ProductionHouseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["productionhouseservice",{"_index":1111,"title":{"injectables/ProductionHouseService.html":{}},"body":{"controllers/ProductionHouseController.html":{},"modules/ProductionHouseModule.html":{},"injectables/ProductionHouseService.html":{},"coverage.html":{},"overview.html":{}}}],["profession",{"_index":1019,"title":{},"body":{"classes/Person.html":{},"classes/PersonDto.html":{}}}],["profile",{"_index":395,"title":{"classes/Profile.html":{}},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["profile.controller",{"_index":1197,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile.entity",{"_index":1210,"title":{},"body":{"injectables/ProfileService.html":{}}}],["profile.firstname",{"_index":1217,"title":{},"body":{"injectables/ProfileService.html":{}}}],["profile.lastname",{"_index":1218,"title":{},"body":{"injectables/ProfileService.html":{}}}],["profile.profilepicture",{"_index":1185,"title":{},"body":{"controllers/ProfileController.html":{}}}],["profile.providers",{"_index":1196,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile.save",{"_index":1186,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["profile.service",{"_index":1174,"title":{},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["profile/profile.entity",{"_index":1390,"title":{},"body":{"classes/User.html":{}}}],["profile_repository",{"_index":1209,"title":{},"body":{"injectables/ProfileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["profilecontroller",{"_index":1157,"title":{"controllers/ProfileController.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"coverage.html":{}}}],["profilefields",{"_index":423,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["profilemodule",{"_index":116,"title":{"modules/ProfileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["profilepicture",{"_index":1151,"title":{},"body":{"classes/Profile.html":{}}}],["profileproviders",{"_index":1195,"title":{},"body":{"modules/ProfileModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["profilerepository",{"_index":1202,"title":{},"body":{"injectables/ProfileService.html":{}}}],["profileservice",{"_index":1173,"title":{"injectables/ProfileService.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["profileservices",{"_index":1176,"title":{},"body":{"controllers/ProfileController.html":{}}}],["progressive",{"_index":1612,"title":{},"body":{"index.html":{}}}],["prohouse",{"_index":1141,"title":{},"body":{"injectables/ProductionHouseService.html":{}}}],["prohouse.length",{"_index":1144,"title":{},"body":{"injectables/ProductionHouseService.html":{}}}],["prohrepository",{"_index":1130,"title":{},"body":{"injectables/ProductionHouseService.html":{}}}],["prohservice",{"_index":1114,"title":{},"body":{"controllers/ProductionHouseController.html":{}}}],["project",{"_index":1642,"title":{},"body":{"index.html":{}}}],["promise",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":8,"title":{},"body":{"classes/APIFeatures.html":{},"classes/FileUploadDto.html":{},"classes/Genre.html":{},"classes/GenreDto.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"classes/MovieDirector.html":{},"classes/MovieDto.html":{},"classes/MovieGenre.html":{},"classes/Person.html":{},"classes/PersonDto.html":{},"classes/ProductionDto.html":{},"classes/ProductionHouse.html":{},"classes/Profile.html":{},"classes/Rate.html":{},"classes/Review.html":{},"classes/SocialUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/actorMovieDTO.html":{},"classes/directorMovieDTO.html":{},"classes/genreMovieDTO.html":{}}}],["provide",{"_index":1701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/GenresModule.html":{},"modules/MovieDirectorModule.html":{},"modules/MovieGenresModule.html":{},"modules/MovieModule.html":{},"modules/PersonsModule.html":{},"modules/ProductionHouseModule.html":{},"modules/ProfileModule.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MovieService.html":{},"classes/actorMovieDTO.html":{},"classes/directorMovieDTO.html":{},"classes/genreMovieDTO.html":{}}}],["put",{"_index":793,"title":{},"body":{"controllers/MovieController.html":{}}}],["query",{"_index":9,"title":{},"body":{"classes/APIFeatures.html":{}}}],["queryobj",{"_index":29,"title":{},"body":{"classes/APIFeatures.html":{}}}],["queryobj[el",{"_index":37,"title":{},"body":{"classes/APIFeatures.html":{}}}],["querystr",{"_index":40,"title":{},"body":{"classes/APIFeatures.html":{}}}],["querystr.replace(/\\b(gte|gt|lte|lt)\\b/g",{"_index":43,"title":{},"body":{"classes/APIFeatures.html":{}}}],["querystr.title",{"_index":46,"title":{},"body":{"classes/APIFeatures.html":{}}}],["querystring",{"_index":10,"title":{},"body":{"classes/APIFeatures.html":{}}}],["rate",{"_index":698,"title":{"classes/Rate.html":{}},"body":{"classes/Movie.html":{},"injectables/MovieService.html":{},"classes/Rate.html":{},"injectables/RatingService.html":{},"injectables/ReviewService.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rate.entity",{"_index":1276,"title":{},"body":{"injectables/RatingService.html":{}}}],["rate.providers",{"_index":1259,"title":{},"body":{"modules/RateingModule.html":{}}}],["rate_repository",{"_index":1274,"title":{},"body":{"injectables/RatingService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rateamovie",{"_index":1262,"title":{},"body":{"injectables/RatingService.html":{}}}],["rateamovie(obj",{"_index":1507,"title":{},"body":{"injectables/UsersService.html":{}}}],["rateamovie(req",{"_index":1268,"title":{},"body":{"injectables/RatingService.html":{}}}],["rateamoviebyamovie",{"_index":1263,"title":{},"body":{"injectables/RatingService.html":{}}}],["rateamoviebyamovie(movieid",{"_index":1270,"title":{},"body":{"injectables/RatingService.html":{}}}],["rateamoviebyauser",{"_index":1264,"title":{},"body":{"injectables/RatingService.html":{}}}],["rateamoviebyauser(userid",{"_index":1272,"title":{},"body":{"injectables/RatingService.html":{}}}],["rateing.controller",{"_index":1257,"title":{},"body":{"modules/RateingModule.html":{}}}],["rateing.service",{"_index":1243,"title":{},"body":{"controllers/RateingController.html":{},"modules/RateingModule.html":{}}}],["rateing/rate.entity",{"_index":730,"title":{},"body":{"classes/Movie.html":{},"classes/User.html":{}}}],["rateingcontroller",{"_index":1230,"title":{"controllers/RateingController.html":{}},"body":{"controllers/RateingController.html":{},"modules/RateingModule.html":{},"coverage.html":{}}}],["rateingmodule",{"_index":117,"title":{"modules/RateingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RateingModule.html":{},"modules.html":{},"overview.html":{}}}],["rateproviders",{"_index":1258,"title":{},"body":{"modules/RateingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["raterepository",{"_index":1266,"title":{},"body":{"injectables/RatingService.html":{}}}],["rateservices",{"_index":1245,"title":{},"body":{"controllers/RateingController.html":{}}}],["ratingservice",{"_index":1242,"title":{"injectables/RatingService.html":{}},"body":{"controllers/RateingController.html":{},"modules/RateingModule.html":{},"injectables/RatingService.html":{},"coverage.html":{},"overview.html":{}}}],["rawtoken",{"_index":1279,"title":{},"body":{"injectables/RatingService.html":{},"injectables/ReviewService.html":{}}}],["rawtoken.split('bearer",{"_index":1281,"title":{},"body":{"injectables/RatingService.html":{},"injectables/ReviewService.html":{}}}],["read",{"_index":1651,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":94,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"classes/GenreDto.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieActorService.html":{},"injectables/MovieDirectorService.html":{},"injectables/MovieGenresService.html":{},"injectables/MovieService.html":{},"classes/PersonDto.html":{},"injectables/PersonsService.html":{},"classes/ProductionDto.html":{},"injectables/ProductionHouseService.html":{},"injectables/RatingService.html":{},"injectables/ReviewService.html":{},"injectables/UsersService.html":{}}}],["receivers",{"_index":1738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":1583,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1337,"title":{},"body":{"guards/RolesGuard.html":{}}}],["refreshtoken",{"_index":394,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["repository",{"_index":1623,"title":{},"body":{"index.html":{}}}],["req",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/PersonsController.html":{},"injectables/PersonsService.html":{},"controllers/ProductionHouseController.html":{},"injectables/ProductionHouseService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RateingController.html":{},"injectables/RatingService.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["req.body",{"_index":513,"title":{},"body":{"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{}}}],["req.body.firstname",{"_index":1212,"title":{},"body":{"injectables/ProfileService.html":{}}}],["req.body.lastname",{"_index":1213,"title":{},"body":{"injectables/ProfileService.html":{}}}],["req.body.movieid",{"_index":1287,"title":{},"body":{"injectables/RatingService.html":{},"injectables/ReviewService.html":{}}}],["req.body.rate",{"_index":1288,"title":{},"body":{"injectables/RatingService.html":{}}}],["req.body.review",{"_index":1330,"title":{},"body":{"injectables/ReviewService.html":{}}}],["req.headers.authorization",{"_index":1280,"title":{},"body":{"injectables/RatingService.html":{},"injectables/ReviewService.html":{}}}],["req.params.id",{"_index":1012,"title":{},"body":{"injectables/MovieService.html":{},"miscellaneous/variables.html":{}}}],["req.query",{"_index":576,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/UsersService.html":{}}}],["req.query.filter",{"_index":574,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["req.user",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["req.user.id",{"_index":515,"title":{},"body":{"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["req.user.name",{"_index":1222,"title":{},"body":{"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["request",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{},"controllers/ProfileController.html":{},"controllers/RateingController.html":{},"controllers/ReviewController.html":{},"guards/RolesGuard.html":{}}}],["request.user",{"_index":1351,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reset",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MovieDirectorModule.html":{},"modules/MovieGenresModule.html":{},"modules/MovieModule.html":{},"modules/PersonsModule.html":{},"modules/ProductionHouseModule.html":{},"modules/ProfileModule.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resettoken",{"_index":1484,"title":{},"body":{"injectables/UsersService.html":{}}}],["resource",{"_index":763,"title":{},"body":{"controllers/MovieController.html":{}}}],["response",{"_index":842,"title":{},"body":{"controllers/MovieController.html":{},"controllers/ProfileController.html":{}}}],["result",{"_index":78,"title":{},"body":{"classes/APIFeatures.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/FacebookStrategy.html":{},"classes/FileUploadDto.html":{},"classes/Genre.html":{},"classes/GenreDto.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"injectables/MovieActorService.html":{},"controllers/MovieController.html":{},"classes/MovieDirector.html":{},"modules/MovieDirectorModule.html":{},"injectables/MovieDirectorService.html":{},"classes/MovieDto.html":{},"classes/MovieGenre.html":{},"modules/MovieGenresModule.html":{},"injectables/MovieGenresService.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"classes/PersonDto.html":{},"controllers/PersonsController.html":{},"modules/PersonsModule.html":{},"injectables/PersonsService.html":{},"classes/ProductionDto.html":{},"classes/ProductionHouse.html":{},"controllers/ProductionHouseController.html":{},"modules/ProductionHouseModule.html":{},"injectables/ProductionHouseService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/Rate.html":{},"controllers/RateingController.html":{},"modules/RateingModule.html":{},"injectables/RatingService.html":{},"classes/Review.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"classes/SocialUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/actorMovieDTO.html":{},"coverage.html":{},"dependencies.html":{},"classes/directorMovieDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/genreMovieDTO.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":80,"title":{},"body":{"classes/APIFeatures.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/FacebookStrategy.html":{},"classes/FileUploadDto.html":{},"classes/Genre.html":{},"classes/GenreDto.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"injectables/MovieActorService.html":{},"controllers/MovieController.html":{},"classes/MovieDirector.html":{},"modules/MovieDirectorModule.html":{},"injectables/MovieDirectorService.html":{},"classes/MovieDto.html":{},"classes/MovieGenre.html":{},"modules/MovieGenresModule.html":{},"injectables/MovieGenresService.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"classes/PersonDto.html":{},"controllers/PersonsController.html":{},"modules/PersonsModule.html":{},"injectables/PersonsService.html":{},"classes/ProductionDto.html":{},"classes/ProductionHouse.html":{},"controllers/ProductionHouseController.html":{},"modules/ProductionHouseModule.html":{},"injectables/ProductionHouseService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/Rate.html":{},"controllers/RateingController.html":{},"modules/RateingModule.html":{},"injectables/RatingService.html":{},"classes/Review.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"classes/SocialUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/actorMovieDTO.html":{},"coverage.html":{},"dependencies.html":{},"classes/directorMovieDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/genreMovieDTO.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":49,"title":{},"body":{"classes/APIFeatures.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieActorService.html":{},"controllers/MovieController.html":{},"injectables/MovieDirectorService.html":{},"injectables/MovieGenresService.html":{},"injectables/MovieService.html":{},"controllers/PersonsController.html":{},"injectables/PersonsService.html":{},"controllers/ProductionHouseController.html":{},"injectables/ProductionHouseService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RateingController.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["return'})@apiforbiddenresponse({description",{"_index":772,"title":{},"body":{"controllers/MovieController.html":{}}}],["returns",{"_index":24,"title":{},"body":{"classes/APIFeatures.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieActorService.html":{},"controllers/MovieController.html":{},"injectables/MovieDirectorService.html":{},"injectables/MovieGenresService.html":{},"injectables/MovieService.html":{},"controllers/PersonsController.html":{},"injectables/PersonsService.html":{},"controllers/ProductionHouseController.html":{},"injectables/ProductionHouseService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RateingController.html":{},"injectables/RatingService.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["reusable",{"_index":1716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["review",{"_index":699,"title":{"classes/Review.html":{}},"body":{"classes/Movie.html":{},"classes/Review.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["review.controller",{"_index":1312,"title":{},"body":{"modules/ReviewModule.html":{}}}],["review.entity",{"_index":1328,"title":{},"body":{"injectables/ReviewService.html":{}}}],["review.providers",{"_index":1314,"title":{},"body":{"modules/ReviewModule.html":{}}}],["review.service",{"_index":1302,"title":{},"body":{"controllers/ReviewController.html":{},"modules/ReviewModule.html":{}}}],["review/review.entity",{"_index":731,"title":{},"body":{"classes/Movie.html":{},"classes/User.html":{}}}],["review_repository",{"_index":1327,"title":{},"body":{"injectables/ReviewService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reviewamovie",{"_index":1316,"title":{},"body":{"injectables/ReviewService.html":{}}}],["reviewamovie(req",{"_index":1321,"title":{},"body":{"injectables/ReviewService.html":{}}}],["reviewamoviebyamovie",{"_index":1317,"title":{},"body":{"injectables/ReviewService.html":{}}}],["reviewamoviebyamovie(movieid",{"_index":1323,"title":{},"body":{"injectables/ReviewService.html":{}}}],["reviewamoviebyauser",{"_index":1318,"title":{},"body":{"injectables/ReviewService.html":{}}}],["reviewamoviebyauser(userid",{"_index":1325,"title":{},"body":{"injectables/ReviewService.html":{}}}],["reviewcontroller",{"_index":1296,"title":{"controllers/ReviewController.html":{}},"body":{"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"coverage.html":{}}}],["reviewmodule",{"_index":118,"title":{"modules/ReviewModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ReviewModule.html":{},"modules.html":{},"overview.html":{}}}],["reviewproviders",{"_index":1313,"title":{},"body":{"modules/ReviewModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reviewrepository",{"_index":1319,"title":{},"body":{"injectables/ReviewService.html":{}}}],["reviewservice",{"_index":1301,"title":{"injectables/ReviewService.html":{}},"body":{"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"injectables/ReviewService.html":{},"coverage.html":{},"overview.html":{}}}],["reviewservices",{"_index":1304,"title":{},"body":{"controllers/ReviewController.html":{}}}],["rimraf",{"_index":1586,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{},"controllers/RateingController.html":{},"controllers/ReviewController.html":{},"classes/User.html":{},"classes/UserDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.admin",{"_index":1396,"title":{},"body":{"classes/User.html":{}}}],["role.user",{"_index":1395,"title":{},"body":{"classes/User.html":{}}}],["roles",{"_index":1347,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/functions.html":{}}}],["roles.enum",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{},"controllers/RateingController.html":{},"controllers/ReviewController.html":{},"classes/User.html":{}}}],["roles.foreach((element",{"_index":1357,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolesguard",{"_index":229,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"controllers/PersonsController.html":{},"modules/PersonsModule.html":{},"controllers/ProductionHouseController.html":{},"modules/ProductionHouseModule.html":{},"controllers/RateingController.html":{},"modules/RateingModule.html":{},"controllers/ReviewController.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"overview.html":{}}}],["rolesguard)@delete(':id",{"_index":496,"title":{},"body":{"controllers/GenresController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{}}}],["rolesguard)@delete(':id')@apiokresponse({description",{"_index":770,"title":{},"body":{"controllers/MovieController.html":{}}}],["rolesguard)@get(':movieid",{"_index":1237,"title":{},"body":{"controllers/RateingController.html":{},"controllers/ReviewController.html":{}}}],["rolesguard)@get('user/:userid",{"_index":1240,"title":{},"body":{"controllers/RateingController.html":{},"controllers/ReviewController.html":{}}}],["rolesguard)@hasroles(role.user)@get('users",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["rolesguard)@patch(':id')@apicreatedresponse({description",{"_index":786,"title":{},"body":{"controllers/MovieController.html":{}}}],["rolesguard)@post('add",{"_index":493,"title":{},"body":{"controllers/GenresController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{}}}],["rolesguard)@post('add')@apicreatedresponse({description",{"_index":762,"title":{},"body":{"controllers/MovieController.html":{}}}],["rolesguard)@post('coverphoto/:id')@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":789,"title":{},"body":{"controllers/MovieController.html":{}}}],["rootpath",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["run",{"_index":1628,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1345,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["s",{"_index":1745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["same",{"_index":960,"title":{},"body":{"injectables/MovieService.html":{}}}],["scalable",{"_index":1617,"title":{},"body":{"index.html":{}}}],["scope",{"_index":422,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["search",{"_index":167,"title":{},"body":{"injectables/AppService.html":{},"injectables/GenresService.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["search(@request",{"_index":821,"title":{},"body":{"controllers/MovieController.html":{}}}],["search(req",{"_index":550,"title":{},"body":{"injectables/GenresService.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/UsersService.html":{}}}],["search.getlimitquery",{"_index":590,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["search.getoffsetquery",{"_index":592,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["search.getorderquery",{"_index":588,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["search.getwherequery",{"_index":586,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["searchbuilder",{"_index":165,"title":{},"body":{"injectables/AppService.html":{},"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["searchbuilder(genre",{"_index":584,"title":{},"body":{"injectables/GenresService.html":{}}}],["searchbuilder(movie",{"_index":1003,"title":{},"body":{"injectables/MovieService.html":{}}}],["searchbuilder(person",{"_index":1091,"title":{},"body":{"injectables/PersonsService.html":{}}}],["searchbuilder(productionhouse",{"_index":1148,"title":{},"body":{"injectables/ProductionHouseService.html":{}}}],["secret",{"_index":286,"title":{},"body":{"modules/AuthModule.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{}}}],["secretorkey",{"_index":673,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":1725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["send",{"_index":1732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sendemail",{"_index":1450,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sendemail(user.email",{"_index":1493,"title":{},"body":{"injectables/UsersService.html":{}}}],["sender",{"_index":1737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sending",{"_index":1748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sent",{"_index":1744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sequelize",{"_index":166,"title":{},"body":{"injectables/AppService.html":{},"classes/Genre.html":{},"injectables/GenresService.html":{},"controllers/HealthController.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"classes/MovieDirector.html":{},"classes/MovieGenre.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"injectables/PersonsService.html":{},"classes/ProductionHouse.html":{},"injectables/ProductionHouseService.html":{},"classes/Profile.html":{},"classes/Rate.html":{},"injectables/RatingService.html":{},"classes/Review.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["sequelize(config",{"_index":1711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sequelize.addmodels",{"_index":1712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sequelize.sync",{"_index":1713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sequelize/types",{"_index":1454,"title":{},"body":{"injectables/UsersService.html":{}}}],["sequelize/types/lib/connection",{"_index":633,"title":{},"body":{"controllers/HealthController.html":{}}}],["sequelizehealthindicator",{"_index":631,"title":{},"body":{"controllers/HealthController.html":{}}}],["server",{"_index":1618,"title":{},"body":{"index.html":{}}}],["servestaticmodule",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["setmetadata('roles",{"_index":1715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":1619,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":288,"title":{},"body":{"modules/AuthModule.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{}}}],["signup",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(@body",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(user",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["skip",{"_index":74,"title":{},"body":{"classes/APIFeatures.html":{}}}],["smtp",{"_index":1720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["smtp.mailtrap.io",{"_index":1723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["socialuserdto",{"_index":411,"title":{"classes/SocialUserDto.html":{}},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/SocialUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["sort",{"_index":32,"title":{},"body":{"classes/APIFeatures.html":{}}}],["sortby",{"_index":52,"title":{},"body":{"classes/APIFeatures.html":{}}}],["sorting",{"_index":50,"title":{},"body":{"classes/APIFeatures.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/APIFeatures.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/FacebookStrategy.html":{},"classes/FileUploadDto.html":{},"classes/Genre.html":{},"classes/GenreDto.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"injectables/MovieActorService.html":{},"controllers/MovieController.html":{},"classes/MovieDirector.html":{},"modules/MovieDirectorModule.html":{},"injectables/MovieDirectorService.html":{},"classes/MovieDto.html":{},"classes/MovieGenre.html":{},"modules/MovieGenresModule.html":{},"injectables/MovieGenresService.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"classes/PersonDto.html":{},"controllers/PersonsController.html":{},"modules/PersonsModule.html":{},"injectables/PersonsService.html":{},"classes/ProductionDto.html":{},"classes/ProductionHouse.html":{},"controllers/ProductionHouseController.html":{},"modules/ProductionHouseModule.html":{},"injectables/ProductionHouseService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/Rate.html":{},"controllers/RateingController.html":{},"modules/RateingModule.html":{},"injectables/RatingService.html":{},"classes/Review.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"classes/SocialUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/actorMovieDTO.html":{},"classes/directorMovieDTO.html":{},"classes/genreMovieDTO.html":{},"index.html":{}}}],["sponsors",{"_index":1645,"title":{},"body":{"index.html":{}}}],["src/.../database.config.ts",{"_index":1675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.providers.ts",{"_index":1676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../genre.provider.ts",{"_index":1680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":1677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1606,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../movie",{"_index":1683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../movie.service.ts",{"_index":1678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../movie_genre.provider.ts",{"_index":1684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../movieactor.providers.ts",{"_index":1682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../movies.providers.ts",{"_index":1685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../persons.providers.ts",{"_index":1686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../production",{"_index":1687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../profile.providers.ts",{"_index":1688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../profile.service.ts",{"_index":1679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../rate.providers.ts",{"_index":1689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../review.providers.ts",{"_index":1690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles",{"_index":1607,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.decorators.ts",{"_index":1681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.enum.ts",{"_index":1601,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../sendmail.ts",{"_index":1691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.providers.ts",{"_index":1692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":87,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":163,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:6",{"_index":164,"title":{},"body":{"injectables/AppService.html":{}}}],["src/core/constants",{"_index":554,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieActorService.html":{},"injectables/MovieDirectorService.html":{},"injectables/MovieGenresService.html":{},"injectables/ProductionHouseService.html":{},"injectables/ProfileService.html":{},"injectables/RatingService.html":{},"injectables/ReviewService.html":{}}}],["src/core/constants/index.ts",{"_index":1517,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/database/database.config.ts",{"_index":1520,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/database/database.module.ts",{"_index":386,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/core/database/database.providers",{"_index":635,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/core/database/database.providers.ts",{"_index":1522,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/database/dbconfig.interface.ts",{"_index":649,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"coverage.html":{}}}],["src/health/health.controller.ts",{"_index":620,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:21",{"_index":625,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:28",{"_index":627,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/main.ts",{"_index":1526,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:30",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:35",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:39",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:46",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:53",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:57",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:62",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:67",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":274,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:10",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:104",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:128",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:133",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:138",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:27",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:30",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:40",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:53",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:63",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:65",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:71",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:89",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/decorators/roles.decorators.ts",{"_index":1528,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/guards/jwt",{"_index":660,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/roles",{"_index":1334,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/auth/strategy/facebook.strategy.ts",{"_index":389,"title":{},"body":{"injectables/FacebookStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategy/facebook.strategy.ts:11",{"_index":391,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["src/modules/auth/strategy/facebook.strategy.ts:24",{"_index":401,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["src/modules/auth/strategy/facebook.strategy.ts:57",{"_index":392,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["src/modules/auth/strategy/google.strategy.ts",{"_index":600,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategy/google.strategy.ts:13",{"_index":601,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/modules/auth/strategy/google.strategy.ts:27",{"_index":604,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/modules/auth/strategy/google.strategy.ts:57",{"_index":602,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/modules/auth/strategy/jwt.strategy.ts",{"_index":663,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategy/jwt.strategy.ts:16",{"_index":666,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategy/jwt.strategy.ts:7",{"_index":664,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategy/local.strategy.ts",{"_index":679,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategy/local.strategy.ts:12",{"_index":683,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/strategy/local.strategy.ts:7",{"_index":681,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/genres/genre.dto.ts",{"_index":478,"title":{},"body":{"classes/GenreDto.html":{},"coverage.html":{}}}],["src/modules/genres/genre.dto.ts:2",{"_index":481,"title":{},"body":{"classes/GenreDto.html":{}}}],["src/modules/genres/genre.dto.ts:3",{"_index":480,"title":{},"body":{"classes/GenreDto.html":{}}}],["src/modules/genres/genre.dto.ts:4",{"_index":483,"title":{},"body":{"classes/GenreDto.html":{}}}],["src/modules/genres/genre.entity.ts",{"_index":453,"title":{},"body":{"classes/Genre.html":{},"coverage.html":{}}}],["src/modules/genres/genre.entity.ts:11",{"_index":467,"title":{},"body":{"classes/Genre.html":{}}}],["src/modules/genres/genre.entity.ts:17",{"_index":461,"title":{},"body":{"classes/Genre.html":{}}}],["src/modules/genres/genre.entity.ts:20",{"_index":465,"title":{},"body":{"classes/Genre.html":{}}}],["src/modules/genres/genre.provider.ts",{"_index":1529,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/genres/genres.controller.ts",{"_index":485,"title":{},"body":{"controllers/GenresController.html":{},"coverage.html":{}}}],["src/modules/genres/genres.controller.ts:25",{"_index":494,"title":{},"body":{"controllers/GenresController.html":{}}}],["src/modules/genres/genres.controller.ts:31",{"_index":498,"title":{},"body":{"controllers/GenresController.html":{}}}],["src/modules/genres/genres.controller.ts:35",{"_index":501,"title":{},"body":{"controllers/GenresController.html":{}}}],["src/modules/genres/genres.controller.ts:42",{"_index":497,"title":{},"body":{"controllers/GenresController.html":{}}}],["src/modules/genres/genres.module.ts",{"_index":526,"title":{},"body":{"modules/GenresModule.html":{}}}],["src/modules/genres/genres.service.ts",{"_index":533,"title":{},"body":{"injectables/GenresService.html":{},"coverage.html":{}}}],["src/modules/genres/genres.service.ts:10",{"_index":539,"title":{},"body":{"injectables/GenresService.html":{}}}],["src/modules/genres/genres.service.ts:15",{"_index":542,"title":{},"body":{"injectables/GenresService.html":{}}}],["src/modules/genres/genres.service.ts:20",{"_index":545,"title":{},"body":{"injectables/GenresService.html":{}}}],["src/modules/genres/genres.service.ts:30",{"_index":549,"title":{},"body":{"injectables/GenresService.html":{}}}],["src/modules/genres/genres.service.ts:42",{"_index":547,"title":{},"body":{"injectables/GenresService.html":{}}}],["src/modules/genres/genres.service.ts:54",{"_index":544,"title":{},"body":{"injectables/GenresService.html":{}}}],["src/modules/genres/genres.service.ts:69",{"_index":551,"title":{},"body":{"injectables/GenresService.html":{}}}],["src/modules/movie",{"_index":845,"title":{},"body":{"classes/MovieDirector.html":{},"modules/MovieDirectorModule.html":{},"injectables/MovieDirectorService.html":{},"classes/MovieGenre.html":{},"modules/MovieGenresModule.html":{},"injectables/MovieGenresService.html":{},"coverage.html":{},"classes/directorMovieDTO.html":{},"classes/genreMovieDTO.html":{},"miscellaneous/variables.html":{}}}],["src/modules/movie/actormovie.dto.ts",{"_index":1509,"title":{},"body":{"classes/actorMovieDTO.html":{},"coverage.html":{}}}],["src/modules/movie/actormovie.dto.ts:2",{"_index":1510,"title":{},"body":{"classes/actorMovieDTO.html":{}}}],["src/modules/movie/actormovie.dto.ts:3",{"_index":1511,"title":{},"body":{"classes/actorMovieDTO.html":{}}}],["src/modules/movie/fileuploaddto.ts",{"_index":445,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["src/modules/movie/fileuploaddto.ts:5",{"_index":449,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["src/modules/movie/movie.controller.ts",{"_index":758,"title":{},"body":{"controllers/MovieController.html":{},"coverage.html":{}}}],["src/modules/movie/movie.controller.ts:102",{"_index":787,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/modules/movie/movie.controller.ts:125",{"_index":791,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/modules/movie/movie.controller.ts:43",{"_index":768,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/modules/movie/movie.controller.ts:55",{"_index":776,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/modules/movie/movie.controller.ts:64",{"_index":782,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/modules/movie/movie.controller.ts:73",{"_index":784,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/modules/movie/movie.controller.ts:82",{"_index":779,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/modules/movie/movie.controller.ts:92",{"_index":773,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/modules/movie/movie.entity.ts",{"_index":689,"title":{},"body":{"classes/Movie.html":{},"coverage.html":{}}}],["src/modules/movie/movie.entity.ts:30",{"_index":716,"title":{},"body":{"classes/Movie.html":{}}}],["src/modules/movie/movie.entity.ts:36",{"_index":703,"title":{},"body":{"classes/Movie.html":{}}}],["src/modules/movie/movie.entity.ts:40",{"_index":717,"title":{},"body":{"classes/Movie.html":{}}}],["src/modules/movie/movie.entity.ts:44",{"_index":704,"title":{},"body":{"classes/Movie.html":{}}}],["src/modules/movie/movie.entity.ts:49",{"_index":702,"title":{},"body":{"classes/Movie.html":{}}}],["src/modules/movie/movie.entity.ts:55",{"_index":708,"title":{},"body":{"classes/Movie.html":{}}}],["src/modules/movie/movie.entity.ts:59",{"_index":709,"title":{},"body":{"classes/Movie.html":{}}}],["src/modules/movie/movie.entity.ts:65",{"_index":713,"title":{},"body":{"classes/Movie.html":{}}}],["src/modules/movie/movie.entity.ts:72",{"_index":719,"title":{},"body":{"classes/Movie.html":{}}}],["src/modules/movie/movie.entity.ts:75",{"_index":718,"title":{},"body":{"classes/Movie.html":{}}}],["src/modules/movie/movie.entity.ts:77",{"_index":714,"title":{},"body":{"classes/Movie.html":{}}}],["src/modules/movie/movie.entity.ts:79",{"_index":715,"title":{},"body":{"classes/Movie.html":{}}}],["src/modules/movie/movie.entity.ts:81",{"_index":711,"title":{},"body":{"classes/Movie.html":{}}}],["src/modules/movie/movie.entity.ts:84",{"_index":705,"title":{},"body":{"classes/Movie.html":{}}}],["src/modules/movie/movie.entity.ts:87",{"_index":706,"title":{},"body":{"classes/Movie.html":{}}}],["src/modules/movie/movie.entity.ts:90",{"_index":707,"title":{},"body":{"classes/Movie.html":{}}}],["src/modules/movie/movie.module.ts",{"_index":913,"title":{},"body":{"modules/MovieModule.html":{}}}],["src/modules/movie/movie.service.ts",{"_index":924,"title":{},"body":{"injectables/MovieService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/movie/movie.service.ts:100",{"_index":946,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/modules/movie/movie.service.ts:111",{"_index":943,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/modules/movie/movie.service.ts:139",{"_index":941,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/modules/movie/movie.service.ts:155",{"_index":950,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/modules/movie/movie.service.ts:177",{"_index":935,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/modules/movie/movie.service.ts:192",{"_index":945,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/modules/movie/movie.service.ts:202",{"_index":949,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/modules/movie/movie.service.ts:22",{"_index":932,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/modules/movie/movie.service.ts:31",{"_index":938,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/modules/movie/movie.service.ts:89",{"_index":948,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/modules/movie/movieactor.entity.ts",{"_index":735,"title":{},"body":{"classes/MovieActor.html":{},"coverage.html":{}}}],["src/modules/movie/movieactor.entity.ts:19",{"_index":738,"title":{},"body":{"classes/MovieActor.html":{}}}],["src/modules/movie/movieactor.entity.ts:22",{"_index":741,"title":{},"body":{"classes/MovieActor.html":{}}}],["src/modules/movie/movieactor.entity.ts:29",{"_index":740,"title":{},"body":{"classes/MovieActor.html":{}}}],["src/modules/movie/movieactor.entity.ts:31",{"_index":739,"title":{},"body":{"classes/MovieActor.html":{}}}],["src/modules/movie/movieactor.providers.ts",{"_index":1536,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/movie/movieactor.service.ts",{"_index":744,"title":{},"body":{"injectables/MovieActorService.html":{},"coverage.html":{}}}],["src/modules/movie/movieactor.service.ts:16",{"_index":751,"title":{},"body":{"injectables/MovieActorService.html":{}}}],["src/modules/movie/movieactor.service.ts:9",{"_index":747,"title":{},"body":{"injectables/MovieActorService.html":{}}}],["src/modules/movie/moviedto.ts",{"_index":868,"title":{},"body":{"classes/MovieDto.html":{},"coverage.html":{}}}],["src/modules/movie/moviedto.ts:15",{"_index":874,"title":{},"body":{"classes/MovieDto.html":{}}}],["src/modules/movie/moviedto.ts:21",{"_index":882,"title":{},"body":{"classes/MovieDto.html":{}}}],["src/modules/movie/moviedto.ts:27",{"_index":875,"title":{},"body":{"classes/MovieDto.html":{}}}],["src/modules/movie/moviedto.ts:33",{"_index":879,"title":{},"body":{"classes/MovieDto.html":{}}}],["src/modules/movie/moviedto.ts:39",{"_index":871,"title":{},"body":{"classes/MovieDto.html":{}}}],["src/modules/movie/moviedto.ts:45",{"_index":876,"title":{},"body":{"classes/MovieDto.html":{}}}],["src/modules/movie/moviedto.ts:51",{"_index":877,"title":{},"body":{"classes/MovieDto.html":{}}}],["src/modules/movie/moviedto.ts:53",{"_index":883,"title":{},"body":{"classes/MovieDto.html":{}}}],["src/modules/movie/moviedto.ts:9",{"_index":880,"title":{},"body":{"classes/MovieDto.html":{}}}],["src/modules/movie/movies.providers.ts",{"_index":1540,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/persons/persondto.ts",{"_index":1027,"title":{},"body":{"classes/PersonDto.html":{},"coverage.html":{}}}],["src/modules/persons/persondto.ts:2",{"_index":1029,"title":{},"body":{"classes/PersonDto.html":{}}}],["src/modules/persons/persondto.ts:3",{"_index":1028,"title":{},"body":{"classes/PersonDto.html":{}}}],["src/modules/persons/persondto.ts:4",{"_index":1030,"title":{},"body":{"classes/PersonDto.html":{}}}],["src/modules/persons/persondto.ts:5",{"_index":1031,"title":{},"body":{"classes/PersonDto.html":{}}}],["src/modules/persons/persons.controller.ts",{"_index":1033,"title":{},"body":{"controllers/PersonsController.html":{},"coverage.html":{}}}],["src/modules/persons/persons.controller.ts:25",{"_index":1037,"title":{},"body":{"controllers/PersonsController.html":{}}}],["src/modules/persons/persons.controller.ts:32",{"_index":1039,"title":{},"body":{"controllers/PersonsController.html":{}}}],["src/modules/persons/persons.controller.ts:36",{"_index":1043,"title":{},"body":{"controllers/PersonsController.html":{}}}],["src/modules/persons/persons.controller.ts:40",{"_index":1042,"title":{},"body":{"controllers/PersonsController.html":{}}}],["src/modules/persons/persons.controller.ts:44",{"_index":1046,"title":{},"body":{"controllers/PersonsController.html":{}}}],["src/modules/persons/persons.controller.ts:50",{"_index":1038,"title":{},"body":{"controllers/PersonsController.html":{}}}],["src/modules/persons/persons.entity.ts",{"_index":1018,"title":{},"body":{"classes/Person.html":{},"coverage.html":{}}}],["src/modules/persons/persons.entity.ts:21",{"_index":1023,"title":{},"body":{"classes/Person.html":{}}}],["src/modules/persons/persons.entity.ts:27",{"_index":1020,"title":{},"body":{"classes/Person.html":{}}}],["src/modules/persons/persons.entity.ts:32",{"_index":1024,"title":{},"body":{"classes/Person.html":{}}}],["src/modules/persons/persons.entity.ts:35",{"_index":1022,"title":{},"body":{"classes/Person.html":{}}}],["src/modules/persons/persons.entity.ts:37",{"_index":1021,"title":{},"body":{"classes/Person.html":{}}}],["src/modules/persons/persons.module.ts",{"_index":1062,"title":{},"body":{"modules/PersonsModule.html":{}}}],["src/modules/persons/persons.providers.ts",{"_index":1543,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/persons/persons.service.ts",{"_index":1066,"title":{},"body":{"injectables/PersonsService.html":{},"coverage.html":{}}}],["src/modules/persons/persons.service.ts:11",{"_index":1069,"title":{},"body":{"injectables/PersonsService.html":{}}}],["src/modules/persons/persons.service.ts:16",{"_index":1072,"title":{},"body":{"injectables/PersonsService.html":{}}}],["src/modules/persons/persons.service.ts:21",{"_index":1074,"title":{},"body":{"injectables/PersonsService.html":{}}}],["src/modules/persons/persons.service.ts:36",{"_index":1076,"title":{},"body":{"injectables/PersonsService.html":{}}}],["src/modules/persons/persons.service.ts:50",{"_index":1078,"title":{},"body":{"injectables/PersonsService.html":{}}}],["src/modules/persons/persons.service.ts:64",{"_index":1077,"title":{},"body":{"injectables/PersonsService.html":{}}}],["src/modules/persons/persons.service.ts:75",{"_index":1073,"title":{},"body":{"injectables/PersonsService.html":{}}}],["src/modules/persons/persons.service.ts:90",{"_index":1079,"title":{},"body":{"injectables/PersonsService.html":{}}}],["src/modules/production",{"_index":1094,"title":{},"body":{"classes/ProductionDto.html":{},"classes/ProductionHouse.html":{},"controllers/ProductionHouseController.html":{},"modules/ProductionHouseModule.html":{},"injectables/ProductionHouseService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/profile/profile.controller.ts",{"_index":1158,"title":{},"body":{"controllers/ProfileController.html":{},"coverage.html":{}}}],["src/modules/profile/profile.controller.ts:27",{"_index":1165,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.controller.ts:42",{"_index":1172,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.controller.ts:58",{"_index":1167,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.controller.ts:62",{"_index":1169,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.entity.ts",{"_index":1150,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{}}}],["src/modules/profile/profile.entity.ts:17",{"_index":1152,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:22",{"_index":1153,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:30",{"_index":1156,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:34",{"_index":1154,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:37",{"_index":1155,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.module.ts",{"_index":1194,"title":{},"body":{"modules/ProfileModule.html":{}}}],["src/modules/profile/profile.providers.ts",{"_index":1545,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/profile/profile.service.ts",{"_index":1198,"title":{},"body":{"injectables/ProfileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/profile/profile.service.ts:12",{"_index":1204,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:22",{"_index":1208,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:36",{"_index":1206,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:7",{"_index":1201,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/rateing/rate.entity.ts",{"_index":1223,"title":{},"body":{"classes/Rate.html":{},"coverage.html":{}}}],["src/modules/rateing/rate.entity.ts:18",{"_index":1227,"title":{},"body":{"classes/Rate.html":{}}}],["src/modules/rateing/rate.entity.ts:26",{"_index":1226,"title":{},"body":{"classes/Rate.html":{}}}],["src/modules/rateing/rate.entity.ts:29",{"_index":1224,"title":{},"body":{"classes/Rate.html":{}}}],["src/modules/rateing/rate.entity.ts:37",{"_index":1229,"title":{},"body":{"classes/Rate.html":{}}}],["src/modules/rateing/rate.entity.ts:40",{"_index":1228,"title":{},"body":{"classes/Rate.html":{}}}],["src/modules/rateing/rate.providers.ts",{"_index":1546,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/rateing/rateing.controller.ts",{"_index":1231,"title":{},"body":{"controllers/RateingController.html":{},"coverage.html":{}}}],["src/modules/rateing/rateing.controller.ts:20",{"_index":1235,"title":{},"body":{"controllers/RateingController.html":{}}}],["src/modules/rateing/rateing.controller.ts:26",{"_index":1238,"title":{},"body":{"controllers/RateingController.html":{}}}],["src/modules/rateing/rateing.controller.ts:33",{"_index":1241,"title":{},"body":{"controllers/RateingController.html":{}}}],["src/modules/rateing/rateing.module.ts",{"_index":1256,"title":{},"body":{"modules/RateingModule.html":{}}}],["src/modules/rateing/rateing.service.ts",{"_index":1261,"title":{},"body":{"injectables/RatingService.html":{},"coverage.html":{}}}],["src/modules/rateing/rateing.service.ts:11",{"_index":1267,"title":{},"body":{"injectables/RatingService.html":{}}}],["src/modules/rateing/rateing.service.ts:17",{"_index":1269,"title":{},"body":{"injectables/RatingService.html":{}}}],["src/modules/rateing/rateing.service.ts:45",{"_index":1273,"title":{},"body":{"injectables/RatingService.html":{}}}],["src/modules/rateing/rateing.service.ts:57",{"_index":1271,"title":{},"body":{"injectables/RatingService.html":{}}}],["src/modules/review/review.controller.ts",{"_index":1297,"title":{},"body":{"controllers/ReviewController.html":{},"coverage.html":{}}}],["src/modules/review/review.controller.ts:21",{"_index":1298,"title":{},"body":{"controllers/ReviewController.html":{}}}],["src/modules/review/review.controller.ts:28",{"_index":1299,"title":{},"body":{"controllers/ReviewController.html":{}}}],["src/modules/review/review.controller.ts:35",{"_index":1300,"title":{},"body":{"controllers/ReviewController.html":{}}}],["src/modules/review/review.entity.ts",{"_index":1290,"title":{},"body":{"classes/Review.html":{},"coverage.html":{}}}],["src/modules/review/review.entity.ts:18",{"_index":1293,"title":{},"body":{"classes/Review.html":{}}}],["src/modules/review/review.entity.ts:26",{"_index":1292,"title":{},"body":{"classes/Review.html":{}}}],["src/modules/review/review.entity.ts:29",{"_index":1291,"title":{},"body":{"classes/Review.html":{}}}],["src/modules/review/review.entity.ts:37",{"_index":1295,"title":{},"body":{"classes/Review.html":{}}}],["src/modules/review/review.entity.ts:40",{"_index":1294,"title":{},"body":{"classes/Review.html":{}}}],["src/modules/review/review.module.ts",{"_index":1311,"title":{},"body":{"modules/ReviewModule.html":{}}}],["src/modules/review/review.providers.ts",{"_index":1547,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/review/review.service.ts",{"_index":1315,"title":{},"body":{"injectables/ReviewService.html":{},"coverage.html":{}}}],["src/modules/review/review.service.ts:15",{"_index":1322,"title":{},"body":{"injectables/ReviewService.html":{}}}],["src/modules/review/review.service.ts:29",{"_index":1326,"title":{},"body":{"injectables/ReviewService.html":{}}}],["src/modules/review/review.service.ts:41",{"_index":1324,"title":{},"body":{"injectables/ReviewService.html":{}}}],["src/modules/review/review.service.ts:9",{"_index":1320,"title":{},"body":{"injectables/ReviewService.html":{}}}],["src/modules/roles.enum.ts",{"_index":1602,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/users/dto/socialuserdto",{"_index":412,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["src/modules/users/dto/socialuserdto.ts",{"_index":1358,"title":{},"body":{"classes/SocialUserDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/socialuserdto.ts:2",{"_index":1362,"title":{},"body":{"classes/SocialUserDto.html":{}}}],["src/modules/users/dto/socialuserdto.ts:3",{"_index":1361,"title":{},"body":{"classes/SocialUserDto.html":{}}}],["src/modules/users/dto/socialuserdto.ts:4",{"_index":1360,"title":{},"body":{"classes/SocialUserDto.html":{}}}],["src/modules/users/dto/socialuserdto.ts:5",{"_index":1359,"title":{},"body":{"classes/SocialUserDto.html":{}}}],["src/modules/users/dto/user.dto",{"_index":408,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["src/modules/users/dto/user.dto.ts",{"_index":1400,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/user.dto.ts:2",{"_index":1405,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dto/user.dto.ts:3",{"_index":1403,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dto/user.dto.ts:4",{"_index":1406,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dto/user.dto.ts:5",{"_index":1404,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dto/user.dto.ts:6",{"_index":1407,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dto/user.dto.ts:7",{"_index":1402,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dto/user.dto.ts:8",{"_index":1401,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/user.entity",{"_index":409,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["src/modules/users/user.entity.ts",{"_index":1363,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/modules/users/user.entity.ts:26",{"_index":1375,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.entity.ts:33",{"_index":1369,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.entity.ts:38",{"_index":1376,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.entity.ts:45",{"_index":1372,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.entity.ts:52",{"_index":1380,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.entity.ts:56",{"_index":1367,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.entity.ts:61",{"_index":1366,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.entity.ts:66",{"_index":1368,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.entity.ts:71",{"_index":1381,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.entity.ts:75",{"_index":1382,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.entity.ts:78",{"_index":1374,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.entity.ts:80",{"_index":1377,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.entity.ts:82",{"_index":1378,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.entity.ts:84",{"_index":1379,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.entity.ts:87",{"_index":1385,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.providers.ts",{"_index":1549,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/users.module.ts",{"_index":1418,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.service",{"_index":410,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"guards/RolesGuard.html":{}}}],["src/modules/users/users.service.ts",{"_index":1422,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/users/users.service.ts:114",{"_index":1445,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:145",{"_index":1442,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:23",{"_index":1428,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:36",{"_index":1431,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:65",{"_index":1439,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:68",{"_index":1437,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:86",{"_index":1440,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:90",{"_index":1441,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:93",{"_index":1435,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:96",{"_index":1434,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/uploads",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{}}}],["src/utlis/apifeature",{"_index":955,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/utlis/apifeature.ts",{"_index":6,"title":{},"body":{"classes/APIFeatures.html":{},"coverage.html":{}}}],["src/utlis/apifeature.ts:11",{"_index":23,"title":{},"body":{"classes/APIFeatures.html":{}}}],["src/utlis/apifeature.ts:4",{"_index":22,"title":{},"body":{"classes/APIFeatures.html":{}}}],["src/utlis/apifeature.ts:5",{"_index":16,"title":{},"body":{"classes/APIFeatures.html":{}}}],["src/utlis/confirmemaillink",{"_index":1460,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utlis/sendmail",{"_index":1451,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utlis/sendmail.ts",{"_index":1550,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":1629,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1632,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1633,"title":{},"body":{"index.html":{}}}],["started",{"_index":1611,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1622,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1515,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"classes/User.html":{},"dependencies.html":{}}}],["statuscode",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["stay",{"_index":1654,"title":{},"body":{"index.html":{}}}],["storage",{"_index":833,"title":{},"body":{"controllers/MovieController.html":{},"controllers/ProfileController.html":{}}}],["strategy",{"_index":405,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["strategy/facebook.strategy",{"_index":284,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/google.strategy",{"_index":283,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/jwt.strategy",{"_index":279,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/local.strategy",{"_index":278,"title":{},"body":{"modules/AuthModule.html":{}}}],["string",{"_index":88,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"classes/FileUploadDto.html":{},"classes/Genre.html":{},"classes/GenreDto.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"injectables/LocalStrategy.html":{},"classes/Movie.html":{},"controllers/MovieController.html":{},"classes/MovieDto.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"classes/PersonDto.html":{},"injectables/PersonsService.html":{},"classes/ProductionDto.html":{},"classes/ProductionHouse.html":{},"injectables/ProductionHouseService.html":{},"classes/Profile.html":{},"classes/Review.html":{},"guards/RolesGuard.html":{},"classes/SocialUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":1739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["successfully",{"_index":765,"title":{},"body":{"controllers/MovieController.html":{}}}],["super",{"_index":415,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":1646,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1665,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1594,"title":{},"body":{"dependencies.html":{}}}],["switch",{"_index":1704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":471,"title":{},"body":{"classes/Genre.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"classes/MovieDirector.html":{},"classes/MovieGenre.html":{},"classes/Person.html":{},"classes/ProductionHouse.html":{},"classes/Profile.html":{},"classes/Rate.html":{},"classes/Review.html":{},"classes/User.html":{},"coverage.html":{}}}],["tablename",{"_index":1391,"title":{},"body":{"classes/User.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1551,"title":{},"body":{"coverage.html":{}}}],["terminusmodule",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["test",{"_index":652,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["test:covsupport",{"_index":1638,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1637,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1635,"title":{},"body":{"index.html":{}}}],["text",{"_index":1740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["thanks",{"_index":1644,"title":{},"body":{"index.html":{}}}],["then((result",{"_index":571,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["then((u",{"_index":573,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["this.accountid",{"_index":1414,"title":{},"body":{"classes/UserDto.html":{}}}],["this.accountwith",{"_index":1413,"title":{},"body":{"classes/UserDto.html":{}}}],["this.appservice.gethello",{"_index":95,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.create(user",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.facebooklogin(req",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getusers",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.googlelogin(req",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(req.user",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(username",{"_index":686,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authservice.verification(params.token",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.comparepassword(pass",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.db.pingcheck('sequelize",{"_index":645,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.email",{"_index":1409,"title":{},"body":{"classes/UserDto.html":{}}}],["this.findonebyaccountid",{"_index":1500,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findonebyemail(creatuserdto.email",{"_index":1467,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findonebyid(id",{"_index":994,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["this.findonebyid(user.id",{"_index":1462,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.gender",{"_index":1411,"title":{},"body":{"classes/UserDto.html":{}}}],["this.generatetoken(result",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["this.generatetoken(user",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.genrerepository",{"_index":569,"title":{},"body":{"injectables/GenresService.html":{}}}],["this.genrerepository.create",{"_index":559,"title":{},"body":{"injectables/GenresService.html":{}}}],["this.genrerepository.destroy",{"_index":572,"title":{},"body":{"injectables/GenresService.html":{}}}],["this.genrerepository.findall",{"_index":561,"title":{},"body":{"injectables/GenresService.html":{}}}],["this.genrerepository.findone",{"_index":568,"title":{},"body":{"injectables/GenresService.html":{}}}],["this.genresservice.create(obj",{"_index":516,"title":{},"body":{"controllers/GenresController.html":{}}}],["this.genresservice.deleteperson(param.id",{"_index":522,"title":{},"body":{"controllers/GenresController.html":{}}}],["this.genresservice.findall",{"_index":517,"title":{},"body":{"controllers/GenresController.html":{}}}],["this.genresservice.findonebyid(param.id",{"_index":519,"title":{},"body":{"controllers/GenresController.html":{}}}],["this.hashpassword(user.password",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.health.check",{"_index":639,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck('nestjs",{"_index":640,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.jwtservice.decode(token",{"_index":1284,"title":{},"body":{"injectables/RatingService.html":{},"injectables/ReviewService.html":{}}}],["this.jwtservice.signasync(user",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["this.movieactorproviders.create",{"_index":756,"title":{},"body":{"injectables/MovieActorService.html":{}}}],["this.movieactorservices.create(movieactor",{"_index":968,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviedirectorproviders.create",{"_index":867,"title":{},"body":{"injectables/MovieDirectorService.html":{}}}],["this.moviedirectorservices.create",{"_index":972,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviegenreproviders.create",{"_index":908,"title":{},"body":{"injectables/MovieGenresService.html":{}}}],["this.moviegenreservices.create(moviegenre",{"_index":975,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository",{"_index":983,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.create",{"_index":959,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.destroy",{"_index":984,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.findall",{"_index":1001,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.findandcountall",{"_index":583,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["this.movierepository.findone",{"_index":976,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movieservices.create(obj",{"_index":814,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservices.deletemovie(id",{"_index":827,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservices.findall(req",{"_index":816,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservices.findonebyid(id",{"_index":825,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservices.findonebytitle(title",{"_index":819,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservices.search(req",{"_index":823,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservices.update(id",{"_index":830,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.name",{"_index":1408,"title":{},"body":{"classes/UserDto.html":{}}}],["this.password",{"_index":1410,"title":{},"body":{"classes/UserDto.html":{}}}],["this.personrepository",{"_index":1089,"title":{},"body":{"injectables/PersonsService.html":{}}}],["this.personrepository.create",{"_index":1084,"title":{},"body":{"injectables/PersonsService.html":{}}}],["this.personrepository.destroy",{"_index":1090,"title":{},"body":{"injectables/PersonsService.html":{}}}],["this.personrepository.findall",{"_index":1085,"title":{},"body":{"injectables/PersonsService.html":{}}}],["this.personrepository.findone",{"_index":1088,"title":{},"body":{"injectables/PersonsService.html":{}}}],["this.personservices.create(obj",{"_index":1050,"title":{},"body":{"controllers/PersonsController.html":{}}}],["this.personservices.deleteperson(param.id",{"_index":1057,"title":{},"body":{"controllers/PersonsController.html":{}}}],["this.personservices.findall",{"_index":1051,"title":{},"body":{"controllers/PersonsController.html":{}}}],["this.personservices.findonebyemail(param.email",{"_index":1054,"title":{},"body":{"controllers/PersonsController.html":{}}}],["this.personservices.findonebyid(param.id",{"_index":1052,"title":{},"body":{"controllers/PersonsController.html":{}}}],["this.personservices.findonebyname(param.name",{"_index":1056,"title":{},"body":{"controllers/PersonsController.html":{}}}],["this.profilerepository.create(profile",{"_index":1215,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.profilerepository.findone",{"_index":1216,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.profileservices.creatprofile(req",{"_index":1178,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservices.getprofile(param.id",{"_index":1184,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservices.getprofile(req.user.id",{"_index":1188,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservices.updateprofile(req.body",{"_index":1190,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.prohrepository",{"_index":1146,"title":{},"body":{"injectables/ProductionHouseService.html":{}}}],["this.prohrepository.create",{"_index":1140,"title":{},"body":{"injectables/ProductionHouseService.html":{}}}],["this.prohrepository.destroy",{"_index":1147,"title":{},"body":{"injectables/ProductionHouseService.html":{}}}],["this.prohrepository.findall",{"_index":1142,"title":{},"body":{"injectables/ProductionHouseService.html":{}}}],["this.prohrepository.findone",{"_index":1145,"title":{},"body":{"injectables/ProductionHouseService.html":{}}}],["this.prohservice.create(req.body",{"_index":1115,"title":{},"body":{"controllers/ProductionHouseController.html":{}}}],["this.prohservice.deleteperson(param.id",{"_index":1119,"title":{},"body":{"controllers/ProductionHouseController.html":{}}}],["this.prohservice.findall",{"_index":1116,"title":{},"body":{"controllers/ProductionHouseController.html":{}}}],["this.prohservice.findonebyid(param.id",{"_index":1117,"title":{},"body":{"controllers/ProductionHouseController.html":{}}}],["this.prohservice.findonebyname(param.name",{"_index":1118,"title":{},"body":{"controllers/ProductionHouseController.html":{}}}],["this.query",{"_index":25,"title":{},"body":{"classes/APIFeatures.html":{}}}],["this.query.findall",{"_index":48,"title":{},"body":{"classes/APIFeatures.html":{}}}],["this.query.select",{"_index":66,"title":{},"body":{"classes/APIFeatures.html":{}}}],["this.query.select(fields",{"_index":65,"title":{},"body":{"classes/APIFeatures.html":{}}}],["this.query.skip(skip).limit(limit",{"_index":75,"title":{},"body":{"classes/APIFeatures.html":{}}}],["this.query.sort",{"_index":56,"title":{},"body":{"classes/APIFeatures.html":{}}}],["this.query.sort(sortby",{"_index":55,"title":{},"body":{"classes/APIFeatures.html":{}}}],["this.querystring",{"_index":26,"title":{},"body":{"classes/APIFeatures.html":{}}}],["this.querystring.field",{"_index":60,"title":{},"body":{"classes/APIFeatures.html":{}}}],["this.querystring.field.split(',').join",{"_index":63,"title":{},"body":{"classes/APIFeatures.html":{}}}],["this.querystring.limit",{"_index":72,"title":{},"body":{"classes/APIFeatures.html":{}}}],["this.querystring.pages",{"_index":69,"title":{},"body":{"classes/APIFeatures.html":{}}}],["this.querystring.sort",{"_index":51,"title":{},"body":{"classes/APIFeatures.html":{}}}],["this.querystring.sort.split(',').join",{"_index":53,"title":{},"body":{"classes/APIFeatures.html":{}}}],["this.rateservices.rateamovie(req",{"_index":1246,"title":{},"body":{"controllers/RateingController.html":{}}}],["this.rateservices.rateamoviebyamovie(param.movieid",{"_index":1249,"title":{},"body":{"controllers/RateingController.html":{}}}],["this.rateservices.rateamoviebyauser(param.userid",{"_index":1252,"title":{},"body":{"controllers/RateingController.html":{}}}],["this.reflector.get('roles",{"_index":1348,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.reviewrepository.create((review",{"_index":1331,"title":{},"body":{"injectables/ReviewService.html":{}}}],["this.reviewrepository.findall",{"_index":1332,"title":{},"body":{"injectables/ReviewService.html":{}}}],["this.reviewservices.reviewamovie(req.body",{"_index":1305,"title":{},"body":{"controllers/ReviewController.html":{}}}],["this.reviewservices.reviewamoviebyamovie(param.movieid",{"_index":1306,"title":{},"body":{"controllers/ReviewController.html":{}}}],["this.reviewservices.reviewamoviebyauser(param.userid",{"_index":1307,"title":{},"body":{"controllers/ReviewController.html":{}}}],["this.role",{"_index":1412,"title":{},"body":{"classes/UserDto.html":{}}}],["this.userrepository.findall",{"_index":1498,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findandcountall",{"_index":1506,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":1494,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.create",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.createbysocial(usercreat",{"_index":441,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["this.userservice.findalluser",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyverifytoken(tokensend",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findonebyemail(username",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findonebyid(payload.id",{"_index":675,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.updatetoken(user",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.updateuser",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["through",{"_index":1749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["throw",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenresService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/UsersService.html":{}}}],["title",{"_index":45,"title":{},"body":{"classes/APIFeatures.html":{},"classes/Movie.html":{},"controllers/MovieController.html":{},"classes/MovieDto.html":{},"injectables/MovieService.html":{}}}],["token",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/RatingService.html":{},"injectables/ReviewService.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["tokensend",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["touch",{"_index":1655,"title":{},"body":{"index.html":{}}}],["trailer",{"_index":700,"title":{},"body":{"classes/Movie.html":{},"classes/MovieDto.html":{}}}],["transport",{"_index":1721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transporter",{"_index":1717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transporter.sendmail",{"_index":1734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/Genre.html":{},"injectables/GenresService.html":{},"classes/Movie.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/ProfileService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["tslint:disable",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["twitter",{"_index":1661,"title":{},"body":{"index.html":{}}}],["type",{"_index":20,"title":{},"body":{"classes/APIFeatures.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"classes/FileUploadDto.html":{},"classes/Genre.html":{},"classes/GenreDto.html":{},"injectables/GenresService.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"injectables/MovieActorService.html":{},"controllers/MovieController.html":{},"classes/MovieDirector.html":{},"injectables/MovieDirectorService.html":{},"classes/MovieDto.html":{},"classes/MovieGenre.html":{},"injectables/MovieGenresService.html":{},"injectables/MovieService.html":{},"classes/Person.html":{},"classes/PersonDto.html":{},"injectables/PersonsService.html":{},"classes/ProductionDto.html":{},"classes/ProductionHouse.html":{},"injectables/ProductionHouseService.html":{},"classes/Profile.html":{},"classes/Rate.html":{},"injectables/RatingService.html":{},"classes/Review.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"classes/SocialUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"classes/actorMovieDTO.html":{},"coverage.html":{},"classes/directorMovieDTO.html":{},"classes/genreMovieDTO.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":558,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieActorService.html":{},"injectables/MovieDirectorService.html":{},"injectables/MovieGenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/ProfileService.html":{},"injectables/RatingService.html":{},"injectables/ReviewService.html":{},"injectables/UsersService.html":{}}}],["types/jsonwebtoken",{"_index":1565,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":1567,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":472,"title":{},"body":{"classes/Genre.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"classes/MovieDirector.html":{},"classes/MovieGenre.html":{},"classes/Person.html":{},"classes/ProductionHouse.html":{},"classes/Profile.html":{},"classes/Rate.html":{},"classes/Review.html":{},"classes/User.html":{},"dependencies.html":{},"index.html":{}}}],["ui",{"_index":1595,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":669,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":687,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":458,"title":{},"body":{"classes/Genre.html":{},"classes/Movie.html":{},"classes/MovieActor.html":{},"classes/MovieDirector.html":{},"classes/MovieGenre.html":{},"classes/Person.html":{},"classes/ProductionHouse.html":{},"classes/Profile.html":{},"classes/Rate.html":{},"classes/Review.html":{},"classes/User.html":{}}}],["unique",{"_index":466,"title":{},"body":{"classes/Genre.html":{},"classes/Movie.html":{},"classes/Person.html":{},"classes/User.html":{}}}],["unit",{"_index":1634,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":560,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieActorService.html":{},"injectables/MovieDirectorService.html":{},"injectables/MovieGenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/ReviewService.html":{}}}],["update",{"_index":760,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["update(@param('id",{"_index":829,"title":{},"body":{"controllers/MovieController.html":{}}}],["update(id",{"_index":785,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["updateduser",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateprofile",{"_index":1162,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["updateprofile(@request",{"_index":1189,"title":{},"body":{"controllers/ProfileController.html":{}}}],["updateprofile(req",{"_index":1168,"title":{},"body":{"controllers/ProfileController.html":{}}}],["updateprofile(user",{"_index":1207,"title":{},"body":{"injectables/ProfileService.html":{}}}],["updatetoken(user",{"_index":1461,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuser",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["updateuser(id",{"_index":1443,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuser(user",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["uploadedfile",{"_index":761,"title":{},"body":{"controllers/MovieController.html":{},"controllers/ProfileController.html":{}}}],["uploadedfile(@param",{"_index":1181,"title":{},"body":{"controllers/ProfileController.html":{}}}],["uploadedfile(@param('id",{"_index":838,"title":{},"body":{"controllers/MovieController.html":{}}}],["uploadedfile(id",{"_index":788,"title":{},"body":{"controllers/MovieController.html":{}}}],["uploadedfile(param",{"_index":1170,"title":{},"body":{"controllers/ProfileController.html":{}}}],["uploads",{"_index":1180,"title":{},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["url",{"_index":1752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urldatabase",{"_index":658,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{}}}],["use",{"_index":1470,"title":{},"body":{"injectables/UsersService.html":{}}}],["usefactory",{"_index":1702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{},"controllers/ProfileController.html":{},"controllers/RateingController.html":{},"controllers/ReviewController.html":{}}}],["useguards(authguard('facebook",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('google",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('local",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GenresController.html":{},"controllers/MovieController.html":{},"controllers/PersonsController.html":{},"controllers/ProductionHouseController.html":{},"controllers/ProfileController.html":{},"controllers/RateingController.html":{},"controllers/ReviewController.html":{}}}],["useguards(jwtauthguard)@post",{"_index":1164,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RateingController.html":{},"controllers/ReviewController.html":{}}}],["useguards(jwtauthguard)@post('profilepic/:id')@useinterceptors(undefined",{"_index":1171,"title":{},"body":{"controllers/ProfileController.html":{}}}],["useguards(undefined)@post('login",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":794,"title":{},"body":{"controllers/MovieController.html":{},"controllers/ProfileController.html":{}}}],["user",{"_index":208,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Movie.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/Rate.html":{},"injectables/RatingService.html":{},"classes/Review.html":{},"injectables/ReviewService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user.accountid",{"_index":438,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/UsersService.html":{}}}],["user.accountwith",{"_index":1476,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.active",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.email",{"_index":435,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/UsersService.html":{}}}],["user.entity",{"_index":1446,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.findone({where:{id:req.user.id",{"_index":1182,"title":{},"body":{"controllers/ProfileController.html":{}}}],["user.firstname",{"_index":619,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/ProfileService.html":{}}}],["user.gender",{"_index":1479,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.lastname",{"_index":431,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/ProfileService.html":{}}}],["user.name",{"_index":433,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/UsersService.html":{}}}],["user.password",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.providers",{"_index":1421,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.role",{"_index":1353,"title":{},"body":{"guards/RolesGuard.html":{},"injectables/UsersService.html":{}}}],["user.save",{"_index":1482,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.validatetoken",{"_index":1503,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.validationtokenexpire",{"_index":1497,"title":{},"body":{"injectables/UsersService.html":{}}}],["user/rating",{"_index":1232,"title":{},"body":{"controllers/RateingController.html":{}}}],["user['datavalues",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["user_repository",{"_index":1448,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["useralreadyexsist",{"_index":1499,"title":{},"body":{"injectables/UsersService.html":{}}}],["usercreat",{"_index":428,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["usercreat.accountid",{"_index":437,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["usercreat.accountwith",{"_index":436,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["usercreat.email",{"_index":434,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["usercreat.name",{"_index":432,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["userdata",{"_index":1481,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdata.active",{"_index":1483,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdata.save",{"_index":1492,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdata.validatetoken",{"_index":1486,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdata.validationtokenexpire",{"_index":1487,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdone",{"_index":440,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["userdone['datavalues",{"_index":442,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["userdto",{"_index":205,"title":{"classes/UserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userid",{"_index":479,"title":{},"body":{"classes/GenreDto.html":{},"classes/Movie.html":{},"classes/MovieDto.html":{},"classes/PersonDto.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Rate.html":{},"injectables/RatingService.html":{},"classes/Review.html":{},"injectables/ReviewService.html":{}}}],["username",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["usernamefield",{"_index":685,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userrepository",{"_index":1429,"title":{},"body":{"injectables/UsersService.html":{}}}],["userroles",{"_index":1355,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/functions.html":{}}}],["users",{"_index":1392,"title":{},"body":{"classes/User.html":{}}}],["users.service",{"_index":1419,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/dto/user.dto",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users/user.entity",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{},"classes/Movie.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/Rate.html":{},"injectables/RatingService.html":{},"classes/Review.html":{},"injectables/ReviewService.html":{}}}],["users/users.module",{"_index":277,"title":{},"body":{"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MovieModule.html":{},"modules/PersonsModule.html":{},"modules/ProductionHouseModule.html":{},"modules/ProfileModule.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{}}}],["users/users.service",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["userservice",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{}}}],["usersmodule",{"_index":119,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MovieModule.html":{},"modules/PersonsModule.html":{},"modules/ProductionHouseModule.html":{},"modules/ProfileModule.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersproviders",{"_index":1420,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usersservice",{"_index":300,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userupdate",{"_index":1444,"title":{},"body":{"injectables/UsersService.html":{}}}],["userupdate.email",{"_index":1505,"title":{},"body":{"injectables/UsersService.html":{}}}],["userupdate.gender",{"_index":1504,"title":{},"body":{"injectables/UsersService.html":{}}}],["userupdate.name",{"_index":1501,"title":{},"body":{"injectables/UsersService.html":{}}}],["userupdate.password",{"_index":1502,"title":{},"body":{"injectables/UsersService.html":{}}}],["userupdate.save",{"_index":1464,"title":{},"body":{"injectables/UsersService.html":{}}}],["userupdate.token",{"_index":1463,"title":{},"body":{"injectables/UsersService.html":{}}}],["usevalue",{"_index":1714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["using",{"_index":1719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["val",{"_index":578,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{},"injectables/UsersService.html":{}}}],["validate",{"_index":390,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(accesstoken",{"_index":393,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["validate(payload",{"_index":665,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":682,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validatetoken",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["validateuser",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["validationtokenexpire",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{}}}],["value",{"_index":1603,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1370,"title":{},"body":{"classes/User.html":{}}}],["variable",{"_index":1518,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1674,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["verification(@param",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{}}}],["verification(params",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["verification(tokensend",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["verify",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifycallback",{"_index":603,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["void",{"_index":400,"title":{},"body":{"injectables/FacebookStrategy.html":{},"classes/User.html":{}}}],["watch",{"_index":1630,"title":{},"body":{"index.html":{}}}],["website",{"_index":1659,"title":{},"body":{"index.html":{}}}],["wewrcqbqnzmqnivgcckh",{"_index":611,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["wherequery",{"_index":585,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MovieService.html":{},"injectables/PersonsService.html":{},"injectables/ProductionHouseService.html":{}}}],["world",{"_index":170,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["you'd",{"_index":1649,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MovieDirectorModule.html":{},"modules/MovieGenresModule.html":{},"modules/MovieModule.html":{},"modules/PersonsModule.html":{},"modules/ProductionHouseModule.html":{},"modules/ProfileModule.html":{},"modules/RateingModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/APIFeatures.html":{"url":"classes/APIFeatures.html","title":"class - APIFeatures","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  APIFeatures\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utlis/apiFeature.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                query\n                            \n                            \n                                queryString\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                filter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(query: any, queryString: any)\n                    \n                \n                        \n                            \n                                Defined in src/utlis/apiFeature.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryString\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            query\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/utlis/apiFeature.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            queryString\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/utlis/apiFeature.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            filter\n                        \n                        \n                    \n                \n            \n            \n                \nfilter()\n                \n            \n\n\n            \n                \n                    Defined in src/utlis/apiFeature.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        class APIFeatures {\n  query: any;\n  queryString: any;\n  constructor(query: any, queryString: any) {\n    this.query = query;\n    this.queryString = queryString;\n  }\n\n  filter() {\n    // console.log(\"in the filter\");\n    const queryobj = { ...this.queryString };\n    const excludesfields = ['page', 'sort', 'limit', 'field'];\n    excludesfields.forEach((el) => delete queryobj[el]);\n    // advance filtering\n    let querystr: any = JSON.stringify(queryobj);\n    // console.log(querystr);\n\n    querystr = querystr.replace(/\\b(gte|gt|lte|lt)\\b/g, (match) => `$${match}`);\n\n    console.log(querystr);\n    const title: any = querystr.title;\n    // console.log(qs);\n    this.query.findAll({ where: { title } });\n    return this;\n  }\n\n  // sorting\n  //   sort() {\n  //     if (this.queryString.sort) {\n  //       const sortby = this.queryString.sort.split(',').join(' ');\n  //       // console.log(sortby);\n  //       this.query = this.query.sort(sortby);\n  //     } else {\n  //       this.query = this.query.sort('-createdate');\n  //     }\n  //     //  console.log(\"in sorting\")\n  //     return this;\n  //   }\n  //   // Limiting\n  //   limmitField() {\n  //     if (this.queryString.field) {\n  //       // console.log('hi in');\n  //       const fields = this.queryString.field.split(',').join(' ');\n  //       // console.log(fields);\n  //       this.query = this.query.select(fields);\n  //     } else {\n  //       this.query = this.query.select('-__v');\n  //     }\n  //     // console.log(\"in the limit field\");\n  //     return this;\n  //   }\n  //   // paginate\n  //   paginate() {\n  //     const page = this.queryString.pages * 1 || 1;\n  //     // console.log(page);\n  //     const limit = this.queryString.limit * 1 || 100;\n  //     const skip = (page - 1) * limit;\n  //     this.query = this.query.skip(skip).limit(limit);\n  //     // console.log(\"in the paginate\");\n  //     return this;\n  //   }\n}\n\nexport default APIFeatures;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nGenresModule\n\nGenresModule\n\nAppModule -->\n\nGenresModule->AppModule\n\n\n\n\n\nMovieDirectorModule\n\nMovieDirectorModule\n\nAppModule -->\n\nMovieDirectorModule->AppModule\n\n\n\n\n\nMovieGenresModule\n\nMovieGenresModule\n\nAppModule -->\n\nMovieGenresModule->AppModule\n\n\n\n\n\nMovieModule\n\nMovieModule\n\nAppModule -->\n\nMovieModule->AppModule\n\n\n\n\n\nPersonsModule\n\nPersonsModule\n\nAppModule -->\n\nPersonsModule->AppModule\n\n\n\n\n\nProductionHouseModule\n\nProductionHouseModule\n\nAppModule -->\n\nProductionHouseModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nRateingModule\n\nRateingModule\n\nAppModule -->\n\nRateingModule->AppModule\n\n\n\n\n\nReviewModule\n\nReviewModule\n\nAppModule -->\n\nReviewModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            HealthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            GenresModule\n                        \n                        \n                            MovieDirectorModule\n                        \n                        \n                            MovieGenresModule\n                        \n                        \n                            MovieModule\n                        \n                        \n                            PersonsModule\n                        \n                        \n                            ProductionHouseModule\n                        \n                        \n                            ProfileModule\n                        \n                        \n                            RateingModule\n                        \n                        \n                            ReviewModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { DatabaseModule } from './core/database/database.module';\nimport { MovieModule } from './modules/movie/movie.module';\nimport { ProductionHouseModule } from './modules/production-house/production-house.module';\nimport { PersonsModule } from './modules/persons/persons.module';\nimport { MovieDirectorModule } from './modules/movie-director/movie-director.module';\nimport { GenresModule } from './modules/genres/genres.module';\nimport { MovieGenresModule } from './modules/movie-genres/movie-genres.module';\nimport { UsersModule } from './modules/users/users.module';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { RateingModule } from './modules/rateing/rateing.module';\nimport { ReviewModule } from './modules/review/review.module';\nimport { ProfileModule } from './modules/profile/profile.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HealthController } from './health/health.controller';\n\n@Module({\n  imports: [\n    TerminusModule,\n    // ServeStaticModule.forRoot({\n    //   rootPath: join(__dirname, './src/uploads'),\n    // }),\n    DatabaseModule,\n    ConfigModule.forRoot({ isGlobal: true }),\n    MovieModule,\n    ProductionHouseModule,\n    PersonsModule,\n    MovieDirectorModule,\n    GenresModule,\n    MovieGenresModule,\n    UsersModule,\n    AuthModule,\n    RateingModule,\n    ReviewModule,\n    ProfileModule,\n  ],\n  controllers: [AppController, HealthController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { searchBuilder } from 'sequelize-search-builder';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                facebookLogin\n                            \n                            \n                                    Async\n                                facebookLoginRedirect\n                            \n                            \n                                    Async\n                                getUsers\n                            \n                            \n                                    Async\n                                googleAuth\n                            \n                            \n                                googleAuthRedirect\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                verification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            facebookLogin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/facebook')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            facebookLoginRedirect\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookLoginRedirect(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/facebook/redirect')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUsers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsers(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@hasRoles(Role.User)@Get('users')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            googleAuth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuth(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            googleAuthRedirect\n                        \n                        \n                    \n                \n            \n            \n                \ngoogleAuthRedirect(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google/redirect')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(user: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            verification\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    verification(params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('signup/verification/:token')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Body,\n  Post,\n  UseGuards,\n  Request,\n  Get,\n  Req,\n  HttpStatus,\n  Param,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { AuthService } from './auth.service';\nimport { UserDto } from '../users/dto/user.dto';\nimport { JwtAuthGuard } from './guards/jwt-guards';\nimport { hasRoles } from './decorators/roles.decorators';\nimport { RolesGuard } from './guards/roles-guards';\nimport { JwtService } from '@nestjs/jwt';\nimport { Role } from '../roles.enum';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private authService: AuthService,\n    private jwtService: JwtService, // public let array=['admin','user']\n  ) {}\n\n  @UseGuards(AuthGuard('local'))\n  @Post('login')\n  async login(@Request() req) {\n    return await this.authService.login(req.user);\n  }\n\n  @Post('signup')\n  async signUp(@Body() user: UserDto) {\n    return await this.authService.create(user);\n  }\n  @Get('signup/verification/:token')\n  async verification(@Param() params) {\n    return await this.authService.verification(params.token);\n  }\n  // let array=['user','admin'];\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @hasRoles(Role.User)\n  @Get('users')\n  async getUsers(@Request() req) {\n    console.log(req.user);\n\n    return await this.authService.getUsers();\n  }\n  @Get('google')\n  @UseGuards(AuthGuard('google'))\n  async googleAuth(@Req() req) {}\n\n  @Get('google/redirect')\n  @UseGuards(AuthGuard('google'))\n  googleAuthRedirect(@Req() req) {\n    return this.authService.googleLogin(req);\n  }\n  @Get('/facebook')\n  @UseGuards(AuthGuard('facebook'))\n  async facebookLogin(): Promise {\n    return HttpStatus.OK;\n  }\n  @Get('/facebook/redirect')\n  @UseGuards(AuthGuard('facebook'))\n  async facebookLoginRedirect(@Req() req: any): Promise {\n    return this.authService.faceBookLogin(req);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nRolesGuard \n\nRolesGuard \n\nRolesGuard  -->\n\nAuthModule->RolesGuard \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nFacebookStrategy\n\nFacebookStrategy\n\nAuthModule -->\n\nFacebookStrategy->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            FacebookStrategy\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            RolesGuard\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from '../users/users.module';\nimport { LocalStrategy } from './strategy/local.strategy';\nimport { JwtStrategy } from './strategy/jwt.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { APP_GUARD } from '@nestjs/core';\nimport { RolesGuard } from './guards/roles-guards';\nimport { JwtAuthGuard } from './guards/jwt-guards';\nimport { GoogleStrategy } from './strategy/google.strategy';\nimport { FacebookStrategy } from './strategy/facebook.strategy';\n\n@Module({\n  exports: [RolesGuard, JwtAuthGuard],\n  imports: [\n    PassportModule,\n    UsersModule,\n    JwtModule.register({\n      secret: process.env.JWTKEY,\n      signOptions: { expiresIn: process.env.TOKEN_EXPIRATION },\n    }),\n  ],\n  providers: [\n    AuthService,\n    LocalStrategy,\n    JwtStrategy,\n    RolesGuard,\n    JwtAuthGuard,\n    GoogleStrategy,\n    FacebookStrategy,\n  ],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                comparePassword\n                            \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                faceBookLogin\n                            \n                            \n                                    Private\n                                    Async\n                                generateToken\n                            \n                            \n                                getHello\n                            \n                            \n                                    Async\n                                getUsers\n                            \n                            \n                                googleLogin\n                            \n                            \n                                    Private\n                                    Async\n                                hashPassword\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                            \n                                    Async\n                                verification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:65\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            comparePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    comparePassword(enteredPassword, dbPassword)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    enteredPassword\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dbPassword\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            faceBookLogin\n                        \n                        \n                    \n                \n            \n            \n                \nfaceBookLogin(req: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            generateToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(user)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUsers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            googleLogin\n                        \n                        \n                    \n                \n            \n            \n                \ngoogleLogin(req: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     \"No user from google\" | { message: string; user: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(user, id)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            verification\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    verification(tokenSend: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenSend\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { User } from '../users/user.entity';\nimport { UsersService } from '../users/users.service';\nimport * as bcrypt from 'bcrypt';\nimport { UserDto } from '../users/dto/user.dto';\n\n@Injectable()\nexport class AuthService {\n  async verification(tokenSend: string) {\n    const user = await this.userService.findByVerifyToken(tokenSend);\n    console.log(user);\n    const {\n      password,\n      validationTokenExpire,\n      accountId,\n      accountWith,\n      validateToken,\n      active,\n      ...result\n    } = user['dataValues'];\n    const token = await this.generateToken(result);\n\n    return { user: result, token };\n  }\n\n  async getUsers(): Promise {\n    return this.userService.findAllUser();\n  }\n  async updateUser(user, id) {\n    const pass = await this.hashPassword(user.password);\n\n    const newUser = await this.userService.UpdateUser(\n      { ...user, password: pass },\n      id,\n    );\n\n    return newUser;\n  }\n  faceBookLogin(req: any): any {\n    if (!req.user) {\n      return {\n        statusCode: HttpStatus.NOT_FOUND,\n        data: null,\n      };\n    }\n    // console.log(req.user);\n    return {\n      statusCode: HttpStatus.OK,\n      data: req.user,\n    };\n  }\n  googleLogin(req: any) {\n    if (!req.user) {\n      return 'No user from google';\n    }\n\n    return {\n      message: 'User information from google',\n      user: req.user,\n    };\n  }\n  getHello(): string {\n    return 'Hello World!';\n  }\n  constructor(\n    private readonly userService: UsersService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async validateUser(username: string, pass: string): Promise {\n    // find if user exist with this email\n    const user = await this.userService.findOneByEmail(username);\n    if (!user) {\n      return null;\n    }\n\n    // find if user password match\n    const match = await this.comparePassword(pass, user.password);\n    if (!match) {\n      return null;\n    }\n\n    // tslint:disable-next-line: no-string-literal\n    const { password, ...result } = user['dataValues'];\n    return result;\n  }\n\n  async login(user) {\n    console.log(user);\n    let token;\n    if (user.active == true) {\n      token = await this.generateToken(user);\n    } else {\n      throw new HttpException(\n        'you need to verify your email',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    // const updatedUser = await this.userService.updateToken(user, token);\n    return { user, token };\n  }\n\n  public async create(user) {\n    // hash the password\n\n    const pass = await this.hashPassword(user.password);\n\n    const newUser = await this.userService.create({ ...user, password: pass });\n\n    // tslint:disable-next-line: no-string-literal\n    const {\n      password,\n      validationTokenExpire,\n      accountId,\n      accountWith,\n      validateToken,\n      active,\n      ...result\n    } = newUser['dataValues'];\n    // console.log(result);\n    // generate token\n\n    // return the user and the token\n    return { user: result };\n  }\n\n  private async generateToken(user) {\n    const token = await this.jwtService.signAsync(user);\n    return token;\n  }\n\n  private async hashPassword(password) {\n    const hash = await bcrypt.hash(password, 10);\n    return hash;\n  }\n\n  private async comparePassword(enteredPassword, dbPassword) {\n    const match = await bcrypt.compare(enteredPassword, dbPassword);\n    return match;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/database/database.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { databaseProviders } from './database.providers';\n\n@Module({\n  providers: [...databaseProviders],\n  exports: [...databaseProviders],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FacebookStrategy.html":{"url":"injectables/FacebookStrategy.html","title":"injectable - FacebookStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FacebookStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategy/facebook.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                generateToken\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategy/facebook.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            generateToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(user)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategy/facebook.strategy.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: Profile, done: (err: any,user: any,info: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategy/facebook.strategy.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                Profile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Profile, Strategy } from 'passport-facebook';\nimport { UserDto } from 'src/modules/users/dto/user.dto';\nimport { User } from 'src/modules/users/user.entity';\nimport { JwtService } from '@nestjs/jwt';\nimport { UsersService } from 'src/modules/users/users.service';\nimport { SocialUserDto } from 'src/modules/users/dto/SocialUserDto';\n\n@Injectable()\nexport class FacebookStrategy extends PassportStrategy(Strategy, 'facebook') {\n  constructor(\n    private readonly userService: UsersService,\n    private readonly jwtService: JwtService,\n  ) {\n    super({\n      clientID: process.env.APP_ID,\n      clientSecret: process.env.APP_SECRET,\n      callbackURL: 'http://localhost:3000/api/v1/auth/facebook/redirect',\n      scope: 'email',\n      profileFields: ['emails', 'name'],\n    });\n  }\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: Profile,\n    done: (err: any, user: any, info?: any) => void,\n  ): Promise {\n    //console.log(profile);\n    const { id, name, emails } = profile;\n    const user = {\n      email: emails[0].value,\n      name: name.givenName,\n      accountId: id,\n    };\n    let userCreat = new SocialUserDto();\n\n    const payload = {\n      user,\n      accessToken,\n    };\n    // console.log(user.firstName + ' ' + user.lastName);\n    userCreat.name = user.name;\n\n    userCreat.email = user.email;\n    userCreat.accountWith = 'facebook';\n    userCreat.accountId = user.accountId;\n    console.log(userCreat);\n    const userDone = await this.userService.createBySocial(userCreat);\n    const { password, ...result } = userDone['dataValues'];\n\n    const token = await this.generateToken(result);\n    return done(null, userDone, token);\n  }\n\n  private async generateToken(user) {\n    const token = await this.jwtService.signAsync(user);\n    return token;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadDto.html":{"url":"classes/FileUploadDto.html","title":"class - FileUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/movie/fileuploaddto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            file\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: 'string', format: 'binary'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/fileuploaddto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class FileUploadDto {\n  @ApiProperty({ type: 'string', format: 'binary' })\n  file: any;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Genre.html":{"url":"classes/Genre.html","title":"class - Genre","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Genre\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/genres/genre.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                MovieGenre\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined, allowNull: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/genres/genre.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MovieGenre\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MovieGenre\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @HasMany(undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/genres/genre.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined, allowNull: false, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/genres/genre.entity.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, DataType, HasMany, Model, Table } from 'sequelize-typescript';\nimport { MovieGenre } from '../movie-genres/movie_genre.entity';\n\n@Table\nexport class Genre extends Model {\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: DataType.TEXT,\n    allowNull: false,\n  })\n  description: string;\n\n  @HasMany(() => MovieGenre, { onDelete: 'CASCADE' })\n  MovieGenre: MovieGenre;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenreDto.html":{"url":"classes/GenreDto.html","title":"class - GenreDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenreDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/genres/genre.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                description\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/genres/genre.dto.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/genres/genre.dto.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/genres/genre.dto.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GenreDto {\n  readonly name: string;\n  readonly description: string;\n  userId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GenresController.html":{"url":"controllers/GenresController.html","title":"controller - GenresController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GenresController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/genres/genres.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                genres\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                Add\n                            \n                            \n                                    Async\n                                deleteById\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            Add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    Add(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @hasRoles(Role.Admin)@UseGuards(JwtAuthGuard, RolesGuard)@Post('add')\n                \n            \n\n            \n                \n                    Defined in src/modules/genres/genres.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteById(param)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @hasRoles(Role.Admin)@UseGuards(JwtAuthGuard, RolesGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/genres/genres.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/genres/genres.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(param)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/genres/genres.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { hasRoles } from '../auth/decorators/roles.decorators';\nimport { JwtAuthGuard } from '../auth/guards/jwt-guards';\nimport { RolesGuard } from '../auth/guards/roles-guards';\nimport { Role } from '../roles.enum';\nimport { GenreDto } from './genre.dto';\nimport { GenresService } from './genres.service';\n\n@Controller('genres')\nexport class GenresController {\n  constructor(private genresService: GenresService) {}\n\n  @hasRoles(Role.Admin)\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Post('add')\n  async Add(@Request() req) {\n    const obj: GenreDto = req.body;\n    obj.userId = req.user.id;\n    return await this.genresService.create(obj);\n  }\n  @Get()\n  async getAll() {\n    return await this.genresService.findAll();\n  }\n  @Get(':id')\n  async getById(@Param() param) {\n    return await this.genresService.findOneById(param.id);\n  }\n\n  @hasRoles(Role.Admin)\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Delete(':id')\n  async deleteById(@Param() param) {\n    return await this.genresService.deletePerson(param.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GenresModule.html":{"url":"modules/GenresModule.html","title":"module - GenresModule","body":"\n                   \n\n\n\n\n    Modules\n    GenresModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GenresModule\n\n\n\ncluster_GenresModule_providers\n\n\n\ncluster_GenresModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nGenresModule\n\nGenresModule\n\nGenresModule -->\n\nAuthModule->GenresModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nGenresModule -->\n\nUsersModule->GenresModule\n\n\n\n\n\nGenresService\n\nGenresService\n\nGenresModule -->\n\nGenresService->GenresModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nGenresModule -->\n\nJwtAuthGuard->GenresModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/genres/genres.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GenresService\n                        \n                        \n                            JwtAuthGuard\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GenresController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GenresService } from './genres.service';\nimport { GenresController } from './genres.controller';\nimport { genresProviders } from './genre.provider';\nimport { AuthModule } from '../auth/auth.module';\nimport { LocalStrategy } from '../auth/strategy/local.strategy';\nimport { JwtStrategy } from '../auth/strategy/jwt.strategy';\nimport { RolesGuard } from '../auth/guards/roles-guards';\nimport { JwtAuthGuard } from '../auth/guards/jwt-guards';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [AuthModule, UsersModule],\n\n  providers: [GenresService, ...genresProviders, RolesGuard, JwtAuthGuard],\n  controllers: [GenresController],\n})\nexport class GenresModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenresService.html":{"url":"injectables/GenresService.html","title":"injectable - GenresService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GenresService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/genres/genres.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deletePerson\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByName\n                            \n                            \n                                    Async\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(genreRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/genres/genres.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        genreRepository\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(genre: GenreDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/genres/genres.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    genre\n                                    \n                                                GenreDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deletePerson\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePerson(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/genres/genres.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/genres/genres.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/genres/genres.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/genres/genres.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            search\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    search(req)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/genres/genres.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common';\nimport { GENRE_REPOSITORY } from 'src/core/constants';\nimport { MovieGenre } from '../movie-genres/movie_genre.entity';\nimport { Movie } from '../movie/movie.entity';\nimport { GenreDto } from './genre.dto';\nimport { Genre } from './genre.entity';\nimport * as searchBuilder from 'sequelize-search-builder';\n\n@Injectable()\nexport class GenresService {\n  constructor(\n    @Inject(GENRE_REPOSITORY) private readonly genreRepository: typeof Genre,\n  ) {}\n\n  async create(genre: GenreDto): Promise {\n    return await this.genreRepository.create(\n      (genre as unknown) as Genre,\n    );\n  }\n  async findAll(): Promise {\n    const genre: Genre[] = await this.genreRepository.findAll({\n      include: [{ model: MovieGenre, include: [{ model: Movie }] }],\n    });\n    console.log(genre);\n    if (genre.length == 0) {\n      throw new HttpException('No Data Found', HttpStatus.NOT_FOUND);\n    }\n    return genre;\n  }\n  async findOneByName(name: string): Promise {\n    const genre: Genre = await this.genreRepository.findOne({\n      where: { name },\n      include: [{ model: MovieGenre, include: [{ model: Movie }] }],\n    });\n    if (!genre) {\n      throw new HttpException('No Data Found', HttpStatus.NOT_FOUND);\n    }\n\n    return genre;\n  }\n\n  async findOneById(id: number): Promise {\n    const genre: Genre = await this.genreRepository.findOne({\n      where: { id },\n      include: [{ model: MovieGenre, include: [{ model: Movie }] }],\n    });\n    if (!genre) {\n      throw new HttpException('No Data Found', HttpStatus.NOT_FOUND);\n    }\n\n    return genre;\n  }\n\n  async deletePerson(id: number): Promise {\n    const genre: Genre = await this.genreRepository\n      .findOne({\n        where: { id },\n      })\n      .then((result) => {\n        return this.genreRepository.destroy({ where: { id } }).then((u) => {\n          return result;\n        });\n      });\n    if (!genre) {\n      throw new HttpException('No Data Found', HttpStatus.NOT_FOUND);\n    }\n    return genre;\n  }\n  async search(req) {\n    // const filter = req.query.filter;\n    // console.log(req.query.filter);\n    // const data = req.query;\n    // Object.entries(data).forEach(([key, val]: any) =>\n    //   isNaN(val) ? (data[key] = { [Op.like]: '%' + val + '%' }) : val,\n    // );\n    // console.log(data);\n    // return await this.movieRepository.findAndCountAll({\n    //   where: data,\n    // });\n\n    const search = new searchBuilder(Genre, req.query),\n      whereQuery = search.getWhereQuery(),\n      orderQuery = search.getOrderQuery(),\n      limitQuery = search.getLimitQuery(),\n      offsetQuery = search.getOffsetQuery();\n\n    return await Genre.findAll({\n      include: [{ all: true, nested: true, duplicating: false }],\n      where: whereQuery,\n      order: orderQuery,\n      limit: limitQuery,\n      offset: offsetQuery,\n      logging: console.log,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategy/google.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                generateToken\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategy/google.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            generateToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(user)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategy/google.strategy.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: any, done: VerifyCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategy/google.strategy.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                            VerifyCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { config } from 'dotenv';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth20';\nimport { SocialUserDto } from 'src/modules/users/dto/SocialUserDto';\nimport { UserDto } from 'src/modules/users/dto/user.dto';\nimport { User } from 'src/modules/users/user.entity';\nimport { UsersService } from 'src/modules/users/users.service';\n\nconfig();\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, 'google') {\n  constructor(\n    private readonly userService: UsersService,\n    private readonly jwtService: JwtService,\n  ) {\n    super({\n      clientID:\n        '486603679224-33u2fo7v993c778rqkbddns83uqu5n2l.apps.googleusercontent.com',\n      clientSecret: 'D2g-WEWRcQBqnzmQnIvGCCkH',\n      callbackURL: 'http://localhost:3000/api/v1/auth/google/redirect',\n      scope: ['email', 'profile'],\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n    done: VerifyCallback,\n  ): Promise {\n    const { id, name, emails, photos } = profile;\n    const user = {\n      email: emails[0].value,\n      firstName: name.givenName,\n      lastName: name.familyName,\n      picture: photos[0].value,\n      accountId: id,\n      accessToken,\n    };\n    let userCreat = new SocialUserDto();\n    const payload = {\n      user,\n      accessToken,\n    };\n    userCreat.name = user.firstName + ' ' + user.lastName;\n    userCreat.email = user.email;\n    userCreat.accountWith = 'google';\n    userCreat.accountId = user.accountId;\n    const userDone: User = await this.userService.createBySocial(userCreat);\n    const { password, ...result } = userDone['dataValues'];\n\n    const token = await this.generateToken(result);\n    done(null, userDone, token);\n  }\n  private async generateToken(user) {\n    const token = await this.jwtService.signAsync(user);\n    return token;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                            \n                                checkDB\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            check\n                        \n                        \n                    \n                \n            \n            \n                \ncheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            checkDB\n                        \n                        \n                    \n                \n            \n            \n                \ncheckDB()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('db')@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport {\n  HealthCheck,\n  HealthCheckService,\n  HttpHealthIndicator,\n  SequelizeHealthIndicator,\n} from '@nestjs/terminus';\nimport { Connection } from 'sequelize/types/lib/connection-manager';\nimport { sequelize } from 'src/core/database/database.providers';\n\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private db: SequelizeHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.http.pingCheck('nestjs-docs', 'https://docs.nestjs.com'),\n    ]);\n  }\n  @Get('db')\n  @HealthCheck()\n  checkDB() {\n    console.log(sequelize);\n    return this.health.check([\n      async () => await this.db.pingCheck('sequelize', sequelize),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDatabaseConfig.html":{"url":"interfaces/IDatabaseConfig.html","title":"interface - IDatabaseConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDatabaseConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/database/dbConfig.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        development\n                                \n                                \n                                        production\n                                \n                                \n                                        test\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        development\n                                    \n                                \n                                \n                                    \n                                        development:         IDatabaseConfigAttributes\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDatabaseConfigAttributes\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        production\n                                    \n                                \n                                \n                                    \n                                        production:         IDatabaseConfigAttributes\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDatabaseConfigAttributes\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        test\n                                    \n                                \n                                \n                                    \n                                        test:         IDatabaseConfigAttributes\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDatabaseConfigAttributes\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IDatabaseConfigAttributes {\n  username?: string;\n  password?: string;\n  database?: string;\n  host?: string;\n  port?: number | string;\n  dialect?: string;\n  urlDatabase?: string;\n  logging?: boolean;\n}\n\nexport interface IDatabaseConfig {\n  development: IDatabaseConfigAttributes;\n  test: IDatabaseConfigAttributes;\n  production: IDatabaseConfigAttributes;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDatabaseConfigAttributes.html":{"url":"interfaces/IDatabaseConfigAttributes.html","title":"interface - IDatabaseConfigAttributes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDatabaseConfigAttributes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/database/dbConfig.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        database\n                                \n                                \n                                            Optional\n                                        dialect\n                                \n                                \n                                            Optional\n                                        host\n                                \n                                \n                                            Optional\n                                        logging\n                                \n                                \n                                            Optional\n                                        password\n                                \n                                \n                                            Optional\n                                        port\n                                \n                                \n                                            Optional\n                                        urlDatabase\n                                \n                                \n                                            Optional\n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        database\n                                    \n                                \n                                \n                                    \n                                        database:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dialect\n                                    \n                                \n                                \n                                    \n                                        dialect:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logging\n                                    \n                                \n                                \n                                    \n                                        logging:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                    \n                                \n                                \n                                    \n                                        port:     number | string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        urlDatabase\n                                    \n                                \n                                \n                                    \n                                        urlDatabase:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IDatabaseConfigAttributes {\n  username?: string;\n  password?: string;\n  database?: string;\n  host?: string;\n  port?: number | string;\n  dialect?: string;\n  urlDatabase?: string;\n  logging?: boolean;\n}\n\nexport interface IDatabaseConfig {\n  development: IDatabaseConfigAttributes;\n  test: IDatabaseConfigAttributes;\n  production: IDatabaseConfigAttributes;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/jwt-guards.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategy/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategy/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategy/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { UsersService } from '../../users/users.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly userService: UsersService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWTKEY,\n    });\n  }\n\n  async validate(payload: any) {\n    // check if user in the token actually exist\n    const user = await this.userService.findOneById(payload.id);\n    if (!user) {\n      throw new UnauthorizedException(\n        'You are not authorized to perform the operation',\n      );\n    }\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategy/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategy/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategy/local.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(username: string, password: string): Promise {\n    const user = await this.authService.validateUser(username, password);\n\n    if (!user) {\n      throw new UnauthorizedException('Invalid user credentials');\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Movie.html":{"url":"classes/Movie.html","title":"class - Movie","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Movie\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/movie/movie.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                averageRating\n                            \n                            \n                                coverPhoto\n                            \n                            \n                                description\n                            \n                            \n                                MovieActor\n                            \n                            \n                                MovieDirector\n                            \n                            \n                                MovieGenre\n                            \n                            \n                                paid\n                            \n                            \n                                price\n                            \n                            \n                                ProductionHouse\n                            \n                            \n                                ProductionHouseId\n                            \n                            \n                                Rate\n                            \n                            \n                                Review\n                            \n                            \n                                title\n                            \n                            \n                                trailer\n                            \n                            \n                                User\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            averageRating\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined, defaultValue: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movie.entity.ts:49\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            coverPhoto\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined, allowNull: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movie.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movie.entity.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MovieActor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MovieActor\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @HasMany(undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movie.entity.ts:84\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MovieDirector\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MovieDirector\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @HasMany(undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movie.entity.ts:87\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MovieGenre\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MovieGenre\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @HasMany(undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movie.entity.ts:90\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            paid\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined, defaultValue: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movie.entity.ts:55\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            price\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movie.entity.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ProductionHouse\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ProductionHouse\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @BelongsTo(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movie.entity.ts:81\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ProductionHouseId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ForeignKey(undefined)@Column({type: undefined, allowNull: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movie.entity.ts:65\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Rate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Rate\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @HasMany(undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movie.entity.ts:77\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Review\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Review\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @HasMany(undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movie.entity.ts:79\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined, allowNull: false, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movie.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            trailer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movie.entity.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            User\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @BelongsTo(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movie.entity.ts:75\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ForeignKey(undefined)@Column({type: undefined, allowNull: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movie.entity.ts:72\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Table,\n  Column,\n  Model,\n  DataType,\n  ForeignKey,\n  NotNull,\n  BelongsTo,\n  BelongsToMany,\n  HasMany,\n  HasOne,\n  PrimaryKey,\n} from 'sequelize-typescript';\nimport { MovieDirector } from '../movie-director/movie-director.entity';\nimport { MovieGenre } from '../movie-genres/movie_genre.entity';\nimport { Person } from '../persons/persons.entity';\nimport { ProductionHouse } from '../production-house/production-house.entity';\nimport { Rate } from '../rateing/rate.entity';\nimport { Review } from '../review/review.entity';\nimport { User } from '../users/user.entity';\nimport { MovieActor } from './MovieActor.entity';\n\n@Table\nexport class Movie extends Model {\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: true,\n  })\n  title: string;\n\n  @Column({\n    type: DataType.TEXT,\n    allowNull: false,\n  })\n  coverPhoto: string;\n  @Column({\n    type: DataType.TEXT,\n  })\n  trailer: string;\n  @Column({\n    type: DataType.TEXT,\n  })\n  description: string;\n  @Column({\n    type: DataType.INTEGER,\n    defaultValue: 0,\n  })\n  averageRating: number;\n\n  @Column({\n    type: DataType.BOOLEAN,\n    defaultValue: true,\n  })\n  paid: boolean;\n  @Column({\n    type: DataType.INTEGER,\n  })\n  price: number;\n  @ForeignKey(() => ProductionHouse)\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n  })\n  ProductionHouseId: number;\n\n  @ForeignKey(() => User)\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n  })\n  userId: User;\n\n  @BelongsTo(() => User)\n  User: User;\n  @HasMany(() => Rate, { onDelete: 'CASCADE' })\n  Rate: Rate;\n  @HasMany(() => Review, { onDelete: 'CASCADE' })\n  Review: Review;\n  @BelongsTo(() => ProductionHouse)\n  ProductionHouse: ProductionHouse;\n\n  @HasMany(() => MovieActor, { onDelete: 'CASCADE' })\n  MovieActor: MovieActor;\n\n  @HasMany(() => MovieDirector, { onDelete: 'CASCADE' })\n  MovieDirector: MovieDirector;\n\n  @HasMany(() => MovieGenre, { onDelete: 'CASCADE' })\n  MovieGenre: MovieGenre;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MovieActor.html":{"url":"classes/MovieActor.html","title":"class - MovieActor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MovieActor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/movie/MovieActor.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                actorID\n                            \n                            \n                                Movie\n                            \n                            \n                                movieID\n                            \n                            \n                                Person\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            actorID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ForeignKey(undefined)@Column({type: undefined, onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/MovieActor.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Movie\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Movie\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @BelongsTo(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/MovieActor.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            movieID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ForeignKey(undefined)@Column({type: undefined, onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/MovieActor.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Person\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Person\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @BelongsTo(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/MovieActor.entity.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BelongsTo,\n  Column,\n  DataType,\n  ForeignKey,\n  Model,\n  Table,\n} from 'sequelize-typescript';\nimport { Person } from '../persons/persons.entity';\nimport { Movie } from './movie.entity';\n\n@Table\nexport class MovieActor extends Model {\n  @ForeignKey(() => Person)\n  @Column({\n    type: DataType.INTEGER,\n    onDelete: 'CASCADE',\n  })\n  actorID: number;\n\n  @BelongsTo(() => Person)\n  Person: Person;\n\n  @ForeignKey(() => Movie)\n  @Column({\n    type: DataType.INTEGER,\n    onDelete: 'CASCADE',\n  })\n  movieID: number;\n  @BelongsTo(() => Movie)\n  Movie: Movie;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MovieActorService.html":{"url":"injectables/MovieActorService.html","title":"injectable - MovieActorService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MovieActorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/movie/movieActor.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(movieActorProviders, PersonsService: PersonsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/movie/movieActor.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        movieActorProviders\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        PersonsService\n                                                  \n                                                        \n                                                                        PersonsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(movieActor: actorMovieDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/movie/movieActor.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    movieActor\n                                    \n                                                actorMovieDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { MOVIEACTOR_REPOSITORY } from 'src/core/constants';\nimport { PersonsService } from '../persons/persons.service';\n\nimport { actorMovieDTO } from './actormovie.dto';\nimport { MovieActor } from './MovieActor.entity';\n\n@Injectable()\nexport class MovieActorService {\n  constructor(\n    @Inject(MOVIEACTOR_REPOSITORY)\n    private readonly movieActorProviders: typeof MovieActor,\n    private PersonsService: PersonsService,\n  ) {}\n\n  async create(movieActor: actorMovieDTO) {\n    return this.movieActorProviders.create(\n      (movieActor as unknown) as MovieActor,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MovieController.html":{"url":"controllers/MovieController.html","title":"controller - MovieController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MovieController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/movie/movie.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                movie\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                Add\n                            \n                            \n                                    Async\n                                deleteById\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getByTiTle\n                            \n                            \n                                    Async\n                                search\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                uploadedFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            Add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    Add(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @hasRoles(Role.Admin)@UseGuards(JwtAuthGuard, RolesGuard)@Post('add')@ApiCreatedResponse({description: 'the resource created successfully '})@ApiForbiddenResponse({description: 'forbidden'})\n                \n            \n\n            \n                \n                    Defined in src/modules/movie/movie.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @hasRoles(Role.Admin)@UseGuards(JwtAuthGuard, RolesGuard)@Delete(':id')@ApiOkResponse({description: 'the resource list has been successfully return'})@ApiForbiddenResponse({description: 'forbidden'})\n                \n            \n\n            \n                \n                    Defined in src/modules/movie/movie.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({description: 'the resource list has been successfully return'})@ApiForbiddenResponse({description: 'forbidden'})\n                \n            \n\n            \n                \n                    Defined in src/modules/movie/movie.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOkResponse({description: 'the resource list has been successfully return'})@ApiForbiddenResponse({description: 'forbidden'})\n                \n            \n\n            \n                \n                    Defined in src/modules/movie/movie.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getByTiTle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByTiTle(title: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('title/:title')@ApiOkResponse({description: 'the resource list has been successfully return'})@ApiForbiddenResponse({description: 'forbidden'})\n                \n            \n\n            \n                \n                    Defined in src/modules/movie/movie.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            search\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    search(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search')@ApiOkResponse({description: 'the resource list has been successfully return'})@ApiForbiddenResponse({description: 'forbidden'})\n                \n            \n\n            \n                \n                    Defined in src/modules/movie/movie.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @hasRoles(Role.Admin)@UseGuards(JwtAuthGuard, RolesGuard)@Patch(':id')@ApiCreatedResponse({description: 'the resource created successfully '})@ApiForbiddenResponse({description: 'forbidden'})\n                \n            \n\n            \n                \n                    Defined in src/modules/movie/movie.controller.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            uploadedFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadedFile(id: number, file)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @hasRoles(Role.Admin)@UseGuards(JwtAuthGuard, RolesGuard)@Post('coverPhoto/:id')@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@ApiBody({description: 'coverPhoto', type: FileUploadDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/movie/movie.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  Param,\n  Patch,\n  Post,\n  Put,\n  Request,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { diskStorage } from 'multer';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { editFileName, imageFileFilter, MovieService } from './movie.service';\nimport { hasRoles } from '../auth/decorators/roles.decorators';\nimport { JwtAuthGuard } from '../auth/guards/jwt-guards';\nimport { RolesGuard } from '../auth/guards/roles-guards';\nimport { Role } from '../roles.enum';\nimport { MovieDto } from './movieDto';\nimport {\n  ApiBody,\n  ApiConsumes,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiOkResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { FileUploadDto } from './fileuploaddto';\n@ApiTags('movie')\n@Controller('movie')\nexport class MovieController {\n  constructor(private movieServices: MovieService) {}\n  @hasRoles(Role.Admin)\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Post('add')\n  @ApiCreatedResponse({\n    description: 'the resource created successfully ',\n  })\n  @ApiForbiddenResponse({ description: 'forbidden' })\n  async Add(@Request() req) {\n    const obj: MovieDto = req.body;\n\n    obj.userId = req.user.id;\n    return await this.movieServices.create(obj);\n  }\n\n  @Get()\n  @ApiOkResponse({\n    description: 'the resource list has been successfully return',\n  })\n  @ApiForbiddenResponse({ description: 'forbidden' })\n  async get(@Request() req) {\n    return await this.movieServices.findAll(req);\n  }\n\n  @Get('title/:title')\n  @ApiOkResponse({\n    description: 'the resource list has been successfully return',\n  })\n  @ApiForbiddenResponse({ description: 'forbidden' })\n  async getByTiTle(@Param('title') title: string) {\n    return await this.movieServices.findOneByTitle(title);\n  }\n\n  @Get('search')\n  @ApiOkResponse({\n    description: 'the resource list has been successfully return',\n  })\n  @ApiForbiddenResponse({ description: 'forbidden' })\n  async search(@Request() req) {\n    //console.log(req.query);\n    return this.movieServices.search(req);\n  }\n  @Get(':id')\n  @ApiOkResponse({\n    description: 'the resource list has been successfully return',\n  })\n  @ApiForbiddenResponse({ description: 'forbidden' })\n  async getById(@Param('id') id: number) {\n    return await this.movieServices.findOneById(id);\n  }\n  @hasRoles(Role.Admin)\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Delete(':id')\n  @ApiOkResponse({\n    description: 'the resource list has been successfully return',\n  })\n  @ApiForbiddenResponse({ description: 'forbidden' })\n  async deleteById(@Param('id') id: number) {\n    return await this.movieServices.deleteMovie(id);\n  }\n  @hasRoles(Role.Admin)\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Patch(':id')\n  @ApiCreatedResponse({\n    description: 'the resource created successfully ',\n  })\n  @ApiForbiddenResponse({ description: 'forbidden' })\n  async update(@Param('id') id: number, @Request() req) {\n    const obj: MovieDto = req.body;\n    obj.userId = req.user.id;\n    return await this.movieServices.update(id, obj);\n  }\n\n  @hasRoles(Role.Admin)\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Post('coverPhoto/:id')\n  @UseInterceptors(\n    FileInterceptor('image', {\n      storage: diskStorage({\n        destination: './src/uploads',\n        filename: editFileName,\n      }),\n      fileFilter: imageFileFilter,\n    }),\n  )\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: 'coverPhoto',\n    type: FileUploadDto,\n  })\n  async uploadedFile(@Param('id') id: number, @UploadedFile() file) {\n    const movie = await this.movieServices.findOneById(id);\n    movie.coverPhoto = file.filename;\n    await movie.save();\n    const response = {\n      originalname: file.originalname,\n      filename: file.filename,\n    };\n\n    return response;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MovieDirector.html":{"url":"classes/MovieDirector.html","title":"class - MovieDirector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MovieDirector\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/movie-director/movie-director.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                directorID\n                            \n                            \n                                Movie\n                            \n                            \n                                movieID\n                            \n                            \n                                Person\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            directorID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ForeignKey(undefined)@Column({type: undefined, onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie-director/movie-director.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Movie\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Movie\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @BelongsTo(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie-director/movie-director.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            movieID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ForeignKey(undefined)@Column({type: undefined, onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie-director/movie-director.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Person\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Person\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @BelongsTo(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie-director/movie-director.entity.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BelongsTo,\n  Column,\n  DataType,\n  ForeignKey,\n  Model,\n  Table,\n} from 'sequelize-typescript';\nimport { Movie } from '../movie/movie.entity';\nimport { Person } from '../persons/persons.entity';\n\n@Table\nexport class MovieDirector extends Model {\n  @ForeignKey(() => Person)\n  @Column({\n    type: DataType.INTEGER,\n    onDelete: 'CASCADE',\n  })\n  directorID: number;\n\n  @BelongsTo(() => Person)\n  Person: Person;\n\n  @ForeignKey(() => Movie)\n  @Column({\n    type: DataType.INTEGER,\n    onDelete: 'CASCADE',\n  })\n  movieID: number;\n  @BelongsTo(() => Movie)\n  Movie: Movie;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MovieDirectorModule.html":{"url":"modules/MovieDirectorModule.html","title":"module - MovieDirectorModule","body":"\n                   \n\n\n\n\n    Modules\n    MovieDirectorModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MovieDirectorModule\n\n\n\ncluster_MovieDirectorModule_exports\n\n\n\ncluster_MovieDirectorModule_providers\n\n\n\n\nMovieDirectorService \n\nMovieDirectorService \n\n\n\nMovieDirectorModule\n\nMovieDirectorModule\n\nMovieDirectorService  -->\n\nMovieDirectorModule->MovieDirectorService \n\n\n\n\n\nMovieDirectorService\n\nMovieDirectorService\n\nMovieDirectorModule -->\n\nMovieDirectorService->MovieDirectorModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/movie-director/movie-director.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MovieDirectorService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MovieDirectorService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { movieDirectorProviders } from './movie-director.provider';\nimport { MovieDirectorService } from './movie-director.service';\n\n@Module({\n  providers: [MovieDirectorService, ...movieDirectorProviders],\n  exports: [MovieDirectorService],\n})\nexport class MovieDirectorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MovieDirectorService.html":{"url":"injectables/MovieDirectorService.html","title":"injectable - MovieDirectorService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MovieDirectorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/movie-director/movie-director.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(movieDirectorProviders)\n                    \n                \n                        \n                            \n                                Defined in src/modules/movie-director/movie-director.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        movieDirectorProviders\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(movieActor: directorMovieDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/movie-director/movie-director.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    movieActor\n                                    \n                                                directorMovieDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { MOVIEDIRECTOR_REPOSITORY } from 'src/core/constants';\nimport { directorMovieDTO } from './directorMovieDto';\nimport { MovieDirector } from './movie-director.entity';\n\n@Injectable()\nexport class MovieDirectorService {\n  constructor(\n    @Inject(MOVIEDIRECTOR_REPOSITORY)\n    private readonly movieDirectorProviders: typeof MovieDirector,\n  ) {}\n\n  async create(movieActor: directorMovieDTO) {\n    return this.movieDirectorProviders.create(\n      (movieActor as unknown) as MovieDirector,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MovieDto.html":{"url":"classes/MovieDto.html","title":"class - MovieDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MovieDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/movie/movieDto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                actors\n                            \n                            \n                                coverPhoto\n                            \n                            \n                                description\n                            \n                            \n                                directors\n                            \n                            \n                                genres\n                            \n                            \n                                ProductionHouseId\n                            \n                            \n                                title\n                            \n                            \n                                trailer\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            actors\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: Number, description: 'movie actors', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movieDto.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            coverPhoto\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: String, description: 'title of cover Photo', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movieDto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: String, description: 'movie description', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movieDto.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            directors\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: String, description: 'movie directors', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movieDto.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            genres\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: Number, description: 'movie genres', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movieDto.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ProductionHouseId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: Number, description: 'movie production house', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movieDto.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: String, description: 'title of movie', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movieDto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            trailer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: String, description: 'movie trailer link ', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movieDto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/movieDto.ts:53\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class MovieDto {\n  @ApiProperty({\n    type: String,\n    description: 'title of movie',\n    default: '',\n  })\n  title: string;\n  @ApiProperty({\n    type: String,\n    description: 'title of cover Photo',\n    default: '',\n  })\n  coverPhoto: string;\n  @ApiProperty({\n    type: String,\n    description: 'movie trailer link ',\n    default: '',\n  })\n  trailer: string;\n  @ApiProperty({\n    type: String,\n    description: 'movie description',\n    default: '',\n  })\n  description: string;\n  @ApiProperty({\n    type: Number,\n    description: 'movie production house',\n    default: '',\n  })\n  ProductionHouseId: number;\n  @ApiProperty({\n    type: Number,\n    description: 'movie actors',\n    default: '',\n  })\n  actors: number[];\n  @ApiProperty({\n    type: String,\n    description: 'movie directors',\n    default: '',\n  })\n  directors: number[];\n  @ApiProperty({\n    type: Number,\n    description: 'movie genres',\n    default: '',\n  })\n  genres: number[];\n\n  userId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MovieGenre.html":{"url":"classes/MovieGenre.html","title":"class - MovieGenre","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MovieGenre\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/movie-genres/movie_genre.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                genre\n                            \n                            \n                                genreID\n                            \n                            \n                                Movie\n                            \n                            \n                                movieID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            genre\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Genre\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @BelongsTo(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie-genres/movie_genre.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            genreID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ForeignKey(undefined)@Column({type: undefined, onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie-genres/movie_genre.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Movie\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Movie\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @BelongsTo(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie-genres/movie_genre.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            movieID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ForeignKey(undefined)@Column({type: undefined, onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie-genres/movie_genre.entity.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BelongsTo,\n  Column,\n  DataType,\n  ForeignKey,\n  Model,\n  Table,\n} from 'sequelize-typescript';\nimport { Genre } from '../genres/genre.entity';\nimport { Movie } from '../movie/movie.entity';\n\n@Table\nexport class MovieGenre extends Model {\n  @ForeignKey(() => Genre)\n  @Column({\n    type: DataType.INTEGER,\n    onDelete: 'CASCADE',\n  })\n  genreID: number;\n\n  @BelongsTo(() => Genre)\n  genre: Genre;\n\n  @ForeignKey(() => Movie)\n  @Column({\n    type: DataType.INTEGER,\n    onDelete: 'CASCADE',\n  })\n  movieID: number;\n  @BelongsTo(() => Movie)\n  Movie: Movie;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MovieGenresModule.html":{"url":"modules/MovieGenresModule.html","title":"module - MovieGenresModule","body":"\n                   \n\n\n\n\n    Modules\n    MovieGenresModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MovieGenresModule\n\n\n\ncluster_MovieGenresModule_providers\n\n\n\ncluster_MovieGenresModule_exports\n\n\n\n\nMovieGenresService \n\nMovieGenresService \n\n\n\nMovieGenresModule\n\nMovieGenresModule\n\nMovieGenresService  -->\n\nMovieGenresModule->MovieGenresService \n\n\n\n\n\nMovieGenresService\n\nMovieGenresService\n\nMovieGenresModule -->\n\nMovieGenresService->MovieGenresModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/movie-genres/movie-genres.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MovieGenresService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MovieGenresService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MovieGenresService } from './movie-genres.service';\nimport { movieGenreProviders } from './movie_genre.provider';\n\n@Module({\n  providers: [MovieGenresService, ...movieGenreProviders],\n  exports: [MovieGenresService],\n})\nexport class MovieGenresModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MovieGenresService.html":{"url":"injectables/MovieGenresService.html","title":"injectable - MovieGenresService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MovieGenresService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/movie-genres/movie-genres.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(movieGenreProviders)\n                    \n                \n                        \n                            \n                                Defined in src/modules/movie-genres/movie-genres.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        movieGenreProviders\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(movieGenre: genreMovieDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/movie-genres/movie-genres.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    movieGenre\n                                    \n                                                genreMovieDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { MOVIEGENRE_REPOSITORY } from 'src/core/constants';\nimport { genreMovieDTO } from './movie_genre.dto';\nimport { MovieGenre } from './movie_genre.entity';\n\n@Injectable()\nexport class MovieGenresService {\n  constructor(\n    @Inject(MOVIEGENRE_REPOSITORY)\n    private readonly movieGenreProviders: typeof MovieGenre,\n  ) {}\n\n  async create(movieGenre: genreMovieDTO) {\n    return this.movieGenreProviders.create(\n      (movieGenre as unknown) as MovieGenre,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MovieModule.html":{"url":"modules/MovieModule.html","title":"module - MovieModule","body":"\n                   \n\n\n\n\n    Modules\n    MovieModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MovieModule\n\n\n\ncluster_MovieModule_providers\n\n\n\ncluster_MovieModule_imports\n\n\n\ncluster_MovieModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nMovieModule\n\nMovieModule\n\nMovieModule -->\n\nAuthModule->MovieModule\n\n\n\n\n\nGenresModule\n\nGenresModule\n\nMovieModule -->\n\nGenresModule->MovieModule\n\n\n\n\n\nMovieDirectorModule\n\nMovieDirectorModule\n\nMovieModule -->\n\nMovieDirectorModule->MovieModule\n\n\n\n\n\nMovieGenresModule\n\nMovieGenresModule\n\nMovieModule -->\n\nMovieGenresModule->MovieModule\n\n\n\n\n\nPersonsModule\n\nPersonsModule\n\nMovieModule -->\n\nPersonsModule->MovieModule\n\n\n\n\n\nProductionHouseModule\n\nProductionHouseModule\n\nMovieModule -->\n\nProductionHouseModule->MovieModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nMovieModule -->\n\nUsersModule->MovieModule\n\n\n\n\n\nMovieService \n\nMovieService \n\nMovieService  -->\n\nMovieModule->MovieService \n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nMovieModule -->\n\nJwtAuthGuard->MovieModule\n\n\n\n\n\nMovieActorService\n\nMovieActorService\n\nMovieModule -->\n\nMovieActorService->MovieModule\n\n\n\n\n\nMovieService\n\nMovieService\n\nMovieModule -->\n\nMovieService->MovieModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/movie/movie.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            MovieActorService\n                        \n                        \n                            MovieService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MovieController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            GenresModule\n                        \n                        \n                            MovieDirectorModule\n                        \n                        \n                            MovieGenresModule\n                        \n                        \n                            PersonsModule\n                        \n                        \n                            ProductionHouseModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MovieService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MovieService } from './movie.service';\nimport { MovieController } from './movie.controller';\nimport { moviesProviders } from './movies.providers';\nimport { movieActorProviders } from './MovieActor.providers';\nimport { MovieActorService } from './movieActor.service';\nimport { MovieDirectorModule } from '../movie-director/movie-director.module';\nimport { MovieGenresModule } from '../movie-genres/movie-genres.module';\nimport { PersonsModule } from '../persons/persons.module';\nimport { GenresModule } from '../genres/genres.module';\nimport { ProductionHouseModule } from '../production-house/production-house.module';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { LocalStrategy } from '../auth/strategy/local.strategy';\nimport { JwtStrategy } from '../auth/strategy/jwt.strategy';\nimport { RolesGuard } from '../auth/guards/roles-guards';\nimport { JwtAuthGuard } from '../auth/guards/jwt-guards';\nimport { AuthModule } from '../auth/auth.module';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [\n    MulterModule.register({\n      dest: './src/uploads',\n    }),\n    AuthModule,\n    MovieDirectorModule,\n    MovieGenresModule,\n    PersonsModule,\n    GenresModule,\n    ProductionHouseModule,\n    UsersModule,\n  ],\n  providers: [\n    MovieService,\n    MovieActorService,\n    ...moviesProviders,\n    ...movieActorProviders,\n    RolesGuard,\n    JwtAuthGuard,\n  ],\n  exports: [MovieService],\n  controllers: [MovieController],\n})\nexport class MovieModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MovieService.html":{"url":"injectables/MovieService.html","title":"injectable - MovieService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MovieService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/movie/movie.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                averageRating\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteMovie\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findMovieOfAvgRating\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByTitle\n                            \n                            \n                                    Async\n                                search\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(movieRepository, movieActorServices: MovieActorService, movieDirectorServices: MovieDirectorService, movieGenreServices: MovieGenresService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/movie/movie.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        movieRepository\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        movieActorServices\n                                                  \n                                                        \n                                                                        MovieActorService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        movieDirectorServices\n                                                  \n                                                        \n                                                                        MovieDirectorService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        movieGenreServices\n                                                  \n                                                        \n                                                                        MovieGenresService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            averageRating\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    averageRating(movies: any, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/movie/movie.service.ts:177\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    movies\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(movieData: MovieDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/movie/movie.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    movieData\n                                    \n                                                MovieDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteMovie\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMovie(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/movie/movie.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(req)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/movie/movie.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findMovieOfAvgRating\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findMovieOfAvgRating(rate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/movie/movie.service.ts:192\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/movie/movie.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByTitle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByTitle(title: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/movie/movie.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            search\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    search(req)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/movie/movie.service.ts:202\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, body)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/movie/movie.service.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, HttpException, HttpStatus } from '@nestjs/common';\nimport { Movie } from './movie.entity';\nimport { MovieDto } from './movieDto';\nimport { MOVIE_REPOSITORY } from '../../core/constants';\nimport { MovieActor } from './MovieActor.entity';\nimport { MovieActorService } from './movieActor.service';\nimport { MovieDirectorService } from '../movie-director/movie-director.service';\nimport { MovieDirector } from '../movie-director/movie-director.entity';\nimport { MovieGenresService } from '../movie-genres/movie-genres.service';\nimport { MovieGenre } from '../movie-genres/movie_genre.entity';\nimport { Person } from '../persons/persons.entity';\nimport { Genre } from '../genres/genre.entity';\nimport { extname } from 'path';\nimport { Op } from 'sequelize';\nimport * as searchBuilder from 'sequelize-search-builder';\nimport APIFeatures from 'src/utlis/apiFeature';\nimport { title } from 'node:process';\n\n// import { ProductionHouse } from '../production-house/production-house.entity';\n\n@Injectable()\nexport class MovieService {\n  constructor(\n    @Inject(MOVIE_REPOSITORY) private readonly movieRepository: typeof Movie,\n\n    private movieActorServices: MovieActorService,\n    private movieDirectorServices: MovieDirectorService,\n    private movieGenreServices: MovieGenresService,\n  ) {}\n\n  async create(movieData: MovieDto) {\n    // const ProductionHouseId=movieData.ProductionHouseId;\n\n    const movie = await this.movieRepository.create(\n      (movieData as unknown) as Movie,\n    );\n    if (!movie) {\n      throw new HttpException(\n        'same email is not allowed',\n        HttpStatus.FORBIDDEN,\n      );\n    }\n    const id = movie.id;\n    let movieActor, movieDirector, movieGenre;\n\n    if (movieData.actors) {\n      movieData.actors.forEach(async (element) => {\n        movieActor = {\n          actorID: element,\n          movieID: id,\n        };\n        const movieActorInstance = this.movieActorServices.create(movieActor);\n        console.log(movieActorInstance);\n      });\n    }\n    if (movieData.directors) {\n      movieData.directors.forEach(async (element) => {\n        movieDirector = {\n          directorID: element,\n          movieID: id,\n        };\n        const movieActorInstance = this.movieDirectorServices.create(\n          movieDirector,\n        );\n        console.log(movieActorInstance);\n      });\n    }\n    if (movieData.genres) {\n      movieData.genres.forEach(async (element) => {\n        movieGenre = {\n          genreID: element,\n          movieID: id,\n        };\n        const movieActorInstance = this.movieGenreServices.create(movieGenre);\n        console.log(movieActorInstance);\n      });\n    }\n\n    if (!movie) {\n      throw new HttpException(\n        'same email is not allowed',\n        HttpStatus.FORBIDDEN,\n      );\n    }\n\n    return movie;\n  }\n\n  async findOneByTitle(title: string): Promise {\n    return await this.movieRepository.findOne({\n      where: { title },\n      include: [\n        { model: MovieActor, include: [{ model: Person }] },\n        { model: MovieDirector, include: [{ model: Person }] },\n        { model: MovieGenre, include: [{ model: Genre }] },\n      ],\n    });\n  }\n\n  public async findOneById(id: number): Promise {\n    return await this.movieRepository.findOne({\n      where: { id },\n      include: [\n        { model: MovieActor, include: [{ model: Person }] },\n        { model: MovieDirector, include: [{ model: Person }] },\n        { model: MovieGenre, include: [{ model: Genre }] },\n      ],\n    });\n  }\n\n  async findAll(req): Promise {\n    const pageAsNumber = Number.parseInt(req.query.page);\n    const limitAsNumber = Number.parseInt(req.query.limit);\n    let page = 0;\n    if (!Number.isNaN(pageAsNumber) && pageAsNumber > 0) {\n      page = pageAsNumber;\n    }\n    let limit = 10;\n    if (\n      !Number.isNaN(limitAsNumber) &&\n      limitAsNumber > 0 &&\n      limitAsNumber ({\n      limit: limit,\n      offset: page * limit,\n      include: [\n        { model: MovieActor, include: [{ model: Person }] },\n        { model: MovieDirector, include: [{ model: Person }] },\n        { model: MovieGenre, include: [{ model: Genre }] },\n      ],\n    });\n\n    return movie as any;\n  }\n\n  async deleteMovie(id: number): Promise {\n    const Movie: Movie = await this.movieRepository\n      .findOne({\n        where: { id },\n      })\n      .then((result) => {\n        return this.movieRepository.destroy({ where: { id } }).then((u) => {\n          return result;\n        });\n      });\n    if (!Movie) {\n      throw new HttpException('No Data Found', HttpStatus.NOT_FOUND);\n    }\n    return Movie;\n  }\n\n  async update(id: number, body): Promise {\n    const Movie: Movie = await this.movieRepository.findOne({ where: { id } });\n\n    if (body.title != '') {\n      Movie.title = body.title;\n    }\n    if (body.coverPhoto != '') {\n      Movie.coverPhoto = body.coverPhoto;\n    }\n    if (body.trailer != '') {\n      Movie.trailer = body.trailer;\n    }\n    if (body.description != '') {\n      Movie.description = body.description;\n    }\n    if (body.ProductionHouseId != '') {\n      Movie.ProductionHouseId = body.ProductionHouseId;\n    }\n    Movie.save();\n    return Movie;\n  }\n\n  public async averageRating(movies: any, id: number) {\n    const movie: Movie = await this.findOneById(id);\n\n    let count = 0;\n    let avgRate: number = 0;\n    movies.forEach((el) => {\n      avgRate = avgRate + el.rate;\n      count = count + 1;\n    });\n    avgRate = avgRate / count;\n    console.log(avgRate);\n    movie.averageRating = avgRate;\n    movie.save();\n    return movie.averageRating;\n  }\n  async findMovieOfAvgRating(rate: number) {\n    const movie: Movie[] = await this.movieRepository.findAll({\n      where: { averageRating: { [Op.gte]: rate } },\n      include: [\n        { model: MovieActor, include: [{ model: Person }] },\n        { model: MovieDirector, include: [{ model: Person }] },\n        { model: MovieGenre, include: [{ model: Genre }] },\n      ],\n    });\n  }\n  async search(req) {\n    // const filter = req.query.filter;\n    // console.log(req.query.filter);\n    // const data = req.query;\n    // Object.entries(data).forEach(([key, val]: any) =>\n    //   isNaN(val) ? (data[key] = { [Op.like]: '%' + val + '%' }) : val,\n    // );\n    // console.log(data);\n    // return await this.movieRepository.findAndCountAll({\n    //   where: data,\n    // });\n\n    const search = new searchBuilder(Movie, req.query),\n      whereQuery = search.getWhereQuery(),\n      orderQuery = search.getOrderQuery(),\n      limitQuery = search.getLimitQuery(),\n      offsetQuery = search.getOffsetQuery();\n\n    return await Movie.findAll({\n      include: [{ all: true, nested: true, duplicating: false }],\n      where: whereQuery,\n      order: orderQuery,\n      limit: limitQuery,\n      offset: offsetQuery,\n      logging: console.log,\n    });\n  }\n}\n\nexport const imageFileFilter = (req, file, callback) => {\n  if (!file.originalname.match(/\\.(jpg|jpeg|png|gif|PNG)$/)) {\n    return callback(\n      new HttpException(\n        'only jpg|jpeg|png|gif files allow',\n        HttpStatus.FORBIDDEN,\n      ),\n      false,\n    );\n  }\n  callback(null, true);\n};\n\nexport const editFileName = async (req, file, callback) => {\n  console.log(req.params.id);\n  const id = req.params.id;\n  const movie = await Movie.findOne({ where: { id } });\n  console.log(movie);\n\n  const name = movie.title;\n  const fileExtName = extname(file.originalname);\n\n  callback(null, `${name}${fileExtName}`);\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Person.html":{"url":"classes/Person.html","title":"class - Person","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Person\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/persons/persons.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                MovieActor\n                            \n                            \n                                MovieDirector\n                            \n                            \n                                name\n                            \n                            \n                                profession\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined, allowNull: false, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/persons/persons.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MovieActor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MovieActor\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @HasMany(undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/persons/persons.entity.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MovieDirector\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MovieDirector\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @HasMany(undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/persons/persons.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined, allowNull: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/persons/persons.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            profession\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined, allowNull: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/persons/persons.entity.ts:32\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BelongsToMany,\n  Column,\n  DataType,\n  ForeignKey,\n  HasMany,\n  HasOne,\n  Model,\n  Table,\n} from 'sequelize-typescript';\nimport { MovieDirector } from '../movie-director/movie-director.entity';\nimport { Movie } from '../movie/movie.entity';\nimport { MovieActor } from '../movie/MovieActor.entity';\n\n@Table\nexport class Person extends Model {\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  name: string;\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: true,\n  })\n  email: string;\n  @Column({\n    type: DataType.TEXT,\n    allowNull: false,\n  })\n  profession: string;\n\n  @HasMany(() => MovieDirector, { onDelete: 'CASCADE' })\n  MovieDirector: MovieDirector;\n  @HasMany(() => MovieActor, { onDelete: 'CASCADE' })\n  MovieActor: MovieActor;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PersonDto.html":{"url":"classes/PersonDto.html","title":"class - PersonDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PersonDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/persons/personDTO.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                profession\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/persons/personDTO.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/persons/personDTO.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            profession\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/persons/personDTO.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/persons/personDTO.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PersonDto {\n  readonly name: string;\n  readonly email: string;\n  readonly profession: string;\n  userId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PersonsController.html":{"url":"controllers/PersonsController.html","title":"controller - PersonsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PersonsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/persons/persons.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                persons\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                Add\n                            \n                            \n                                    Async\n                                deleteById\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getByName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            Add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    Add(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @hasRoles(Role.Admin)@UseGuards(JwtAuthGuard, RolesGuard)@Post('add')\n                \n            \n\n            \n                \n                    Defined in src/modules/persons/persons.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteById(param)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @hasRoles(Role.Admin)@UseGuards(JwtAuthGuard, RolesGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/persons/persons.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/persons/persons.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(param)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/email/:email')\n                \n            \n\n            \n                \n                    Defined in src/modules/persons/persons.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(param)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/persons/persons.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getByName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByName(param)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/name/:name')\n                \n            \n\n            \n                \n                    Defined in src/modules/persons/persons.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { hasRoles } from '../auth/decorators/roles.decorators';\nimport { JwtAuthGuard } from '../auth/guards/jwt-guards';\nimport { RolesGuard } from '../auth/guards/roles-guards';\nimport { Role } from '../roles.enum';\nimport { PersonDto } from './personDTO';\nimport { PersonsService } from './persons.service';\n\n@Controller('persons')\nexport class PersonsController {\n  constructor(private personServices: PersonsService) {}\n\n  @hasRoles(Role.Admin)\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Post('add')\n  async Add(@Request() req) {\n    const obj: PersonDto = req.body;\n\n    obj.userId = req.user.id;\n    return await this.personServices.create(obj);\n  }\n  @Get()\n  async getAll() {\n    return await this.personServices.findAll();\n  }\n  @Get(':id')\n  async getById(@Param() param) {\n    return await this.personServices.findOneById(param.id);\n  }\n  @Get('/email/:email')\n  async getByEmail(@Param() param) {\n    return await this.personServices.findOneByEmail(param.email);\n  }\n  @Get('/name/:name')\n  async getByName(@Param() param) {\n    return await this.personServices.findOneByName(param.name);\n  }\n  @hasRoles(Role.Admin)\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Delete(':id')\n  async deleteById(@Param() param) {\n    return await this.personServices.deletePerson(param.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PersonsModule.html":{"url":"modules/PersonsModule.html","title":"module - PersonsModule","body":"\n                   \n\n\n\n\n    Modules\n    PersonsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PersonsModule\n\n\n\ncluster_PersonsModule_imports\n\n\n\ncluster_PersonsModule_exports\n\n\n\ncluster_PersonsModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nPersonsModule\n\nPersonsModule\n\nPersonsModule -->\n\nAuthModule->PersonsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPersonsModule -->\n\nUsersModule->PersonsModule\n\n\n\n\n\nPersonsService \n\nPersonsService \n\nPersonsService  -->\n\nPersonsModule->PersonsService \n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nPersonsModule -->\n\nJwtAuthGuard->PersonsModule\n\n\n\n\n\nPersonsService\n\nPersonsService\n\nPersonsModule -->\n\nPersonsService->PersonsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/persons/persons.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            PersonsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PersonsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PersonsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PersonsService } from './persons.service';\nimport { PersonsController } from './persons.controller';\nimport { personsProviders } from './persons.providers';\nimport { AuthModule } from '../auth/auth.module';\nimport { LocalStrategy } from '../auth/strategy/local.strategy';\nimport { JwtStrategy } from '../auth/strategy/jwt.strategy';\nimport { RolesGuard } from '../auth/guards/roles-guards';\nimport { JwtAuthGuard } from '../auth/guards/jwt-guards';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [UsersModule, AuthModule],\n\n  exports: [PersonsService],\n  providers: [PersonsService, ...personsProviders, RolesGuard, JwtAuthGuard],\n  controllers: [PersonsController],\n})\nexport class PersonsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PersonsService.html":{"url":"injectables/PersonsService.html","title":"injectable - PersonsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PersonsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/persons/persons.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deletePerson\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByName\n                            \n                            \n                                    Async\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(personRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/persons/persons.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        personRepository\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(person: PersonDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/persons/persons.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    person\n                                    \n                                                PersonDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deletePerson\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePerson(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/persons/persons.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/persons/persons.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/persons/persons.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/persons/persons.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/persons/persons.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            search\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    search(req)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/persons/persons.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, HttpException, HttpStatus } from '@nestjs/common';\nimport { Person } from './persons.entity';\nimport { PersonDto } from './personDTO';\nimport { PERSON_REPOSITORY } from '../../core/constants/index';\nimport { Movie } from '../movie/movie.entity';\nimport { MovieActor } from '../movie/MovieActor.entity';\nimport { MovieDirector } from '../movie-director/movie-director.entity';\nimport * as searchBuilder from 'sequelize-search-builder';\n\n@Injectable()\nexport class PersonsService {\n  constructor(\n    @Inject(PERSON_REPOSITORY) private readonly personRepository: typeof Person,\n  ) {}\n\n  async create(person: PersonDto): Promise {\n    return await this.personRepository.create(\n      (person as unknown) as Person,\n    );\n  }\n  async findAll(): Promise {\n    const person: Person[] = await this.personRepository.findAll({\n      include: [\n        { model: MovieActor, include: [{ model: Movie }] },\n        { model: MovieDirector, include: [{ model: Movie }] },\n      ],\n    });\n    console.log(person);\n    if (person.length == 0) {\n      throw new HttpException('No Data Found', HttpStatus.NOT_FOUND);\n    }\n\n    return person;\n  }\n\n  async findOneByEmail(email: string): Promise {\n    const person: Person = await this.personRepository.findOne({\n      where: { email },\n      include: [\n        { model: MovieActor, include: [{ model: Movie }] },\n        { model: MovieDirector, include: [{ model: Movie }] },\n      ],\n    });\n    if (!person) {\n      throw new HttpException('No Data Found', HttpStatus.NOT_FOUND);\n    }\n\n    return person;\n  }\n  async findOneByName(name: string): Promise {\n    const person: Person = await this.personRepository.findOne({\n      where: { name },\n      include: [\n        { model: MovieActor, include: [{ model: Movie }] },\n        { model: MovieDirector, include: [{ model: Movie }] },\n      ],\n    });\n    if (!person) {\n      throw new HttpException('No Data Found', HttpStatus.NOT_FOUND);\n    }\n\n    return person;\n  }\n  async findOneById(id: number): Promise {\n    const person: Person = await this.personRepository.findOne({\n      where: { id },\n    });\n    if (!person) {\n      throw new HttpException('No Data Found', HttpStatus.NOT_FOUND);\n    }\n\n    return person;\n  }\n\n  async deletePerson(id: number): Promise {\n    const person: Person = await this.personRepository\n      .findOne({\n        where: { id },\n      })\n      .then((result) => {\n        return this.personRepository.destroy({ where: { id } }).then((u) => {\n          return result;\n        });\n      });\n    if (!person) {\n      throw new HttpException('No Data Found', HttpStatus.NOT_FOUND);\n    }\n    return person;\n  }\n  async search(req) {\n    // const filter = req.query.filter;\n    // console.log(req.query.filter);\n    // const data = req.query;\n    // Object.entries(data).forEach(([key, val]: any) =>\n    //   isNaN(val) ? (data[key] = { [Op.like]: '%' + val + '%' }) : val,\n    // );\n    // console.log(data);\n    // return await this.movieRepository.findAndCountAll({\n    //   where: data,\n    // });\n\n    const search = new searchBuilder(Person, req.query),\n      whereQuery = search.getWhereQuery(),\n      orderQuery = search.getOrderQuery(),\n      limitQuery = search.getLimitQuery(),\n      offsetQuery = search.getOffsetQuery();\n\n    return await Person.findAll({\n      include: [{ all: true, nested: true, duplicating: false }],\n      where: whereQuery,\n      order: orderQuery,\n      limit: limitQuery,\n      offset: offsetQuery,\n      logging: console.log,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductionDto.html":{"url":"classes/ProductionDto.html","title":"class - ProductionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/production-house/ProductionHouse.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                address\n                            \n                            \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            address\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/production-house/ProductionHouse.dto.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/production-house/ProductionHouse.dto.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ProductionDto {\n  readonly name: string;\n  readonly address: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductionHouse.html":{"url":"classes/ProductionHouse.html","title":"class - ProductionHouse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductionHouse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/production-house/production-house.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                Movie\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            address\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/production-house/production-house.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Movie\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Movie\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @HasMany(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/production-house/production-house.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined, allowNull: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/production-house/production-house.entity.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Table,\n  Column,\n  Model,\n  DataType,\n  ForeignKey,\n  HasMany,\n  BelongsTo,\n} from 'sequelize-typescript';\nimport { Movie } from '../movie/movie.entity';\n\n@Table\nexport class ProductionHouse extends Model {\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  name: string;\n\n  @Column({\n    type: DataType.TEXT,\n  })\n  address: string;\n\n  @HasMany(() => Movie)\n  Movie: Movie;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductionHouseController.html":{"url":"controllers/ProductionHouseController.html","title":"controller - ProductionHouseController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductionHouseController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/production-house/production-house.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                productionhouse\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                Add\n                            \n                            \n                                    Async\n                                deleteById\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getByName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            Add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    Add(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @hasRoles(Role.Admin)@UseGuards(JwtAuthGuard, RolesGuard)@Post('add')\n                \n            \n\n            \n                \n                    Defined in src/modules/production-house/production-house.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteById(param)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @hasRoles(Role.Admin)@UseGuards(JwtAuthGuard, RolesGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/production-house/production-house.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/production-house/production-house.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(param)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/production-house/production-house.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getByName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByName(param)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('name/:name')\n                \n            \n\n            \n                \n                    Defined in src/modules/production-house/production-house.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { hasRoles } from '../auth/decorators/roles.decorators';\nimport { JwtAuthGuard } from '../auth/guards/jwt-guards';\nimport { RolesGuard } from '../auth/guards/roles-guards';\nimport { Role } from '../roles.enum';\nimport { ProductionHouseService } from './production-house.service';\n\n@Controller('productionhouse')\nexport class ProductionHouseController {\n  constructor(private proHService: ProductionHouseService) {}\n  @hasRoles(Role.Admin)\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Post('add')\n  async Add(@Request() req) {\n    return await this.proHService.create(req.body);\n  }\n  @Get()\n  async getAll() {\n    return await this.proHService.findAll();\n  }\n  @Get(':id')\n  async getById(@Param() param) {\n    return await this.proHService.findOneById(param.id);\n  }\n  @Get('name/:name')\n  async getByName(@Param() param) {\n    return await this.proHService.findOneByName(param.name);\n  }\n  @hasRoles(Role.Admin)\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Delete(':id')\n  async deleteById(@Param() param) {\n    return await this.proHService.deletePerson(param.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductionHouseModule.html":{"url":"modules/ProductionHouseModule.html","title":"module - ProductionHouseModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductionHouseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProductionHouseModule\n\n\n\ncluster_ProductionHouseModule_providers\n\n\n\ncluster_ProductionHouseModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nProductionHouseModule\n\nProductionHouseModule\n\nProductionHouseModule -->\n\nAuthModule->ProductionHouseModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nProductionHouseModule -->\n\nUsersModule->ProductionHouseModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nProductionHouseModule -->\n\nJwtAuthGuard->ProductionHouseModule\n\n\n\n\n\nProductionHouseService\n\nProductionHouseService\n\nProductionHouseModule -->\n\nProductionHouseService->ProductionHouseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/production-house/production-house.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            ProductionHouseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductionHouseController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductionHouseService } from './production-house.service';\nimport { ProductionHouseController } from './production-house.controller';\nimport { productionHouseProviders } from './production-house.providers';\nimport { LocalStrategy } from '../auth/strategy/local.strategy';\nimport { JwtStrategy } from '../auth/strategy/jwt.strategy';\nimport { RolesGuard } from '../auth/guards/roles-guards';\nimport { JwtAuthGuard } from '../auth/guards/jwt-guards';\nimport { PassportModule } from '@nestjs/passport';\nimport { UsersModule } from '../users/users.module';\nimport { AuthModule } from '../auth/auth.module';\n\n@Module({\n  imports: [UsersModule, AuthModule],\n  providers: [\n    ProductionHouseService,\n    ...productionHouseProviders,\n    RolesGuard,\n    JwtAuthGuard,\n  ],\n  controllers: [ProductionHouseController],\n})\nexport class ProductionHouseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductionHouseService.html":{"url":"injectables/ProductionHouseService.html","title":"injectable - ProductionHouseService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ProductionHouseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/production-house/production-house.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deletePerson\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByName\n                            \n                            \n                                    Async\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(proHRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/production-house/production-house.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        proHRepository\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(person: ProductionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/production-house/production-house.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    person\n                                    \n                                                ProductionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deletePerson\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePerson(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/production-house/production-house.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/production-house/production-house.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/production-house/production-house.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/production-house/production-house.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            search\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    search(req)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/production-house/production-house.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common';\nimport { PRODUCTIONHOUSE_REPOSITORY } from 'src/core/constants';\nimport { Movie } from '../movie/movie.entity';\nimport { ProductionHouse } from './production-house.entity';\nimport { ProductionDto } from './ProductionHouse.dto';\nimport * as searchBuilder from 'sequelize-search-builder';\n\n@Injectable()\nexport class ProductionHouseService {\n  constructor(\n    @Inject(PRODUCTIONHOUSE_REPOSITORY)\n    private readonly proHRepository: typeof ProductionHouse,\n  ) {}\n  async create(person: ProductionDto): Promise {\n    return await this.proHRepository.create(\n      (person as unknown) as ProductionHouse,\n    );\n  }\n  async findAll(): Promise {\n    const proHouse: ProductionHouse[] = await this.proHRepository.findAll(\n      { include: [{ model: Movie }] },\n    );\n    console.log(proHouse);\n    if (proHouse.length == 0) {\n      throw new HttpException('No Data Found', HttpStatus.NOT_FOUND);\n    }\n\n    return proHouse;\n  }\n\n  async findOneByName(name: string): Promise {\n    const proHouse: ProductionHouse = await this.proHRepository.findOne(\n      {\n        where: { name },\n      },\n    );\n    if (!proHouse) {\n      throw new HttpException('No Data Found', HttpStatus.NOT_FOUND);\n    }\n\n    return proHouse;\n  }\n  async findOneById(id: number): Promise {\n    const proHouse: ProductionHouse = await this.proHRepository.findOne(\n      {\n        where: { id },\n      },\n    );\n    if (!proHouse) {\n      throw new HttpException('No Data Found', HttpStatus.NOT_FOUND);\n    }\n\n    return proHouse;\n  }\n\n  async deletePerson(id: number): Promise {\n    const proHouse: ProductionHouse = await this.proHRepository\n      .findOne({\n        where: { id },\n      })\n      .then((result) => {\n        return this.proHRepository.destroy({ where: { id } }).then((u) => {\n          return result;\n        });\n      });\n    if (!proHouse) {\n      throw new HttpException('No Data Found', HttpStatus.NOT_FOUND);\n    }\n    return proHouse;\n  }\n  async search(req) {\n    // const filter = req.query.filter;\n    // console.log(req.query.filter);\n    // const data = req.query;\n    // Object.entries(data).forEach(([key, val]: any) =>\n    //   isNaN(val) ? (data[key] = { [Op.like]: '%' + val + '%' }) : val,\n    // );\n    // console.log(data);\n    // return await this.movieRepository.findAndCountAll({\n    //   where: data,\n    // });\n\n    const search = new searchBuilder(ProductionHouse, req.query),\n      whereQuery = search.getWhereQuery(),\n      orderQuery = search.getOrderQuery(),\n      limitQuery = search.getLimitQuery(),\n      offsetQuery = search.getOffsetQuery();\n\n    return await ProductionHouse.findAll({\n      include: [{ all: true, nested: true, duplicating: false }],\n      where: whereQuery,\n      order: orderQuery,\n      limit: limitQuery,\n      offset: offsetQuery,\n      logging: console.log,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Profile.html":{"url":"classes/Profile.html","title":"class - Profile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                profilePicture\n                            \n                            \n                                User\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined, allowNull: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined, allowNull: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            profilePicture\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            User\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @BelongsTo(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ForeignKey(undefined)@Column({type: undefined, onDelete: 'CASCADE', allowNull: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/profile.entity.ts:30\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BelongsTo,\n  Column,\n  DataType,\n  ForeignKey,\n  Model,\n  Table,\n} from 'sequelize-typescript';\nimport { User } from '../users/user.entity';\n\n@Table\nexport class Profile extends Model {\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  firstName: string;\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  lastName: string;\n\n  @ForeignKey(() => User)\n  @Column({\n    type: DataType.INTEGER,\n    onDelete: 'CASCADE',\n    allowNull: false,\n  })\n  userId: number;\n  @Column({\n    type: DataType.STRING,\n  })\n  profilePicture: string;\n\n  @BelongsTo(() => User)\n  User: User;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileController.html":{"url":"controllers/ProfileController.html","title":"controller - ProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth/user/profile\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProfile\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                updateProfile\n                            \n                            \n                                    Async\n                                uploadedFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/profile.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/profile.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/profile.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            uploadedFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadedFile(param, file)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('profilePic/:id')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/profile.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Param,\n  Post,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n  Request,\n  Get,\n  Patch,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { JwtAuthGuard } from '../auth/guards/jwt-guards';\nimport {\n  editFileName,\n  imageFileFilter,\n  ProfileService,\n} from './profile.service';\nimport { diskStorage } from 'multer';\nimport { User } from '../users/user.entity';\n\n@Controller('auth/user/profile')\nexport class ProfileController {\n  constructor(private profileServices: ProfileService) {}\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async createProfile(@Request() req) {\n    return await this.profileServices.creatProfile(req);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('profilePic/:id')\n  @UseInterceptors(\n    FileInterceptor('image', {\n      storage: diskStorage({\n        destination: './uploads',\n        filename: editFileName,\n      }),\n      fileFilter: imageFileFilter,\n    }),\n  )\n  async uploadedFile(@Param() param, @UploadedFile() file) {\n    // const user = await User.findOne({where:{id:req.user.id}})\n\n    console.log(param.id);\n    const profile = await this.profileServices.getProfile(param.id);\n    profile.profilePicture = file.filename;\n    await profile.save();\n    const response = {\n      originalname: file.originalname,\n      filename: file.filename,\n    };\n\n    return response;\n  }\n\n  @Get()\n  async getProfile(@Request() req) {\n    return await this.profileServices.getProfile(req.user.id);\n  }\n  @Patch()\n  async updateProfile(@Request() req) {\n    return await this.profileServices.updateProfile(req.body, req.user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileModule.html":{"url":"modules/ProfileModule.html","title":"module - ProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\ncluster_ProfileModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nProfileModule\n\nProfileModule\n\nProfileModule -->\n\nAuthModule->ProfileModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nProfileModule -->\n\nUsersModule->ProfileModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/profile/profile.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProfileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProfileController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { profileProviders } from './profile.providers';\nimport { ProfileService } from './profile.service';\nimport { ProfileController } from './profile.controller';\nimport { UsersModule } from '../users/users.module';\nimport { AuthModule } from '../auth/auth.module';\n\n@Module({\n  imports: [\n    UsersModule,\n    AuthModule,\n    MulterModule.register({\n      dest: './uploads',\n    }),\n  ],\n  providers: [ProfileService, ...profileProviders],\n  controllers: [ProfileController],\n})\nexport class ProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                creatProfile\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(profileRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/profile/profile.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        profileRepository\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            creatProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    creatProfile(req)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(id)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfile(user, id)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { extname } from 'path';\nimport { PROFILE_REPOSITORY } from 'src/core/constants';\nimport { Profile } from './profile.entity';\n\n@Injectable()\nexport class ProfileService {\n  constructor(\n    @Inject(PROFILE_REPOSITORY) private profileRepository: typeof Profile,\n  ) {}\n\n  async creatProfile(req) {\n    let profile = {\n      firstName: req.body.firstName,\n      lastName: req.body.lastName,\n      userId: req.user.id,\n    };\n    const newProfile = await this.profileRepository.create(profile as Profile);\n\n    return newProfile;\n  }\n  async updateProfile(user, id) {\n    const profile = await this.profileRepository.findOne({\n      where: { userId: id },\n    });\n\n    if (user.firstName != '') {\n      profile.firstName = user.firstName;\n    }\n    if (user.lastName != '') {\n      profile.lastName = user.lastName;\n    }\n    profile.save();\n    return profile;\n  }\n  async getProfile(id) {\n    return await this.profileRepository.findOne({ where: { id } });\n  }\n}\n\nexport const imageFileFilter = (req, file, callback) => {\n  if (!file.originalname.match(/\\.(jpg|jpeg|png|gif|PNG)$/)) {\n    return callback(new Error('Only image files are allowed!'), false);\n  }\n  callback(null, true);\n};\n\nexport const editFileName = async (req, file, callback) => {\n  console.log(req.params.id);\n  const user = req.user.name;\n\n  const name = user;\n  const fileExtName = extname(file.originalname);\n\n  callback(null, `${name}${fileExtName}`);\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Rate.html":{"url":"classes/Rate.html","title":"class - Rate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Rate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rateing/rate.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                movie\n                            \n                            \n                                movieID\n                            \n                            \n                                rate\n                            \n                            \n                                user\n                            \n                            \n                                userID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            movie\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Movie\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @BelongsTo(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/rateing/rate.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            movieID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ForeignKey(undefined)@PrimaryKey()@Column({type: undefined, onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/rateing/rate.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/rateing/rate.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @BelongsTo(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/rateing/rate.entity.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ForeignKey(undefined)@PrimaryKey()@Column({type: undefined, onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/rateing/rate.entity.ts:37\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BelongsTo,\n  Column,\n  DataType,\n  ForeignKey,\n  Model,\n  PrimaryKey,\n  Table,\n} from 'sequelize-typescript';\nimport { Movie } from '../movie/movie.entity';\nimport { User } from '../users/user.entity';\n\n@Table\nexport class Rate extends Model {\n  @Column({\n    type: DataType.INTEGER,\n  })\n  rate: number;\n\n  @ForeignKey(() => Movie)\n  @PrimaryKey\n  @Column({\n    type: DataType.INTEGER,\n    onDelete: 'CASCADE',\n  })\n  movieID: number;\n\n  @BelongsTo(() => Movie)\n  movie: Movie;\n\n  @ForeignKey(() => User)\n  @PrimaryKey\n  @Column({\n    type: DataType.INTEGER,\n    onDelete: 'CASCADE',\n  })\n  userID: number;\n\n  @BelongsTo(() => User)\n  user: User;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RateingController.html":{"url":"controllers/RateingController.html","title":"controller - RateingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RateingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rateing/rateing.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/rating\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                Add\n                            \n                            \n                                    Async\n                                getByyMovieId\n                            \n                            \n                                    Async\n                                getByyUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            Add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    Add(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/modules/rateing/rateing.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getByyMovieId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByyMovieId(param)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @hasRoles(Role.Admin)@UseGuards(JwtAuthGuard, RolesGuard)@Get(':movieId')\n                \n            \n\n            \n                \n                    Defined in src/modules/rateing/rateing.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getByyUserId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByyUserId(param)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @hasRoles(Role.Admin)@UseGuards(JwtAuthGuard, RolesGuard)@Get('user/:userId')\n                \n            \n\n            \n                \n                    Defined in src/modules/rateing/rateing.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Post,\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { hasRoles } from '../auth/decorators/roles.decorators';\nimport { JwtAuthGuard } from '../auth/guards/jwt-guards';\nimport { RolesGuard } from '../auth/guards/roles-guards';\nimport { Role } from '../roles.enum';\nimport { RatingService } from './rateing.service';\n\n@Controller('user/rating')\nexport class RateingController {\n  constructor(private rateServices: RatingService) {}\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async Add(@Request() req) {\n    return await this.rateServices.rateAMovie(req);\n  }\n  @hasRoles(Role.Admin)\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Get(':movieId')\n  async getByyMovieId(@Param() param) {\n    return await this.rateServices.rateAMovieByAMovie(param.movieId);\n  }\n\n  @hasRoles(Role.Admin)\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Get('user/:userId')\n  async getByyUserId(@Param() param) {\n    return await this.rateServices.rateAMovieByAUser(param.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RateingModule.html":{"url":"modules/RateingModule.html","title":"module - RateingModule","body":"\n                   \n\n\n\n\n    Modules\n    RateingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RateingModule\n\n\n\ncluster_RateingModule_providers\n\n\n\ncluster_RateingModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nRateingModule\n\nRateingModule\n\nRateingModule -->\n\nAuthModule->RateingModule\n\n\n\n\n\nMovieModule\n\nMovieModule\n\nRateingModule -->\n\nMovieModule->RateingModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nRateingModule -->\n\nUsersModule->RateingModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nRateingModule -->\n\nJwtAuthGuard->RateingModule\n\n\n\n\n\nRatingService\n\nRatingService\n\nRateingModule -->\n\nRatingService->RateingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/rateing/rateing.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            RatingService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RateingController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MovieModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RatingService } from './rateing.service';\nimport { RateingController } from './rateing.controller';\nimport { JwtModule, JwtService } from '@nestjs/jwt';\nimport { LocalStrategy } from '../auth/strategy/local.strategy';\nimport { JwtStrategy } from '../auth/strategy/jwt.strategy';\nimport { RolesGuard } from '../auth/guards/roles-guards';\nimport { JwtAuthGuard } from '../auth/guards/jwt-guards';\nimport { UsersModule } from '../users/users.module';\nimport { rateProviders } from './rate.providers';\nimport { MovieModule } from '../movie/movie.module';\nimport { AuthModule } from '../auth/auth.module';\n\n@Module({\n  imports: [\n    UsersModule,\n    AuthModule,\n    MovieModule,\n    JwtModule.register({\n      secret: process.env.JWTKEY,\n      signOptions: { expiresIn: process.env.TOKEN_EXPIRATION },\n    }),\n  ],\n  providers: [RatingService, ...rateProviders, JwtAuthGuard, RolesGuard],\n  controllers: [RateingController],\n})\nexport class RateingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RatingService.html":{"url":"injectables/RatingService.html","title":"injectable - RatingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RatingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rateing/rateing.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                rateAMovie\n                            \n                            \n                                    Async\n                                rateAMovieByAMovie\n                            \n                            \n                                    Async\n                                rateAMovieByAUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, rateRepository, movieServices: MovieService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/rateing/rateing.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rateRepository\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        movieServices\n                                                  \n                                                        \n                                                                        MovieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            rateAMovie\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    rateAMovie(req: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/rateing/rateing.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            rateAMovieByAMovie\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    rateAMovieByAMovie(movieID: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/rateing/rateing.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    movieID\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            rateAMovieByAUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    rateAMovieByAUser(userID: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/rateing/rateing.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, Inject, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Op } from 'sequelize';\nimport { RATE_REPOSITORY } from 'src/core/constants';\nimport { Movie } from '../movie/movie.entity';\nimport { MovieService } from '../movie/movie.service';\nimport { User } from '../users/user.entity';\nimport { Rate } from './rate.entity';\n\n@Injectable()\nexport class RatingService {\n  constructor(\n    private jwtService: JwtService,\n    @Inject(RATE_REPOSITORY) private readonly rateRepository: typeof Rate,\n    private movieServices: MovieService,\n  ) {}\n  async rateAMovie(req: any) {\n    console.log(req.headers.authorization);\n    const rawToken = req.headers.authorization;\n    const token = rawToken.split('Bearer ')[1];\n    console.log(token);\n    const json: any = this.jwtService.decode(token);\n    console.log(json.id);\n\n    let rate = {\n      userID: json.id,\n      movieID: req.body.movieID,\n      rate: req.body.rate,\n    };\n    if (req.body.rate > 5 || req.body.rate \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Review.html":{"url":"classes/Review.html","title":"class - Review","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Review\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/review/review.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                movie\n                            \n                            \n                                movieID\n                            \n                            \n                                review\n                            \n                            \n                                user\n                            \n                            \n                                userID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            movie\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Movie\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @BelongsTo(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/review/review.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            movieID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ForeignKey(undefined)@PrimaryKey()@Column({type: undefined, onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/review/review.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            review\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/review/review.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @BelongsTo(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/review/review.entity.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ForeignKey(undefined)@PrimaryKey()@Column({type: undefined, onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/review/review.entity.ts:37\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BelongsTo,\n  Column,\n  DataType,\n  ForeignKey,\n  Model,\n  PrimaryKey,\n  Table,\n} from 'sequelize-typescript';\nimport { Movie } from '../movie/movie.entity';\nimport { User } from '../users/user.entity';\n\n@Table\nexport class Review extends Model {\n  @Column({\n    type: DataType.TEXT,\n  })\n  review: string;\n\n  @ForeignKey(() => Movie)\n  @PrimaryKey\n  @Column({\n    type: DataType.INTEGER,\n    onDelete: 'CASCADE',\n  })\n  movieID: number;\n\n  @BelongsTo(() => Movie)\n  movie: Movie;\n\n  @ForeignKey(() => User)\n  @PrimaryKey\n  @Column({\n    type: DataType.INTEGER,\n    onDelete: 'CASCADE',\n  })\n  userID: number;\n\n  @BelongsTo(() => User)\n  user: User;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ReviewController.html":{"url":"controllers/ReviewController.html","title":"controller - ReviewController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ReviewController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/review/review.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                review\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                Add\n                            \n                            \n                                    Async\n                                getByyMovieId\n                            \n                            \n                                    Async\n                                getByyUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            Add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    Add(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/modules/review/review.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getByyMovieId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByyMovieId(param)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @hasRoles(Role.Admin)@UseGuards(JwtAuthGuard, RolesGuard)@Get(':movieId')\n                \n            \n\n            \n                \n                    Defined in src/modules/review/review.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getByyUserId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByyUserId(param)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @hasRoles(Role.Admin)@UseGuards(JwtAuthGuard, RolesGuard)@Get('user/:userId')\n                \n            \n\n            \n                \n                    Defined in src/modules/review/review.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Post,\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { hasRoles } from '../auth/decorators/roles.decorators';\nimport { JwtAuthGuard } from '../auth/guards/jwt-guards';\nimport { RolesGuard } from '../auth/guards/roles-guards';\nimport { Role } from '../roles.enum';\nimport { ReviewService } from './review.service';\n\n@Controller('review')\nexport class ReviewController {\n  constructor(private reviewServices: ReviewService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async Add(@Request() req) {\n    return await this.reviewServices.reviewAMovie(req.body);\n  }\n\n  @hasRoles(Role.Admin)\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Get(':movieId')\n  async getByyMovieId(@Param() param) {\n    return await this.reviewServices.reviewAMovieByAMovie(param.movieId);\n  }\n\n  @hasRoles(Role.Admin)\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Get('user/:userId')\n  async getByyUserId(@Param() param) {\n    return await this.reviewServices.reviewAMovieByAUser(param.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ReviewModule.html":{"url":"modules/ReviewModule.html","title":"module - ReviewModule","body":"\n                   \n\n\n\n\n    Modules\n    ReviewModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ReviewModule\n\n\n\ncluster_ReviewModule_imports\n\n\n\ncluster_ReviewModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nReviewModule\n\nReviewModule\n\nReviewModule -->\n\nAuthModule->ReviewModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nReviewModule -->\n\nUsersModule->ReviewModule\n\n\n\n\n\nReviewService\n\nReviewService\n\nReviewModule -->\n\nReviewService->ReviewModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/review/review.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ReviewService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ReviewController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ReviewService } from './review.service';\nimport { ReviewController } from './review.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { reviewProviders } from './review.providers';\nimport { UsersModule } from '../users/users.module';\nimport { AuthModule } from '../auth/auth.module';\n\n@Module({\n  imports: [\n    UsersModule,\n    AuthModule,\n    JwtModule.register({\n      secret: process.env.JWTKEY,\n      signOptions: { expiresIn: process.env.TOKEN_EXPIRATION },\n    }),\n  ],\n  providers: [ReviewService, ...reviewProviders],\n  controllers: [ReviewController],\n})\nexport class ReviewModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReviewService.html":{"url":"injectables/ReviewService.html","title":"injectable - ReviewService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ReviewService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/review/review.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                reviewAMovie\n                            \n                            \n                                    Async\n                                reviewAMovieByAMovie\n                            \n                            \n                                    Async\n                                reviewAMovieByAUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, reviewRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/review/review.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reviewRepository\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reviewAMovie\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reviewAMovie(req: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/review/review.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reviewAMovieByAMovie\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reviewAMovieByAMovie(movieID: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/review/review.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    movieID\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reviewAMovieByAUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reviewAMovieByAUser(userID: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/review/review.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { REVIEW_REPOSITORY } from 'src/core/constants';\nimport { Movie } from '../movie/movie.entity';\nimport { User } from '../users/user.entity';\nimport { Review } from './review.entity';\n\n@Injectable()\nexport class ReviewService {\n  constructor(\n    private jwtService: JwtService,\n    @Inject(REVIEW_REPOSITORY) private readonly reviewRepository: typeof Review,\n  ) {}\n\n  async reviewAMovie(req: any) {\n    const rawToken = req.headers.authorization;\n    const token = rawToken.split('Bearer ')[1];\n    console.log(token);\n    const json: any = this.jwtService.decode(token);\n    console.log(json.id);\n    let review = {\n      userID: json.id,\n      movieID: req.body.movieID,\n      rate: req.body.review,\n    };\n    this.reviewRepository.create((review as unknown) as Review);\n  }\n\n  async reviewAMovieByAUser(userID: number) {\n    return await this.reviewRepository.findAll({\n      where: { userID },\n      include: [\n        {\n          model: Movie,\n        },\n        { model: User },\n      ],\n    });\n  }\n\n  async reviewAMovieByAMovie(movieID: number) {\n    return await this.reviewRepository.findAll({\n      where: { movieID },\n      include: [\n        {\n          model: Movie,\n        },\n        { model: User },\n      ],\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/modules/auth/guards/roles-guards.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/roles-guards.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/guards/roles-guards.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpCode,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { UsersService } from 'src/modules/users/users.service';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private userService: UsersService,\n  ) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const roles = this.reflector.get('roles', context.getHandler());\n    if (!roles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n\n    return user && matchRoles(roles, user.role);\n  }\n}\nfunction matchRoles(\n  roles: string[],\n  userRoles: string,\n): boolean | Promise | Observable {\n  let hasPermission = false;\n  roles.forEach((element) => {\n    if (element == userRoles) {\n      hasPermission = true;\n    }\n  });\n\n  return hasPermission;\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SocialUserDto.html":{"url":"classes/SocialUserDto.html","title":"class - SocialUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SocialUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/SocialUserDto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accountId\n                            \n                            \n                                accountWith\n                            \n                            \n                                email\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            accountId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/dto/SocialUserDto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            accountWith\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/dto/SocialUserDto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/dto/SocialUserDto.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/dto/SocialUserDto.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class SocialUserDto {\n  name: string;\n  email: string;\n  accountWith: string;\n  accountId: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/user.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accountId\n                            \n                            \n                                accountWith\n                            \n                            \n                                active\n                            \n                            \n                                email\n                            \n                            \n                                gender\n                            \n                            \n                                Movie\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                Profile\n                            \n                            \n                                Rate\n                            \n                            \n                                Review\n                            \n                            \n                                role\n                            \n                            \n                                validateToken\n                            \n                            \n                                validationTokenExpire\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                emailToLowerCase\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            accountId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/user.entity.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            accountWith\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/user.entity.ts:56\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            active\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined, defaultValue: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/user.entity.ts:66\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined, unique: true, allowNull: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/user.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gender\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined, values: undefined, defaultValue: 'male'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/user.entity.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Movie\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Movie\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @HasOne(undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/user.entity.ts:78\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined, allowNull: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/user.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/user.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Profile\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Profile\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @HasOne(undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/user.entity.ts:80\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Rate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Rate\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @HasMany(undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/user.entity.ts:82\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Review\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Review\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @HasMany(undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/user.entity.ts:84\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined, values: undefined, defaultValue: 'user'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/user.entity.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            validateToken\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/user.entity.ts:71\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            validationTokenExpire\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/user.entity.ts:75\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            emailToLowerCase\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    emailToLowerCase(instance: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @BeforeCreate()@BeforeUpdate()\n                \n            \n\n            \n                \n                    Defined in src/modules/users/user.entity.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    instance\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { profile } from 'node:console';\nimport {\n  Table,\n  Column,\n  Model,\n  DataType,\n  BeforeUpdate,\n  BeforeCreate,\n  HasMany,\n  HasOne,\n} from 'sequelize-typescript';\nimport { Movie } from '../movie/movie.entity';\nimport { Profile } from '../profile/profile.entity';\nimport { Rate } from '../rateing/rate.entity';\nimport { Review } from '../review/review.entity';\nimport { Role } from '../roles.enum';\n\n@Table({\n  tableName: 'Users',\n})\nexport class User extends Model {\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  name: string;\n\n  @Column({\n    type: DataType.STRING,\n    unique: true,\n    allowNull: false,\n  })\n  email: string;\n\n  @Column({\n    type: DataType.STRING,\n  })\n  password: string;\n\n  @Column({\n    type: DataType.ENUM,\n    values: ['male', 'female'],\n    defaultValue: 'male',\n  })\n  gender: string;\n\n  @Column({\n    type: DataType.ENUM,\n    values: [Role.User, Role.Admin],\n    defaultValue: 'user',\n  })\n  role: string;\n  @Column({\n    type: DataType.STRING,\n  })\n  accountWith: string;\n\n  @Column({\n    type: DataType.STRING,\n  })\n  accountId: string;\n  @Column({\n    type: DataType.BOOLEAN,\n    defaultValue: true,\n  })\n  active: boolean;\n\n  @Column({\n    type: DataType.STRING,\n  })\n  validateToken: string;\n  @Column({\n    type: DataType.BIGINT,\n  })\n  validationTokenExpire: number;\n\n  @HasOne(() => Movie, { onDelete: 'CASCADE' })\n  Movie: Movie;\n  @HasOne(() => Profile, { onDelete: 'CASCADE' })\n  Profile: Profile;\n  @HasMany(() => Rate, { onDelete: 'CASCADE' })\n  Rate: Rate;\n  @HasMany(() => Review, { onDelete: 'CASCADE' })\n  Review: Review;\n  @BeforeCreate\n  @BeforeUpdate\n  static emailToLowerCase(instance: User) {\n    instance.email = instance.email.toLowerCase();\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accountId\n                            \n                            \n                                accountWith\n                            \n                            \n                                email\n                            \n                            \n                                gender\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            accountId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/dto/user.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            accountWith\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/dto/user.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/dto/user.dto.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gender\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/dto/user.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/dto/user.dto.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/dto/user.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/users/dto/user.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserDto {\n  name: string;\n  email: string;\n  password: string;\n  gender: string;\n  role: string;\n  accountWith: string;\n  accountId: string;\n\n  // constructor(\n  //   name: string,\n  //   email: string,\n  //   password: string,\n  //   gender: string,\n  //   role: string,\n  //   accountWith: string,\n  //   accountId: string,\n  // ) {\n  //   this.name = name;\n  //   this.email = email;\n  //   this.password = password;\n  //   this.gender = gender;\n  //   this.role = role;\n  //   this.accountWith = accountWith;\n  //   this.accountId = accountId;\n  // }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nUsersModule -->\n\nJwtStrategy->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtStrategy\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from '../auth/strategy/jwt.strategy';\nimport { usersProviders } from './user.providers';\nimport { MovieModule } from '../movie/movie.module';\n\n@Module({\n  imports: [\n    JwtModule.register({\n      secret: process.env.JWTKEY,\n      signOptions: { expiresIn: process.env.TOKEN_EXPIRATION },\n    }),\n  ],\n  providers: [UsersService, ...usersProviders, JwtStrategy],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createBySocial\n                            \n                            \n                                    Async\n                                findAllUser\n                            \n                            \n                                    Async\n                                findByVerifyToken\n                            \n                            \n                                    Async\n                                findOnebyaccountid\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                search\n                            \n                            \n                                    Async\n                                UpdateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(creatUserDTO: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    creatUserDTO\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createBySocial\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createBySocial(creatUserDTO: SocialUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    creatUserDTO\n                                    \n                                                SocialUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAllUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUser()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByVerifyToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByVerifyToken(tokenSend: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenSend\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOnebyaccountid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOnebyaccountid(accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            search\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    search(req)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            UpdateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    UpdateUser(id: number, userUpdate: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userUpdate\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  Inject,\n  HttpException,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { User } from './user.entity';\nimport { UserDto } from './dto/user.dto';\nimport { USER_REPOSITORY } from '../../core/constants';\nimport { JwtService } from '@nestjs/jwt';\nimport { SocialUserDto } from './dto/SocialUserDto';\nimport { sendEmail } from 'src/utlis/sendMail';\nimport * as crypto from 'crypto';\nimport { DATE } from 'sequelize/types';\nimport { Op } from 'sequelize';\nimport { HttpErrorByCode } from '@nestjs/common/utils/http-error-by-code.util';\n// import { MovieService } from '../movie/movie.service';\n\n//import { confirmEmail } from 'src/utlis/confirmEmailLink';\n\n@Injectable()\nexport class UsersService {\n  // async updateToken(user: any, token: string) {\n  //   let userUpdate: User = await this.findOneById(user.id);\n  //   userUpdate.token = token;\n  //   userUpdate.save();\n  //   return userUpdate;\n  // }\n\n  constructor(\n    @Inject(USER_REPOSITORY) private readonly userRepository: typeof User,\n    private readonly jwtService: JwtService, // private movieServices: MovieService,\n  ) {}\n\n  async create(creatUserDTO: UserDto) {\n    let user = new User();\n\n    const alreadyInUse = await this.findOneByEmail(creatUserDTO.email);\n    if (alreadyInUse) {\n      throw new HttpException('Sorry this email is already in use', 404);\n    }\n\n    user.name = creatUserDTO.name;\n    user.password = creatUserDTO.password;\n    user.role = creatUserDTO.role;\n    user.accountId = creatUserDTO.accountId;\n    user.accountWith = creatUserDTO.accountWith;\n    user.email = creatUserDTO.email;\n    user.gender = creatUserDTO.gender;\n    let userData = await user.save();\n\n    userData.active = false;\n\n    const resetToken = crypto.randomBytes(5).toString('hex');\n    userData.validateToken = resetToken;\n\n    userData.validationTokenExpire = Date.now() + 10 * 60 * 1000;\n    console.log(userData);\n    await userData.save();\n    await sendEmail(user.email, resetToken);\n    return userData;\n  }\n\n  async findOnebyaccountid(accountId: string): Promise {\n    return await this.userRepository.findOne({ where: { accountId } });\n  }\n  async findByVerifyToken(tokenSend: string) {\n    const user = await this.userRepository.findOne({\n      where: { validateToken: tokenSend },\n    });\n    if (!user) {\n      throw new HttpException('User not found', 404);\n    }\n    console.log(user);\n    const dateNow = Date.now();\n    if (user.validationTokenExpire  {\n    return await this.userRepository.findOne({ where: { email } });\n  }\n\n  async findOneById(id: number): Promise {\n    return await this.userRepository.findOne({ where: { id } });\n  }\n  async findAllUser(): Promise {\n    return await this.userRepository.findAll();\n  }\n  async createBySocial(creatUserDTO: SocialUserDto) {\n    if (creatUserDTO.accountWith) {\n      const userAlreadyExsist = await this.findOnebyaccountid(\n        creatUserDTO.accountId,\n      );\n      if (userAlreadyExsist) {\n        return userAlreadyExsist;\n      }\n    }\n    let user = new User();\n    user.name = creatUserDTO.name;\n    user.accountId = creatUserDTO.accountId;\n    user.accountWith = creatUserDTO.accountWith;\n    user.email = creatUserDTO.email;\n    const userData = await user.save();\n\n    return userData;\n  }\n  async UpdateUser(id: number, userUpdate: UserDto) {\n    const user = await this.findOneById(id);\n    if (userUpdate.name != '') {\n      user.name = userUpdate.name;\n    }\n    if (userUpdate.password != '') {\n      user.password = userUpdate.password;\n      user.active = false;\n\n      const resetToken = crypto.randomBytes(5).toString('hex');\n      user.validateToken = resetToken;\n\n      user.validationTokenExpire = Date.now() + 10 * 60 * 1000;\n      console.log(user);\n      await sendEmail(user.email, resetToken);\n    }\n    if (userUpdate.gender != '') {\n      user.gender = userUpdate.gender;\n    }\n    if (userUpdate.email != '') {\n      user.email = userUpdate.email;\n      const resetToken = crypto.randomBytes(5).toString('hex');\n      user.validateToken = resetToken;\n\n      user.validationTokenExpire = Date.now() + 10 * 60 * 1000;\n      console.log(user);\n      await sendEmail(user.email, resetToken);\n    }\n    await user.save();\n    return user;\n  }\n  async search(req) {\n    const data = req.query;\n    Object.entries(data).forEach(([key, val]: any) =>\n      isNaN(val) ? (data[key] = { [Op.like]: '%' + val + '%' }) : val,\n    );\n    console.log(data);\n    return await this.userRepository.findAndCountAll({\n      where: data,\n    });\n  }\n  //   async rateAMovie(obj) {\n  //     if (obj.rate > 5 || obj.rate \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/actorMovieDTO.html":{"url":"classes/actorMovieDTO.html","title":"class - actorMovieDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  actorMovieDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/movie/actormovie.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                actorID\n                            \n                            \n                                    Public\n                                movieID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            actorID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/actormovie.dto.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            movieID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie/actormovie.dto.ts:3\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class actorMovieDTO {\n  public actorID: number;\n  public movieID: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/constants/index.ts\n            \n            variable\n            DEVELOPMENT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/index.ts\n            \n            variable\n            GENRE_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/index.ts\n            \n            variable\n            MOVIE_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/index.ts\n            \n            variable\n            MOVIEACTOR_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/index.ts\n            \n            variable\n            MOVIEDIRECTOR_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/index.ts\n            \n            variable\n            MOVIEGENRE_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/index.ts\n            \n            variable\n            PERSON_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/index.ts\n            \n            variable\n            PRODUCTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/index.ts\n            \n            variable\n            PRODUCTIONHOUSE_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/index.ts\n            \n            variable\n            PROFILE_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/index.ts\n            \n            variable\n            RATE_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/index.ts\n            \n            variable\n            REVIEW_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/index.ts\n            \n            variable\n            SEQUELIZE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/index.ts\n            \n            variable\n            TEST\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/index.ts\n            \n            variable\n            USER_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/database/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/database/database.providers.ts\n            \n            variable\n            databaseProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/database/database.providers.ts\n            \n            variable\n            sequelize\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/database/dbConfig.interface.ts\n            \n            interface\n            IDatabaseConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/database/dbConfig.interface.ts\n            \n            interface\n            IDatabaseConfigAttributes\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/auth/decorators/roles.decorators.ts\n            \n            variable\n            hasRoles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/jwt-guards.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/roles-guards.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/roles-guards.ts\n            \n            function\n            matchRoles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/facebook.strategy.ts\n            \n            injectable\n            FacebookStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/genres/genre.dto.ts\n            \n            class\n            GenreDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/genres/genre.entity.ts\n            \n            class\n            Genre\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/genres/genre.provider.ts\n            \n            variable\n            genresProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/genres/genres.controller.ts\n            \n            controller\n            GenresController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/genres/genres.service.ts\n            \n            injectable\n            GenresService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/movie-director/directorMovieDto.ts\n            \n            class\n            directorMovieDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/movie-director/movie-director.entity.ts\n            \n            class\n            MovieDirector\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/movie-director/movie-director.provider.ts\n            \n            variable\n            movieDirectorProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/movie-director/movie-director.service.ts\n            \n            injectable\n            MovieDirectorService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/movie-genres/movie-genres.service.ts\n            \n            injectable\n            MovieGenresService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/movie-genres/movie_genre.dto.ts\n            \n            class\n            genreMovieDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/movie-genres/movie_genre.entity.ts\n            \n            class\n            MovieGenre\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/movie-genres/movie_genre.provider.ts\n            \n            variable\n            movieGenreProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/movie/MovieActor.entity.ts\n            \n            class\n            MovieActor\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/movie/MovieActor.providers.ts\n            \n            variable\n            movieActorProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/movie/actormovie.dto.ts\n            \n            class\n            actorMovieDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/movie/fileuploaddto.ts\n            \n            class\n            FileUploadDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/movie/movie.controller.ts\n            \n            controller\n            MovieController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/movie/movie.entity.ts\n            \n            class\n            Movie\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/modules/movie/movie.service.ts\n            \n            injectable\n            MovieService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/movie/movie.service.ts\n            \n            variable\n            editFileName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/movie/movie.service.ts\n            \n            variable\n            imageFileFilter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/movie/movieActor.service.ts\n            \n            injectable\n            MovieActorService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/movie/movieDto.ts\n            \n            class\n            MovieDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/movie/movies.providers.ts\n            \n            variable\n            moviesProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/persons/personDTO.ts\n            \n            class\n            PersonDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/persons/persons.controller.ts\n            \n            controller\n            PersonsController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/persons/persons.entity.ts\n            \n            class\n            Person\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/persons/persons.providers.ts\n            \n            variable\n            personsProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/persons/persons.service.ts\n            \n            injectable\n            PersonsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/production-house/ProductionHouse.dto.ts\n            \n            class\n            ProductionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/production-house/production-house.controller.ts\n            \n            controller\n            ProductionHouseController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/production-house/production-house.entity.ts\n            \n            class\n            ProductionHouse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/production-house/production-house.providers.ts\n            \n            variable\n            productionHouseProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/production-house/production-house.service.ts\n            \n            injectable\n            ProductionHouseService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.controller.ts\n            \n            controller\n            ProfileController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.entity.ts\n            \n            class\n            Profile\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.providers.ts\n            \n            variable\n            profileProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.service.ts\n            \n            variable\n            editFileName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.service.ts\n            \n            variable\n            imageFileFilter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/rateing/rate.entity.ts\n            \n            class\n            Rate\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/rateing/rate.providers.ts\n            \n            variable\n            rateProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/rateing/rateing.controller.ts\n            \n            controller\n            RateingController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/rateing/rateing.service.ts\n            \n            injectable\n            RatingService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/review/review.controller.ts\n            \n            controller\n            ReviewController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/review/review.entity.ts\n            \n            class\n            Review\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/review/review.providers.ts\n            \n            variable\n            reviewProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/review/review.service.ts\n            \n            injectable\n            ReviewService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/users/dto/SocialUserDto.ts\n            \n            class\n            SocialUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/users/dto/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/users/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/modules/users/user.providers.ts\n            \n            variable\n            usersProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/utlis/apiFeature.ts\n            \n            class\n            APIFeatures\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utlis/sendMail.ts\n            \n            variable\n            sendEmail\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/mailer : ^1.6.0\n        \n            @nestjs/common : ^7.6.15\n        \n            @nestjs/config : ^0.6.3\n        \n            @nestjs/core : ^7.6.15\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.6.15\n        \n            @nestjs/sequelize : ^0.2.0\n        \n            @nestjs/serve-static : ^2.1.4\n        \n            @nestjs/swagger : ^4.8.0\n        \n            @nestjs/terminus : ^7.1.2\n        \n            @types/jsonwebtoken : ^8.5.1\n        \n            @types/passport-facebook : ^2.1.10\n        \n            bcrypt : ^5.0.1\n        \n            dotenv : ^8.2.0\n        \n            jsonwebtoken : ^8.5.1\n        \n            nodemailer : ^6.5.0\n        \n            passport : ^0.4.1\n        \n            passport-facebook : ^3.0.0\n        \n            passport-facebook-token : ^4.0.0\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.6.0\n        \n            pg-hstore : ^2.3.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.6\n        \n            sequelize : ^6.6.2\n        \n            sequelize-cli : ^6.2.0\n        \n            sequelize-search-builder : ^0.11.0\n        \n            sequelize-typescript : ^2.1.0\n        \n            swagger-ui-express : ^4.1.6\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/directorMovieDTO.html":{"url":"classes/directorMovieDTO.html","title":"class - directorMovieDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  directorMovieDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/movie-director/directorMovieDto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                directorID\n                            \n                            \n                                    Public\n                                movieID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            directorID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie-director/directorMovieDto.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            movieID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie-director/directorMovieDto.ts:3\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class directorMovieDTO {\n  public directorID: number;\n  public movieID: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../roles.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/roles.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            matchRoles   (src/.../roles-guards.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/modules/auth/guards/roles-guards.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            matchRoles\n                        \n                        \n                    \n                \n            \n            \n                \nmatchRoles(roles, userRoles)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roles\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userRoles\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/genreMovieDTO.html":{"url":"classes/genreMovieDTO.html","title":"class - genreMovieDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  genreMovieDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/movie-genres/movie_genre.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                genreID\n                            \n                            \n                                    Public\n                                movieID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            genreID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie-genres/movie_genre.dto.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            movieID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/movie-genres/movie_genre.dto.ts:3\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class genreMovieDTO {\n  public genreID: number;\n  public movieID: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GenresModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MovieDirectorModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MovieGenresModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MovieModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PersonsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductionHouseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RateingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReviewModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_GenresModule\n\n\n\ncluster_GenresModule_providers\n\n\n\ncluster_MovieDirectorModule\n\n\n\ncluster_MovieDirectorModule_exports\n\n\n\ncluster_MovieDirectorModule_providers\n\n\n\ncluster_MovieGenresModule\n\n\n\ncluster_MovieGenresModule_exports\n\n\n\ncluster_MovieGenresModule_providers\n\n\n\ncluster_MovieModule\n\n\n\ncluster_MovieModule_exports\n\n\n\ncluster_MovieModule_providers\n\n\n\ncluster_PersonsModule\n\n\n\ncluster_PersonsModule_exports\n\n\n\ncluster_PersonsModule_providers\n\n\n\ncluster_ProductionHouseModule\n\n\n\ncluster_ProductionHouseModule_providers\n\n\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\ncluster_RateingModule\n\n\n\ncluster_RateingModule_providers\n\n\n\ncluster_ReviewModule\n\n\n\ncluster_ReviewModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nGenresModule\n\nGenresModule\n\nGenresModule -->\n\nAuthModule->GenresModule\n\n\n\n\n\nMovieModule\n\nMovieModule\n\nMovieModule -->\n\nAuthModule->MovieModule\n\n\n\n\n\nPersonsModule\n\nPersonsModule\n\nPersonsModule -->\n\nAuthModule->PersonsModule\n\n\n\n\n\nProductionHouseModule\n\nProductionHouseModule\n\nProductionHouseModule -->\n\nAuthModule->ProductionHouseModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nProfileModule -->\n\nAuthModule->ProfileModule\n\n\n\n\n\nRateingModule\n\nRateingModule\n\nRateingModule -->\n\nAuthModule->RateingModule\n\n\n\n\n\nReviewModule\n\nReviewModule\n\nReviewModule -->\n\nAuthModule->ReviewModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nRolesGuard \n\nRolesGuard \n\nRolesGuard  -->\n\nAuthModule->RolesGuard \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nMovieModule -->\n\nGenresModule->MovieModule\n\n\n\nAppModule -->\n\nGenresModule->AppModule\n\n\n\n\n\nMovieDirectorModule\n\nMovieDirectorModule\n\nMovieModule -->\n\nMovieDirectorModule->MovieModule\n\n\n\nAppModule -->\n\nMovieDirectorModule->AppModule\n\n\n\n\n\nMovieDirectorService \n\nMovieDirectorService \n\nMovieDirectorService  -->\n\nMovieDirectorModule->MovieDirectorService \n\n\n\n\n\nMovieGenresModule\n\nMovieGenresModule\n\nMovieModule -->\n\nMovieGenresModule->MovieModule\n\n\n\nAppModule -->\n\nMovieGenresModule->AppModule\n\n\n\n\n\nMovieGenresService \n\nMovieGenresService \n\nMovieGenresService  -->\n\nMovieGenresModule->MovieGenresService \n\n\n\nRateingModule -->\n\nMovieModule->RateingModule\n\n\n\nAppModule -->\n\nMovieModule->AppModule\n\n\n\n\n\nMovieService \n\nMovieService \n\nMovieService  -->\n\nMovieModule->MovieService \n\n\n\nMovieModule -->\n\nPersonsModule->MovieModule\n\n\n\nAppModule -->\n\nPersonsModule->AppModule\n\n\n\n\n\nPersonsService \n\nPersonsService \n\nPersonsService  -->\n\nPersonsModule->PersonsService \n\n\n\nMovieModule -->\n\nProductionHouseModule->MovieModule\n\n\n\nAppModule -->\n\nProductionHouseModule->AppModule\n\n\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\nAppModule -->\n\nRateingModule->AppModule\n\n\n\nAppModule -->\n\nReviewModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nGenresModule -->\n\nUsersModule->GenresModule\n\n\n\nMovieModule -->\n\nUsersModule->MovieModule\n\n\n\nPersonsModule -->\n\nUsersModule->PersonsModule\n\n\n\nProductionHouseModule -->\n\nUsersModule->ProductionHouseModule\n\n\n\nProfileModule -->\n\nUsersModule->ProfileModule\n\n\n\nRateingModule -->\n\nUsersModule->RateingModule\n\n\n\nReviewModule -->\n\nUsersModule->ReviewModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nFacebookStrategy\n\nFacebookStrategy\n\nAuthModule -->\n\nFacebookStrategy->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\nGenresModule -->\n\nJwtAuthGuard->GenresModule\n\n\n\nMovieModule -->\n\nJwtAuthGuard->MovieModule\n\n\n\nPersonsModule -->\n\nJwtAuthGuard->PersonsModule\n\n\n\nProductionHouseModule -->\n\nJwtAuthGuard->ProductionHouseModule\n\n\n\nRateingModule -->\n\nJwtAuthGuard->RateingModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\nUsersModule -->\n\nJwtStrategy->UsersModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nGenresService\n\nGenresService\n\nGenresModule -->\n\nGenresService->GenresModule\n\n\n\n\n\nMovieDirectorService\n\nMovieDirectorService\n\nMovieDirectorModule -->\n\nMovieDirectorService->MovieDirectorModule\n\n\n\n\n\nMovieGenresService\n\nMovieGenresService\n\nMovieGenresModule -->\n\nMovieGenresService->MovieGenresModule\n\n\n\n\n\nMovieActorService\n\nMovieActorService\n\nMovieModule -->\n\nMovieActorService->MovieModule\n\n\n\n\n\nMovieService\n\nMovieService\n\nMovieModule -->\n\nMovieService->MovieModule\n\n\n\n\n\nPersonsService\n\nPersonsService\n\nPersonsModule -->\n\nPersonsService->PersonsModule\n\n\n\n\n\nProductionHouseService\n\nProductionHouseService\n\nProductionHouseModule -->\n\nProductionHouseService->ProductionHouseModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\nRatingService\n\nRatingService\n\nRateingModule -->\n\nRatingService->RateingModule\n\n\n\n\n\nReviewService\n\nReviewService\n\nReviewModule -->\n\nReviewService->ReviewModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        13 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    18 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    22 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            databaseProviders   (src/.../database.providers.ts)\n                        \n                        \n                            DEVELOPMENT   (src/.../index.ts)\n                        \n                        \n                            editFileName   (src/.../movie.service.ts)\n                        \n                        \n                            editFileName   (src/.../profile.service.ts)\n                        \n                        \n                            GENRE_REPOSITORY   (src/.../index.ts)\n                        \n                        \n                            genresProviders   (src/.../genre.provider.ts)\n                        \n                        \n                            hasRoles   (src/.../roles.decorators.ts)\n                        \n                        \n                            imageFileFilter   (src/.../movie.service.ts)\n                        \n                        \n                            imageFileFilter   (src/.../profile.service.ts)\n                        \n                        \n                            MOVIE_REPOSITORY   (src/.../index.ts)\n                        \n                        \n                            MOVIEACTOR_REPOSITORY   (src/.../index.ts)\n                        \n                        \n                            movieActorProviders   (src/.../MovieActor.providers.ts)\n                        \n                        \n                            MOVIEDIRECTOR_REPOSITORY   (src/.../index.ts)\n                        \n                        \n                            movieDirectorProviders   (src/.../movie-director.provider.ts)\n                        \n                        \n                            MOVIEGENRE_REPOSITORY   (src/.../index.ts)\n                        \n                        \n                            movieGenreProviders   (src/.../movie_genre.provider.ts)\n                        \n                        \n                            moviesProviders   (src/.../movies.providers.ts)\n                        \n                        \n                            PERSON_REPOSITORY   (src/.../index.ts)\n                        \n                        \n                            personsProviders   (src/.../persons.providers.ts)\n                        \n                        \n                            PRODUCTION   (src/.../index.ts)\n                        \n                        \n                            PRODUCTIONHOUSE_REPOSITORY   (src/.../index.ts)\n                        \n                        \n                            productionHouseProviders   (src/.../production-house.providers.ts)\n                        \n                        \n                            PROFILE_REPOSITORY   (src/.../index.ts)\n                        \n                        \n                            profileProviders   (src/.../profile.providers.ts)\n                        \n                        \n                            RATE_REPOSITORY   (src/.../index.ts)\n                        \n                        \n                            rateProviders   (src/.../rate.providers.ts)\n                        \n                        \n                            REVIEW_REPOSITORY   (src/.../index.ts)\n                        \n                        \n                            reviewProviders   (src/.../review.providers.ts)\n                        \n                        \n                            sendEmail   (src/.../sendMail.ts)\n                        \n                        \n                            sequelize   (src/.../database.providers.ts)\n                        \n                        \n                            SEQUELIZE   (src/.../index.ts)\n                        \n                        \n                            TEST   (src/.../index.ts)\n                        \n                        \n                            USER_REPOSITORY   (src/.../index.ts)\n                        \n                        \n                            usersProviders   (src/.../user.providers.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/database/database.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            databaseConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDatabaseConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  development: {\n    username: process.env.DB_USER,\n    password: process.env.DB_PASS,\n    database: process.env.DB_NAME_DEVELOPMENT,\n    host: process.env.DB_HOST,\n    port: process.env.DB_PORT,\n    dialect: process.env.DB_DIALECT,\n    logging: false,\n  },\n  test: {\n    username: process.env.DB_USER,\n    password: process.env.DB_PASS,\n    database: process.env.DB_NAME_TEST,\n    host: process.env.DB_HOST,\n    port: process.env.DB_PORT,\n    dialect: process.env.DB_DIALECT,\n  },\n  production: {\n    username: process.env.DB_USER,\n    password: process.env.DB_PASS,\n    database: process.env.DB_NAME_PRODUCTION,\n    host: process.env.DB_HOST,\n    dialect: process.env.DB_DIALECT,\n  },\n}\n                        \n                    \n\n\n            \n        \n\n    src/core/database/database.providers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            databaseProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    provide: SEQUELIZE,\n    useFactory: async function connection() {\n      let config;\n      console.log(process.env.NODE_ENV);\n      switch (process.env.NODE_ENV) {\n        case DEVELOPMENT:\n          console.log(process.env.NODE_ENV);\n          config = databaseConfig.development;\n          break;\n        case TEST:\n          config = databaseConfig.test;\n          break;\n        case PRODUCTION:\n          config = databaseConfig.production;\n          break;\n        default:\n          config = databaseConfig.development;\n      }\n\n      sequelize = new Sequelize(config);\n      sequelize.addModels([\n        Movie,\n        ProductionHouse,\n        Person,\n        MovieActor,\n        MovieDirector,\n        Genre,\n        MovieGenre,\n        User,\n        Rate,\n        Review,\n        Profile,\n      ]);\n      await sequelize.sync();\n      return sequelize;\n    },\n  },\n]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sequelize\n                            \n                        \n                    \n                \n\n\n            \n        \n\n    src/core/constants/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEVELOPMENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'development'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            GENRE_REPOSITORY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'GENRE_REPOSITORY'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MOVIE_REPOSITORY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'MOVIE_REPOSITORY'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MOVIEACTOR_REPOSITORY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'MOVIEACTOR_REPOSITORY'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MOVIEDIRECTOR_REPOSITORY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'MOVIEDIRECTOR_REPOSITORY'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MOVIEGENRE_REPOSITORY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'MOVIEGENRE_REPOSITORY'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PERSON_REPOSITORY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'PERSON_REPOSITORY'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PRODUCTION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'production'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PRODUCTIONHOUSE_REPOSITORY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'PRODUCTIONHOUSE_REPOSITORY'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PROFILE_REPOSITORY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'PROFILE_REPOSITORY'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RATE_REPOSITORY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'RATE_REPOSITORY'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            REVIEW_REPOSITORY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'REVIEW_REPOSITORY'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SEQUELIZE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'SEQUELIZE'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TEST\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'test'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            USER_REPOSITORY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'USER_REPOSITORY'\n                        \n                    \n\n\n            \n        \n\n    src/modules/movie/movie.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            editFileName\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : async (req, file, callback) => {\n  console.log(req.params.id);\n  const id = req.params.id;\n  const movie = await Movie.findOne({ where: { id } });\n  console.log(movie);\n\n  const name = movie.title;\n  const fileExtName = extname(file.originalname);\n\n  callback(null, `${name}${fileExtName}`);\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            imageFileFilter\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (req, file, callback) => {\n  if (!file.originalname.match(/\\.(jpg|jpeg|png|gif|PNG)$/)) {\n    return callback(\n      new HttpException(\n        'only jpg|jpeg|png|gif files allow',\n        HttpStatus.FORBIDDEN,\n      ),\n      false,\n    );\n  }\n  callback(null, true);\n}\n                        \n                    \n\n\n            \n        \n\n    src/modules/profile/profile.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            editFileName\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : async (req, file, callback) => {\n  console.log(req.params.id);\n  const user = req.user.name;\n\n  const name = user;\n  const fileExtName = extname(file.originalname);\n\n  callback(null, `${name}${fileExtName}`);\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            imageFileFilter\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (req, file, callback) => {\n  if (!file.originalname.match(/\\.(jpg|jpeg|png|gif|PNG)$/)) {\n    return callback(new Error('Only image files are allowed!'), false);\n  }\n  callback(null, true);\n}\n                        \n                    \n\n\n            \n        \n\n    src/modules/genres/genre.provider.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            genresProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    provide: GENRE_REPOSITORY,\n    useValue: Genre,\n  },\n]\n                        \n                    \n\n\n            \n        \n\n    src/modules/auth/decorators/roles.decorators.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            hasRoles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...hasRoles: Role[]) => SetMetadata('roles', hasRoles)\n                        \n                    \n\n\n            \n        \n\n    src/modules/movie/MovieActor.providers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            movieActorProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    provide: MOVIEACTOR_REPOSITORY,\n    useValue: MovieActor,\n  },\n]\n                        \n                    \n\n\n            \n        \n\n    src/modules/movie-director/movie-director.provider.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            movieDirectorProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    provide: MOVIEDIRECTOR_REPOSITORY,\n    useValue: MovieDirector,\n  },\n]\n                        \n                    \n\n\n            \n        \n\n    src/modules/movie-genres/movie_genre.provider.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            movieGenreProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    provide: MOVIEGENRE_REPOSITORY,\n    useValue: MovieGenre,\n  },\n]\n                        \n                    \n\n\n            \n        \n\n    src/modules/movie/movies.providers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            moviesProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    provide: MOVIE_REPOSITORY,\n    useValue: Movie,\n  },\n]\n                        \n                    \n\n\n            \n        \n\n    src/modules/persons/persons.providers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            personsProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    provide: PERSON_REPOSITORY,\n    useValue: Person,\n  },\n]\n                        \n                    \n\n\n            \n        \n\n    src/modules/production-house/production-house.providers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            productionHouseProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    provide: PRODUCTIONHOUSE_REPOSITORY,\n    useValue: ProductionHouse,\n  },\n]\n                        \n                    \n\n\n            \n        \n\n    src/modules/profile/profile.providers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            profileProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    provide: PROFILE_REPOSITORY,\n    useValue: Profile,\n  },\n]\n                        \n                    \n\n\n            \n        \n\n    src/modules/rateing/rate.providers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            rateProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    provide: RATE_REPOSITORY,\n    useValue: Rate,\n  },\n]\n                        \n                    \n\n\n            \n        \n\n    src/modules/review/review.providers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            reviewProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    provide: REVIEW_REPOSITORY,\n    useValue: Review,\n  },\n]\n                        \n                    \n\n\n            \n        \n\n    src/utlis/sendMail.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            sendEmail\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : async (email: string, token: string) => {\n  // create reusable transporter object using the default SMTP transport\n  let transporter = nodemailer.createTransport({\n    host: 'smtp.mailtrap.io',\n    port: 2525,\n    secure: false, // true for 465, false for other ports\n    auth: {\n      user: '2c6995c49c5d2c', // generated ethereal user\n      pass: '8f9e6b1e27b35e', // generated ethereal password\n    },\n  });\n\n  // send mail with defined transport object\n  let info = await transporter.sendMail({\n    from: '\"Fred Foo 👻\" ', // sender address\n    to: email, // list of receivers\n    subject: 'Hello ✔', // Subject line\n    text: 'Hello world?', // plain text body\n    html: `Hello world this is a token ${token}`, // html body\n  });\n\n  console.log('Message sent: %s', info.messageId);\n  // Message sent: \n\n  // Preview only available when sending through an Ethereal account\n  //   console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\n  //   // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...\n}\n                        \n                    \n\n\n            \n        \n\n    src/modules/users/user.providers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            usersProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    provide: USER_REPOSITORY,\n    useValue: User,\n  },\n]\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
